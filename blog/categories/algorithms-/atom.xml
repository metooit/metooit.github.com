<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithms, | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/algorithms-/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-14T17:39:34+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Algorithms : Sort --- Radix Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/14/learning-algorithms-sort-radix-sort/"/>
    <updated>2013-02-14T14:48:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/14/learning-algorithms-sort-radix-sort</id>
    <content type="html"><![CDATA[<p><em>基数排序</em>是老式卡片排序机上的算法，为了保证基数排序的正确性， 一位数排序的算法必须是稳定的。</p>

<p><img src="/pictures/radix-sort.jpg" title="" ></p>

<h2>关于排序的稳定性：</h2>

<ul>
<li>排序的稳定性是指： 如果存在具有多个相同排序码的记录， 经过排序后，这些排序码的相对次序仍然保持不变。</li>
</ul>


<p>** 插入排序、 冒泡排序、 归并排序、 桶排序、 基数排序 都是稳定的排序算法</p>

<p>** 不稳定的排序算法: 选择排序、 堆排序、 shell排序、 快速排序都是不稳定的排序</p>

<h2>基数排序的实现过程：</h2>

<!-- more -->


<p><img src="/pictures/radix-sort2.jpg"></p>

<p>用编程来实现：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>radix-sort    radix-sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// 找到数组中的最大元素</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">maxElement</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">mov</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>        <span class="n">k</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">mov</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">radixSort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">maxElement</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">temp_array</span><span class="p">,</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="n">mult</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*分配临时数组存储相同大小的元素的个数*/</span>
</span><span class='line'><span class="n">temp_array</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'><span class="cm">/*分配数组c用来存储排序后的数组*/</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">length</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'><span class="n">mult</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*用计数排序作为稳定的排序算法, 分别对每一位进行排序。*/</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">d</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">temp_array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">temp_array</span><span class="p">[</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="n">mult</span><span class="p">)]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">temp_array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp_array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">temp_array</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">temp_array</span><span class="p">[</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">%</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="n">mult</span><span class="p">)]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">temp_array</span><span class="p">[</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">%</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="n">mult</span><span class="p">)]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">mult</span> <span class="o">*=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>基数排序的结果验证：</h2>

<p><img src="/pictures/radix-sort3.png"></p>

<p><img src="/pictures/radix-sort-final.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Algorithms : Sort --- Heap Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/14/learning-algorithms-sort-heap-sort/"/>
    <updated>2013-02-14T10:52:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/14/learning-algorithms-sort-heap-sort</id>
    <content type="html"><![CDATA[<p><em>堆排序</em> 用到了 <em>堆</em> 这种数据结构， 所以我也要再次复习一下堆了。</p>

<hr />

<h2>堆：</h2>

<ul>
<li><code>二叉堆</code>是一个数组， 它可以被看成近似的完全二叉树， 树上的每一个节点对应数组中的一个元素。除了<code>底层</code>之外， 树是完全满的， 从左到右填充。</li>
<li>堆的数组A包含有两个属性： <strong> A.length 表示数组元素的个数， </strong> A.heap_size 表示有多少个堆元素在数组中。 A[1..A.heap-size]存放堆的有效数据。</li>
</ul>


<p>堆中的一个节点<code>i</code>的数据结构：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PARENT(i)
</span><span class='line'>1   return [i/2]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>LEFT(i)
</span><span class='line'>1   return 2i&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Right(i)
</span><span class='line'>1   return 2i + 1</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/pictures/heap-i.png" title="heap-i" ></p>

<ul>
<li>二叉堆可以分为两种形式，： 最大堆和最小堆。 <strong> 最大堆的性质 ——> A[PARENT(i)] > A[i] </strong> 最小堆性质相反。</li>
<li>在堆排序算法中， 我们使用的是最大堆， 最小堆通常用来构造优先队列。</li>
<li>堆中一个节点的高度是指该节点到叶结点最长简单路径上的边数。</li>
<li>堆结构上的一些基本操作的运行时间基本上与堆的高度成正比， 时间复杂度为 O(lgn).</li>
<li>堆上的一些基本操作：

<blockquote><p>1 MAX-HEAPIFY: 维护最大堆性质的关键。
2 BUILD-MAX-HEAP: 构造最大堆。
3 HEAPSORT: 原址排序 O(nlgn)
4 MAX-HEAP-INSERT HEAP-EXTRACT-MAX ...</p></blockquote></li>
</ul>


<!-- more -->


<p><img src="/pictures/heapSort_2.jpg" title="" ></p>

<p><img src="/pictures/heapSort_3.jpg"></p>

<p><img src="/pictures/heapSort_4.jpg" title="" ></p>

<h3>维护最大堆的性质：</h3>

<p>前面说过， 维护最大堆性质的关键就是要MAX-HEAPIFY:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MAX-HEAPIFY(A, i)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>l = LEFT(i)
</span><span class='line'>r = RIGHT(i)
</span><span class='line'>if l &lt;= A.heap-size and A[l] &gt; A[i]
</span><span class='line'>    largest = l
</span><span class='line'>else largest = i
</span><span class='line'>
</span><span class='line'>if r &lt;= A.heap-size and A[r] &gt; A[largest]
</span><span class='line'>    largest = r
</span><span class='line'>if largest != i
</span><span class='line'>    exchange A[i] with A[largest]
</span><span class='line'>    MAX-HEAPIFY(A, largest)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
树高为h的结点执行此过程的时间复杂度为O(h).</p>

<h3>建堆：</h3>

<p>我们可以用自底向上的方法利用MAX-HEAPIFY过程来将一个大小为A.length的数组A[1..n]转化成一个最大堆。子数组A([n/2]+1..n)中的元素都是树的叶结点。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BUILD-MAX-HEAP(A)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>A.heap-size = A.length
</span><span class='line'>for i = [A.length/2] downto 1
</span><span class='line'>    MAX-HEAPIFY(A, i)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>建堆的时间复杂度为O(h), 即可以在线性时间内把一个无序数组建成一个最大堆。</li>
</ul>


<h2>堆排序算法：</h2>

<h3>堆排序基本性能分析：</h3>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(nlgn)               </td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<ul>
<li>特点：

<blockquote><ol>
<li>与<em>插入排序</em>相同， 但是与<em>归并排序</em>不同的是， 堆排序同样具有空间原址性 ： 任何时候只需要常数个额外的元素空间存储临时的数据。</li>
</ol>
</blockquote></li>
</ul>


<h3>堆排序伪代码实现：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HEAPSORT(A)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>BUILD-MAX-HEAP(A)
</span><span class='line'>for i = A.length downto 2
</span><span class='line'>    exchange A[1] with A[i]
</span><span class='line'>    A.heap-size -= 1
</span><span class='line'>    MAX-HEAPIFY(A, 1)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>堆排序的C语言实现：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Heapsort      </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">swap</span> <span class="p">(</span> <span class="kt">int</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">aux</span> <span class="o">=</span> <span class="n">v</span> <span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="n">v</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span> <span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>  <span class="n">v</span> <span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">aux</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="err">维护最大堆的性质的</span> <span class="n">maxHeapify</span> <span class="err">过程</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">maxHeapify</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">if</span> <span class="p">(</span><span class="n">max</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span> <span class="n">right</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">n</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">array</span><span class="p">[</span><span class="n">max</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">])</span>
</span><span class='line'>     <span class="n">max</span> <span class="o">=</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">max</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">array</span><span class="p">[</span><span class="n">pos</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">max</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span><span class='line'>    <span class="n">maxHeapify</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">max</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="err">建立最大堆的过程</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">buildMaxHeap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">size</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="n">maxHeapify</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">i</span> <span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="err">堆排序的过程</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">heapSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">buildMaxHeap</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">swap</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">i</span> <span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">maxHeapify</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">--</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>堆排序的结果验证：</h3>

<p><img src="/pictures/heapsort-result.png" title="heapsort-result" ></p>

<h3>Python 语言的实现过程：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>heapsort      </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">max_heapify</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">l</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">l</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'><span class="k">if</span> <span class="n">r</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">seq</span><span class="p">[</span><span class="n">largest</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">largest</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
</span><span class='line'>    <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">largest</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">largest</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="n">max_heapify</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">largest</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">build_heap</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="n">max_heapify</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">build_heap</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="n">heap_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">heap_size</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">heap_size</span> <span class="o">=</span> <span class="n">heap_size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">max_heapify</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">heap_size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">seq</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/pictures/heapsort-result2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Algorithms : Sort -- Counting Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-counting-sort/"/>
    <updated>2013-02-13T17:58:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-counting-sort</id>
    <content type="html"><![CDATA[<p>下面要说的是一种<code>线性时间</code>的排序 ———— <code>计数排序</code>（Counting Sort）。</p>

<hr />

<p>计数排序假设n个输入元素中的每一个都是在0到k区间内的一个整数， 其中k为某个整数。</p>

<h2>计数排序的基本思想：</h2>

<p>对于每一个输入元素x， 确定小于x的元素的个数。 利用这一信息， 可以直接把该元素放到它在输出数组的位置上了。当几个元素相同时， 需要略做修改。 因为不能把他们放在数组的同一个位置上。</p>

<h2>计数排序的前提条件：</h2>

<p>假设输入的数组为A[1..n], A.length = n。</p>

<h2>计数排序基本性能分析：</h2>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(k + n)              </td>
<td align="left"> O(k + n)         </td>
<td align="left"> O(n + k)</td>
</tr>
</tbody>
</table>


<ul>
<li>特点：

<blockquote><ol>
<li>我们还需要两个数组，B[1..n]用来存放排序的输出， C[0..k]用来提供临时的存储空间。</li>
<li>常数时间的排序</li>
</ol>
</blockquote></li>
</ul>


<!-- more -->


<h2>计数排序的描述：</h2>

<h2>计数排序伪代码实现：</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>COUNTING-SORT(A, B, k)
</span><span class='line'>1 let C[0..k] be a new array
</span><span class='line'>2 for i = 0 to k
</span><span class='line'>3   C[i] = 0
</span><span class='line'>4 for j = 1 to A.length
</span><span class='line'>5   C[A[j]] = C[A[j]] + 1
</span><span class='line'>6 // C[i] now contains the number of elements equal to i
</span><span class='line'>7 for i = 1 to k
</span><span class='line'>8   C[i] = C[i] + C[i - 1]
</span><span class='line'>9 // C[i] now contains the number of elements less than or equal to i
</span><span class='line'>10for j = A.length downto 1
</span><span class='line'>11  B[C[A[j]]] = A[j]
</span><span class='line'>12  C[A[j]] = C[A[j]] - 1</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/pictures/counting-sort.jpg" title="COUNTING-SORT" ></p>

<h2>计数排序的C语言实现：</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>counting-sort    counting-sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">counting_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">idx_arr</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">count_bucket</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">max</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">count_bucket</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">((</span><span class="n">max</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'><span class="n">max</span> <span class="o">=</span> <span class="n">max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">count_bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">count_bucket</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">idx_arr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">count_bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// for the duplicated value</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">count_bucket</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">*</span><span class="p">(</span><span class="n">arr</span><span class="o">+</span><span class="n">idx_arr</span><span class="p">)</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="n">idx_arr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">count_bucket</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>不小心查到一个很好的网站<a href="http://opendatastructures.org/ods-java/11_2_Counting_Sort_Radix_So.html">counting sort and radix sort</a></li>
<li>发现一个更加cool的东西， 可视化的<a href="http://www.cs.usfca.edu/~galles/visualization/CountingSort.html">counting sort</a></li>
</ul>


<p>本来想写一下Python的版本的， 结果搜索到了<a href="http://rosettacode.org/wiki/Sorting_algorithms/Counting_sort">这个</a>, 想死的心都有了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Algorithms : Sort --- Merge Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-mergesort/"/>
    <updated>2013-02-13T10:34:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-mergesort</id>
    <content type="html"><![CDATA[<p>下面的这个排序算法呢， 是《算法导论》中首先涉及到一种思想而引出来的算法， 所以这里要总结的不止是<em>归并排序</em>这种算法而已， 还要说一下这里的一种思想方法<code>分治法</code>。</p>

<hr />

<h1>分治法：</h1>

<h2>算法的递归性：</h2>

<p>递归性是指为了解决一个给定的问题， 算法一次或多次地调用自身， 以解决紧密相关的若干子问题。</p>

<h2>算法的思想：</h2>

<p>运用递归来解决问题的算法通常典型地遵守<code>分治法</code>的思想： 将原问题分解为几个规模较小的子问题， 然后递归地求解这些子问题， 最后合并这些子问题的解来建立原问题的解。</p>

<h3>分治模式在每一层的递归时都有三个步骤：</h3>

<ul>
<li><h2>分解:</h2>

<p>原问题为若干子问题</p></li>
<li><h2>解决:</h2>

<p>这些子问题， 递归地求解各个子问题。</p></li>
<li><h2>合并:</h2>

<p>这些子问题的解为原问题的解。</p></li>
</ul>


<hr />

<h1>归并排序基本性能分析：</h1>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(n lgn)              </td>
<td align="left"> O(n lgn)         </td>
<td align="left"> O(n)</td>
</tr>
</tbody>
</table>


<ul>
<li>插入排序的特点：

<blockquote><ol>
<li>对于少量的元素， 它是一个非常有效的算法。</li>
<li>该算法原址排序输入的数： 算法在数组A中重排这些数， 在任何时候， 最多只有常数个数字存储在数组外面。</li>
</ol>
</blockquote></li>
</ul>


<!-- more -->


<h1>归并排序的实现过程：</h1>

<ul>
<li>分解： 将待排序的n个元素的序列分解问n/2的两个子序列。</li>
<li>解决： 使用归并排序递归地排序两个子序列。</li>
<li>合并： 合并两个已排序的子序列以产生结果。</li>
</ul>


<h1>归并排序的前提条件：</h1>

<p>排序数组 A[p..r]。该数组分解后产生<code>A[p..q]</code>和<code>A[q+1, r]</code>两个部分，其中p &lt; q &lt; r</p>

<h1>归并排序的特点：</h1>

<ul>
<li>归并排序的<em>关键</em>是“合并”步骤中将两个已经排序的序列合并的操作。也就是<code>MERGE</code>的过程。该过程需要<code>O(n)</code>的时间。其中 <code>n = r - p + 1</code>.</li>
<li>为了避免在每一个基本步骤中都检查堆是否为空， 我们在每个堆的底部放上一个哨兵， 它含有一个特殊值， 用于简化代码。</li>
</ul>


<h1>归并排序的伪代码实现：</h1>

<p><code>MERGE</code>过程的实现：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MERGE(A, p, q, r)
</span><span class='line'>1   n1 = q - p + 1
</span><span class='line'>2   n2 = r - q
</span><span class='line'>3   let L[1..n1 + 1] and R[1..n2 + 1] be new arrays
</span><span class='line'>4   for i = 1 to n1
</span><span class='line'>5       L[i] = A[p + i - 1]
</span><span class='line'>6   for j = 1 to n2
</span><span class='line'>7       R[j] = A[q + j]
</span><span class='line'>8   L[n1 + 1] = nil
</span><span class='line'>9   R[n2 + 1] = nil
</span><span class='line'>10  i = 1
</span><span class='line'>11  j = 1
</span><span class='line'>12  for k = p to r
</span><span class='line'>13      if L[i] &lt; R[j]
</span><span class='line'>14          A[k] = L[i]
</span><span class='line'>15          i = i + 1
</span><span class='line'>16      else A[k] = R[j]
</span><span class='line'>17          j = j + 1</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>归并排序的主程序：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MERGE_SORT(A, p, r)
</span><span class='line'>1   if p &lt; r
</span><span class='line'>2       q = [(p + r) / 2]
</span><span class='line'>3       MERGE_SORT(A, p, q)
</span><span class='line'>4       MERGE_SORT(A, q+1, r)
</span><span class='line'>5       MERGE(A, p, q, r)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>归并排序的C语言实现：</h1>

<p>首先， 实现算法的核心部分：也就是合并数组的过程， 这个过程实现如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>insertion_sort    insertion_sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">method</span><span class="o">:</span> <span class="n">merge_arrays</span>
</span><span class='line'> <span class="o">*</span> <span class="n">dercription</span> <span class="o">:</span> <span class="err">将传入的两个子数组</span> <span class="n">sub_array_a</span> <span class="err">和</span> <span class="n">sub_array_b</span> <span class="err">合并，</span> <span class="err">并将结果存入到结果数组</span> <span class="n">result_array</span> <span class="err">中。</span>
</span><span class='line'> <span class="o">*</span> <span class="err">其中的传入的另外两个参数分别表示两部分数组的大小。</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">merge_arrays</span><span class="p">(</span><span class="kt">int</span> <span class="n">sub_array_a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">sub_array_b</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">result_array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">array_a_size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">array_b_size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">array_a_size</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">array_b_size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">sub_array_a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">sub_array_b</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>        <span class="n">result_array</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub_array_a</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">result_array</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub_array_b</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 两个子数组中谁先被拷贝完就把另外没有拷贝完的数组放到结果数组 result_array 的最后面。</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">array_a_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">copy_subsequence</span><span class="p">(</span><span class="n">sub_array_b</span><span class="p">,</span> <span class="n">result_array</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">array_b_size</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">array_a_size</span> <span class="o">+</span> <span class="n">array_b_size</span><span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nf">copy_subsequence</span><span class="p">(</span><span class="n">sub_array_a</span><span class="p">,</span> <span class="n">result_array</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">array_a_size</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">array_a_size</span> <span class="o">+</span> <span class="n">array_b_size</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>主过程的实现：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MERGE_SORT    MERGE_SORT </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">result_array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">half</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">sub_array_a</span><span class="p">,</span> <span class="o">*</span><span class="n">sub_array_b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">half</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sub_array_a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">half</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sub_array_b</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">half</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">copy_subsequence</span><span class="p">(</span><span class="n">result_array</span><span class="p">,</span> <span class="n">sub_array_a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">half</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">half</span><span class="p">);</span>
</span><span class='line'>    <span class="n">copy_subsequence</span><span class="p">(</span><span class="n">result_array</span><span class="p">,</span> <span class="n">sub_array_b</span><span class="p">,</span> <span class="n">half</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">half</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">merge_sort</span><span class="p">(</span><span class="n">sub_array_a</span><span class="p">,</span> <span class="n">half</span><span class="p">);</span>
</span><span class='line'>    <span class="n">merge_sort</span><span class="p">(</span><span class="n">sub_array_b</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">half</span><span class="p">);</span>
</span><span class='line'>    <span class="n">merge_arrays</span><span class="p">(</span><span class="n">sub_array_a</span><span class="p">,</span> <span class="n">sub_array_b</span><span class="p">,</span> <span class="n">result_array</span><span class="p">,</span> <span class="n">half</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">half</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">sub_array_a</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">sub_array_b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<p>完成后的结果：</p>

<p><img src="/pictures/merge-sort.png" title="merge-sort" ></p>

<hr />

<h1>Python 语言的实现过程：</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MERGE_SORT    Merge </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">len</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="ow">and</span> <span class="n">m</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">len</span><span class="p">(</span><span class="n">right</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">left</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">right</span><span class="p">[</span><span class="n">m</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="n">m</span><span class="p">])</span>
</span><span class='line'>        <span class="n">m</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">+=</span> <span class="n">left</span><span class="p">[</span><span class="n">n</span><span class="p">:]</span>
</span><span class='line'><span class="n">result</span> <span class="o">+=</span> <span class="n">right</span><span class="p">[</span><span class="n">m</span><span class="p">:]</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">seq</span>
</span><span class='line'>
</span><span class='line'><span class="n">middle</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'><span class="n">left</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">middle</span><span class="p">])</span>
</span><span class='line'><span class="n">right</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">middle</span><span class="p">:])</span>
</span><span class='line'><span class="k">return</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="s">&#39;&lt;strong&gt;main&lt;/strong&gt;&#39;</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="n">seq</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>结果截图：</h2>

<p><img src="/pictures/merge-sort-py.png" title="MERGE_SORT" ></p>

<p>好吧， 归并排序就告一段落啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Algorithms : Sort --- Insertion Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-insertion-sort/"/>
    <updated>2013-02-13T09:24:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-insertion-sort</id>
    <content type="html"><![CDATA[<p>今天认真地把《算法导论》上其他的排序算法整理一下， 当然从最开始介绍的 <em>插入排序</em> 开始了。</p>

<hr />

<h3>插入排序基本性能分析：</h3>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(n<sup>2)</sup>                </td>
<td align="left"> O(n<sup>2)</sup>           </td>
<td align="left"> O(n)</td>
</tr>
</tbody>
</table>


<ul>
<li>插入排序的特点：

<blockquote><ol>
<li>对于少量的元素， 它是一个非常有效的算法。</li>
<li>该算法原址排序输入的数： 算法在数组A中重排这些数， 在任何时候， 最多只有常数个数字存储在数组外面。</li>
</ol>
</blockquote></li>
</ul>


<!-- more -->


<h3>插入排序的伪代码实现：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERTION-SORT(A)
</span><span class='line'>1   for j = 2 to A.length
</span><span class='line'>2       key = A[j]
</span><span class='line'>3       // Insert A[j] into the  sorted sequence A[1..j-1]
</span><span class='line'>4       i = j - 1
</span><span class='line'>5       while i > 0 and A[i] > key
</span><span class='line'>6           A[i + 1] = A[i]
</span><span class='line'>7           i = i - 1
</span><span class='line'>8       A[i + 1] = key</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>插入排序的C语言实现：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>insertion_sort    insertion_sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">insertion_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">store_index</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">store_index</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">store_index</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">store_index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">store_key</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">store_index</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sort_index</span> <span class="o">=</span> <span class="n">store_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">sort_index</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">array</span><span class="p">[</span><span class="n">sort_index</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">store_key</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">array</span><span class="p">[</span><span class="n">sort_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">sort_index</span><span class="p">];</span>
</span><span class='line'>        <span class="n">sort_index</span> <span class="o">=</span> <span class="n">sort_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">array</span><span class="p">[</span><span class="n">sort_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">store_key</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/pictures/insertion_sort.png" title="Insertion_sort" ></p>

<hr />

<h3>插入排序的Python实现：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>insertion_sort     insertion_sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)):</span>
</span><span class='line'>    <span class="n">item</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>    <span class="n">hole</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">hole</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">hole</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>        <span class="n">seq</span><span class="p">[</span><span class="n">hole</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">hole</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">hole</span> <span class="o">=</span> <span class="n">hole</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">seq</span><span class="p">[</span><span class="n">hole</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'><span class="k">return</span> <span class="n">seq</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/pictures/insertion_sort2.png" title="insertion_sort2" ></p>

<ul>
<li>后记： 虽然这些东西的实现过程相对简单， 文章也没有什么分量， 但是将这些点滴总结在一起也是一个学习的过程吧， 所以要坚持下去～～</li>
</ul>

]]></content>
  </entry>
  
</feed>
