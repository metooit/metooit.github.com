<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithms, | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/algorithms-/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-12T16:45:51+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn Algorithms : Sort --- Quick Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/11/learn-algorithms-sort-quick-sort/"/>
    <updated>2013-02-11T09:52:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/11/learn-algorithms-sort-quick-sort</id>
    <content type="html"><![CDATA[<p>前面提到过要系统地学习一下算法， 今天就先从一个排序算法开始。<em>快速排序</em></p>

<hr />

<h3>快速排序基本性能分析：</h3>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(n<sup>2)</sup>                </td>
<td align="left"> O(nlgn)          </td>
<td align="left"> O(nlgn)      |</td>
</tr>
</tbody>
</table>


<ul>
<li>特点：

<blockquote><ol>
<li>虽然最坏情况的时间复杂度很差， 但是快速排序通常是实际排序中应用最好的选择， 因为它的平均性能比较好。</li>
<li>它能进行<em>原址排序</em>。</li>
<li>快速排序使用了<em>分治思想</em>。</li>
</ol>
</blockquote></li>
</ul>


<h3>快速排序的描述：</h3>

<ul>
<li><p>快速排序分为三个部分： 分解==>解决==>合并</p></li>
<li><p>问题的前提： 对一个典型的数组 A[p..r] 进行排序。</p></li>
<li><p>排序过程：</p>

<blockquote><ol>
<li>分解： 将数组 A[p..r] 划分为两个数组 A[p..q-1] 和 A[q+1..r]， 使得 A[p..q-1] 中的每一个元素都小于等于 A[q]， 而 A[q+1..r] 中的每一个元
素都大于A[q].</li>
<li>解决： 递归调用快速排序， 对两个子数组进行排序。</li>
<li>合并： 以为子数组都是原址排序的，  所以不需要合并操作： 数组 A[p..r] 已经有序。</li>
</ol>
</blockquote></li>
</ul>


<h3>快速排序伪代码实现：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>QUICKSORT(A, p, r)
</span><span class='line'>1 if p &lt; r
</span><span class='line'>2       q = PARTITION(A, p, r)
</span><span class='line'>3       QUICKSORT(A, p, q - 1)
</span><span class='line'>4       QUICKSORT(A, q + 1, r)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>为了排序一个数组的全部， 初始调用的是 QUICKSORT(A, 1, A.length)。</p></li>
<li><p>算法的关键部分是 <em>PARTITION</em> 过程， 它实现了对子数组 A[p...r] 的原址重排。</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PARTITION(A, p, r)
</span><span class='line'>1  x = A[r]
</span><span class='line'>2  i = p - 1
</span><span class='line'>3  for j = p to r - 1
</span><span class='line'>4       do if A[j] &lt;= x
</span><span class='line'>5             then i = i + 1
</span><span class='line'>6                  exchange A[i] with A[j]
</span><span class='line'>7  exchange A[i + 1] with A[r]
</span><span class='line'>8  return i + 1 ></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><code>PARTITION</code>过程总是选择一个 x=A[r] 作为主元， 并围绕它来进行子数组的划分 A[p..r]， 随着程序的进行， 数组可能被划分为四个区域。</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> 小于x的部分    </th>
<th align="left"> 大于x的部分    </th>
<th align="left"> 无限制      </th>
<th align="left"> 主元x   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <code>X  X  X  X</code>   </td>
<td align="left"> <code>X  X  X  X</code>   </td>
<td align="left"> <code>X  X  X</code>   </td>
<td align="left"> <code>X</code></td>
</tr>
<tr>
<td></td>
<td> <code>p--------i</code>   </td>
<td align="left"> <code>----------</code>   </td>
<td align="left"> <code>j------</code>   </td>
<td align="left"> <code>r</code></td>
</tr>
</tbody>
</table>


<blockquote><p>3 ~ 6 行的循环对人以数组下标 <code>k</code>：会按照 <code>k</code> 与 <code>p</code> <code>i</code> <code>j</code> <code>r</code> 的关系将其放在对应的位置。</p></blockquote>

<ul>
<li><p>快速排序算法的正确性证明参见算法导论（第三版） 96页。</p></li>
<li><p>一个例子：</p></li>
</ul>


<p>对<code>2 8 7 1 3 5 6 4</code> 数组进行排序</p>

<p><img src="/pictures/quick-sort-demo.jpg" title="quick-sort-demo" ></p>

<hr />

<h3>快速排序算法的实现：</h3>

<h4>C 语言实现：</h4>

<ul>
<li><p>第一步： 先要实现算法的核心部分， PARTITION 过程的实现：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>quick-sort  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">partition</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pivot_index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pivot_value</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">pivot_index</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">store_index</span> <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">right</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">pivot_value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">store_index</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">swap</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">store_index</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">swap</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">store_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">store_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>依照算法导论上的伪代码可以写出上述的代码，该过程主要实现了传入的数组对应标号的分治过程。通过分治过程可以把数组<code>array</code>中从<code>left</code>到<code>right</code>的
元素以<code>pivot_index</code>为标号的元素为基准分成两部分。</p>

<ul>
<li><p>第二步： 实现QUICKSORT的主过程：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>quick-sort-2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">quicksort</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pivot_index</span> <span class="o">=</span> <span class="n">right</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">pivot_index</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">pivot_index</span><span class="p">);</span>
</span><span class='line'>  <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">pivot_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">pivot_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>同样是依照算法导论上的实现过程， 我们可以实现快速排序的算法， 其中用到了递归调用， 通过递归调用把数组的每一部分排好序。 注意：由于是原址排
序， 我们就不用再分配新的存储空间，直接在原数组上排序即可。</p>

<ul>
<li>第三步： 细节问题：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>swap  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span><span class='line'>  <span class="n">array</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span><span class='line'>  <span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<p>这个程序就很简单了， 实现了数组元素的互换。</p>

<p><img src="/pictures/quick-sort-test.png" title="quick-sort-test" ></p>

<h4>Python 语言实现：</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>quick-sort-python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">seq</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">pivot</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">left</span> <span class="o">=</span> <span class="n">sort</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">pivot</span><span class="p">])</span>
</span><span class='line'>    <span class="n">right</span> <span class="o">=</span> <span class="n">sort</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">pivot</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">left</span> <span class="o">+</span> <span class="p">[</span><span class="n">pivot</span><span class="p">]</span> <span class="o">+</span> <span class="n">right</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="s">&#39;&lt;strong&gt;main&lt;/strong&gt;&#39;</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="n">seq</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/pictures/quick-sort-python.png" title="quick-sort-python" ></p>

<p>进一步对python版本进行测试：</p>

<p><img src="/pictures/quick-sort-python2.png" title="quick-sort-python2" ></p>

<p>看来还是python 要简洁不少啊！感慨一下～</p>

<h4>Ruby 语言实现：</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>quick-sort-ruby    </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">right</span><span class="o">]</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  for j in left...right do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">x</span> <span class="k">then</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">,</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  array[i + 1], array[right] = array[right], array[i + 1]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  if left &amp;lt; right then&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">q</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">q</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>实现过程和C语言的版本基本没有差别， 这里只是熟悉依稀<code>Ruby</code>的语法罢了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[想对算法做点什么]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/something-i-want-to-write-about-algorithms/"/>
    <updated>2013-02-07T20:23:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/something-i-want-to-write-about-algorithms</id>
    <content type="html"><![CDATA[<p>今天的收获不小，其一就是收获了一种思维模式<code>if...then...</code>，也就是“想要做什么……那么要……”，以前我总是想要做什么、做什么，可是呢，行动力不够就不能真正的去做些什么，所以我觉得是到了改变的时候了。</p>

<hr />

<p>最近在看<a href="http://book.douban.com/subject/1885170/">《算法导论》</a>，看算法的目的是为了进一步学习好编程，虽然有时候看得有点头晕，但是我觉得收获还是很大的。光看书肯定是不行的，所以必须用算法做点什么才能够更有趣吧，所以我就有了这个想法 『用算法做点什么呢』。</p>

<hr />

<p>（未完待续……）</p>
]]></content>
  </entry>
  
</feed>
