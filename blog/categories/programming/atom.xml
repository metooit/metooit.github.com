<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-23T02:22:27+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C 语言不完全笔记]]></title>
    <link href="http://metooit.github.com/blog/2013/02/22/c-none-complete-note/"/>
    <updated>2013-02-22T20:26:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/22/c-none-complete-note</id>
    <content type="html"><![CDATA[<p>今天， 又拾起了《C 程序设计语言》， 想再看一遍， 希望能够真正拾起一些东西吧……</p>

<h2>类型、运算符与表达式</h2>

<ol>
<li>变量名限制： 对内部名而言， 至少前31个字符是有效的； 对外部名而言， ANSI仅保证前六个字符的唯一性， 并且不区分大小写</li>
<li><p>ANSI 表格：</p>

<pre><code>   2 3 4 5 6 7       30 40 50 60 70 80 90 100 110 120
 -------------      ---------------------------------
0:   0 @ P ` p     0:    (  2  &lt;  F  P  Z  d   n   x
1: ! 1 A Q a q     1:    )  3  =  G  Q  [  e   o   y
2: " 2 B R b r     2:    *  4  &gt;  H  R  \  f   p   z
3: # 3 C S c s     3: !  +  5  ?  I  S  ]  g   q   {
4: $ 4 D T d t     4: "  ,  6  @  J  T  ^  h   r   |
5: % 5 E U e u     5: #  -  7  A  K  U  _  i   s   }
6: &amp; 6 F V f v     6: $  .  8  B  L  V  `  j   t   ~
7: ´ 7 G W g w     7: %  /  9  C  M  W  a  k   u  DEL
8: ( 8 H X h x     8: &amp;  0  :  D  N  X  b  l   v
9: ) 9 I Y i y     9: ´  1  ;  E  O  Y  c  m   w
A: * : J Z j z
B: + ; K [ k {
C: , &lt; L \ l |
D: - = M ] m }
E: . &gt; N ^ n ~
F: / ? O _ o DEL
</code></pre></li>
<li>我们通常用'\0'代替0以强调某些表达式的字符属性</li>
<li>字符串内部使用'\0'结尾， 因此存储字符串的物理单元数量比括在双引号内的字符数多一个</li>
<li>'x' 和 "x" 是不同的， 前者是一个整数， 其值是字母x在机器字符集中的对应数值； 后者是一个包含一个字符以及'\a'的字符数组</li>
<li>'&amp;&amp;6' 具有左结合性</li>
<li>为了保证正确性， 在char类型的变量中存储非字符数据，最好要声明是signed 还是unsigned</li>
<li>在if, while, for等测试语句中， 真就意味着非0</li>
<li>赋值是要进行类型转换， 右边的值需要转换成左边的类型</li>
<li>自增运算符与自减运算符只能作用于变量</li>
<li>在不需要任何具体值且仅需要递增变量的情况下， 前缀方式和后缀方式效果相同</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[想对算法做点什么]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/something-i-want-to-write-about-algorithms/"/>
    <updated>2013-02-07T20:23:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/something-i-want-to-write-about-algorithms</id>
    <content type="html"><![CDATA[<p>今天的收获不小，其一就是收获了一种思维模式<code>if...then...</code>，也就是“想要做什么……那么要……”，以前我总是想要做什么、做什么，可是呢，行动力不够就不能真正的去做些什么，所以我觉得是到了改变的时候了。</p>

<hr />

<p>最近在看<a href="http://book.douban.com/subject/1885170/">《算法导论》</a>，看算法的目的是为了进一步学习好编程，虽然有时候看得有点头晕，但是我觉得收获还是很大的。光看书肯定是不行的，所以必须用算法做点什么才能够更有趣吧，所以我就有了这个想法 『用算法做点什么呢』。</p>

<hr />

<p>（未完待续……）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[继续学习Ruby]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/continue-learning-ruby/"/>
    <updated>2013-02-07T14:39:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/continue-learning-ruby</id>
    <content type="html"><![CDATA[<p>今天翻看了一下阳志平的网络日志，偶然发现了他很推崇<code>Ruby</code>，然后我就发现了这篇文章<a href="http://www.yangzhiping.com/tech/ruby-worldmap-1.html">Ruby 闲话一二</a>, 看后了解了一下<code>Ruby</code>的处境和氛围， 就像《黑客与画家》里面说的， 编程语言很重要！ <code>Ruby</code> 是优美的，简单的，符合K.I.S.S原则，那我就觉得<code>Ruby</code>是一门好的语言。所以我想要了解它。</p>

<hr />

<p>如何学习一门编程语言呢？ 这个问题或许是很多新手程序员的心声，当然我也有过曾经的疑问，找到一种快速学会编程语言的方法可能是很多人想要的，<a href="http://www.yangzhiping.com/tech/learn-program-psychology.html">在学习区刻意练习</a>或许不是最聪明的方法，但是可能是真正想要学会编程的人应该有的一种执着和毅力，阳老师的这篇文章使我受益匪浅，如果想要去做好一件事情，那就用百分之百的热情和努力去做吧！相信自己能够成功的！我觉得这篇文章好还有另外的原因，就是觉得这篇文章说的话击中了我的弱点：</p>

<blockquote><ul>
<li>提升行动力 : 把自己的思维模式改成 if ... then ...</li>
<li>编程是个人行为 ： 不要忙于社交， 聊天， 发帖， 下载盗版学习资源， 争议语言好坏等等
真的， 如果我想学会<code>Ruby</code>，那就从一点以滴开始努力吧！</li>
</ul>
</blockquote>

<hr />

<p>昨天我写了关于<code>Ruby</code>的<a href="http://metooit.github.com/blog/2013/02/06/get-to-know-ruby/">Get to know Ruby</a>,今天才发现了阳老师的这篇文章：<a href="http://www.yangzhiping.com/tech/why-ruby-text.html">为什么是<code>Ruby</code></a>, 发现比我写的要简练有力的多，同时覆盖的面也要广的多。</p>

<hr />

<p>好了，关于文章的收获就是这些。</p>
]]></content>
  </entry>
  
</feed>
