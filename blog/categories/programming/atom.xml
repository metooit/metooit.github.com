<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-04-04T11:52:37+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Things I Know About Bitcoin]]></title>
    <link href="http://metooit.github.com/blog/2013/04/04/things-i-know-about-bitcoin/"/>
    <updated>2013-04-04T00:07:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/04/04/things-i-know-about-bitcoin</id>
    <content type="html"><![CDATA[<p>首先感谢@hayeah让我知道了这么好玩的东东，我今天晚上才第一次听说了<code>Bitcoin</code>,我承认第一眼看到满篇的英文文档时我的表情是复杂的，因为我看到里面的配图
还有一些小程序时我以为这是一篇讲解复杂数据结构的文档，我胆战心惊的看完概述之后才晓得这篇论文大概讲的是某种在线支付系统，心下少安～～～ 然后果断
<code>Google</code>之……</p>

<p>我<code>Google</code>到的一些链接我觉得比较好的放在下面的<strong>LINKS</strong>里面。下面我看到的和理解的一些东西来尝试着写一写，都算不得是一家之言吧<sup>-<sup>(笑)</sup></sup></p>

<p>说实话，我是在看了三个小时的各种介绍之后才敢再次翻开这篇文档的(PS:所谓这篇文档在36Kr的文章里有写到)<a href="http://lnch.is/bitcoin-manifesto">链接</a>,发现
顿时明朗了许多，但是还是有些地方难以理解的。</p>

<p>好，下面就是我要说的话了：</p>

<hr />

<h3>各种知识积累：</h3>

<h4>What is bitcoin?</h4>

<ul>
<li>一言以毕之，The so called <code>Bitcoin</code> is 一种以文件形式存在的虚拟货币。它的核心思想的提出者是<code>Satoshi Nakamoto</code>（松本聪，日本人？，Ruby的创始人也
是个可爱的日本大叔）</li>
</ul>


<h4>Why is it special?</h4>

<ul>
<li>这就要引用一下36Kr所引述的<code>LAUNCH</code>团队的调查分析结果了：

<blockquote><ul>
<li>技术靠谱</li>
<li>无法停止，除非终端用户起诉</li>
<li>有史以来最危险的开源项目 (看到这里，我默默地去Github给这个牛X的项目加了一个Star，虽然我还不了解它)</li>
<li>可能是有互联网依赖最危险的开源项目</li>
<li>是科技自由主义者的一次政治声明（我想到了Hacker精神，崇敬中……）</li>
<li>将改变世界（乔帮主用过没有？），除非政府通过眼里的惩罚措施制止（政府绝对干的出来……Nothing about policy）</li>
</ul>
</blockquote></li>
</ul>


<h4>Why is it so good?</h4>

<ul>
<li>Bitcoin的好处：

<blockquote><ul>
<li>不会冻结</li>
<li>无法跟踪，不可跟踪的密码学网络支付系统</li>
<li>不用纳税</li>
<li>交易成本极低</li>
<li>只能被它的真实拥有者使用，且只能使用一次</li>
</ul>
</blockquote></li>
</ul>


<h4>The difference with the traditional way?</h4>

<ul>
<li>与传统货币的差异：

<blockquote><ul>
<li>去中心化，这个我理解起来就是省掉了像银行这样的金融系统</li>
<li>存量有限</li>
<li>开源</li>
<li>价值取决于用户数量</li>
</ul>
</blockquote></li>
</ul>


<h4>Some numbers about it.</h4>

<ul>
<li>一些数字：（截至2013.02）

<blockquote><ul>
<li>最长数据链： 大于220,000</li>
<li>有保障的交易量： 25 terahashes/s</li>
<li>比特币总额： $300 million</li>
<li>唉～ 写上面这些东西做什么</li>
<li>比特币地址： 由33位长的字母和数字组成，最终达到2<sup>160</sup> 个</li>
<li>最小单位： 0.00000001BTC</li>
<li>最终总量： 2100万个</li>
</ul>
</blockquote></li>
</ul>


<p>好了，关于一些基本的知识就先介绍到这里，下面就我（我就是我，颜色不一样的烟火……诶呀，哥哥的歌）理解的一些机制从技术方面做
一些介绍:</p>

<ul>
<li><p>首先，从设计的思想上来说，我觉得这种思想很具有前瞻性，它将分布式计算能力利用起来，算不算是分布是计算机思想的一种实现呢？</p></li>
<li><p>其次，从解决的核心问题上来讲，<code>Bitcoin</code>使用某种方法解决了<code>Double-spending</code>的问题，就我目前知道的而言，它使用数据块链和<code>Hash</code>技术，具体一点讲就是
用户可以把货币转给其他人，方法是在上一次交易和下一位所有者的公开密匙上进行hash，把相关信息添加到货币尾部，接收方通过验证签名来验证所有权。</p></li>
<li><p>然后，还有两个重要的机制，一个是<code>工作量证明机制</code>：要求计算机计算能力为某个有限值的情况下，需要一定的运算时间才能解决，所以攻击者无法重写交易历史。
另外一个是<code>Merkle Tree机制</code>，本地客户端主动剔除自己永远用不到的部分，这个机制的重要性要稍逊啊～</p></li>
<li><p>最后，简单的工作过程：每一个比特结点会收集所有尚未确认的交易，并将其归集到一个数据块中，这个数据块会和前面的数据块集成在一起，矿工结点会增加一个
随机调整数，并计算前一个数据块的SHA-256 hash值。</p></li>
</ul>


<hr />

<h3>Bitcoin.pdf 读书笔记</h3>

<h4>1.概述：</h4>

<ul>
<li><p>简要介绍： 一个纯P2P的无需第三方金融机构的电子现金支付系统。</p></li>
<li><p>解决方案： 1.数字签名 2.最重要的是，通过P2P网络防止一笔钱被花两次</p></li>
<li><p>机制说明： 网络给交易打上时间戳，通过将交易记录hash进不断增长的基于hash的工作量机制中，最长的链条成为当前交易的证据，也是它出自最长的CPU工作的证明。</p></li>
<li><p>广播机制： 消息广播出最多工作量的记录，然后结点可以离开或者重新加入。</p></li>
</ul>


<h4>2.介绍：</h4>

<ul>
<li><p>体系现状： 现有金融体系弊端是仍在遭受那种继承来的基于信任的模型，绝对的不可追踪的交易对于这个体系来讲是不可能的，调解纠纷代价较高，骗局很多哦</p></li>
<li><p>分析需求： 一个基于加密的证据的而非信任的，允许自由交易的，通过现有计算能力不可能追踪的，常规中介服务易于实现的交易系统</p></li>
<li><p>论文目标： 介绍一个P2P的按时间顺序生成可计算证据的分布式交易系统，他的保障来自于结点的统计CPU计算量大于任何的攻击者合作组</p></li>
</ul>


<h4>3.1 交易：</h4>

<ul>
<li><p>我们定义一个电子钱币为一串数字签名</p></li>
<li><p>每个拥有者进行钱币转移时要将上一次交易的记录和下一位拥有者的公匙数字签名进行hash并加入到数字签名中，收款人通过辨认数字签名来确认所有关系(这里有点不理解)</p></li>
<li><p>问题来了：收款人不能确认这笔前的拥有者是否是在重复花这笔钱？ 所以这里收款人应该确定对方没有用这笔钱签署任何交易协议，我们的目标是：最近的上一笔交易
是要考虑的，为了知道这笔钱之前所有的交易（像银行一样），我们需要交易是公开声明的，那么之前所有的参与者需要在他们接受到的交易上留下记录，收款人在确认收款
时需要证据，而大多数结点第一次接收到证据时同意它。</p></li>
</ul>


<p><img src="/pictures/transactions.png"></p>

<h4>3.2 时间戳服务：</h4>

<p>首先要说的一点就是我不知道这个名词在这里是不是要翻译成时间戳，我理解的是和Linux里面概念相似的时间戳，像这个 Thu Apr  4 07:58:20 CST 2013</p>

<ul>
<li><p>时间戳服务的工作机制就是： 接收进来一个打上时间戳的数据块的hash值并且广播出去这个hash，就像新闻印刷业。每一个时间戳hash包含了以前的时间戳，形成一个
链状结构，后来的时间戳会不断加强这个结构。</p></li>
<li><p>工作量证明机制： 这个机制涉及到在hash时要扫描一个值，这些hash值要以一些0位开头，需要的平均工作量可以通过在这些0位上执行单一的hash来验证（这里还是有点不懂）
对于我们的时间戳网络我们实现工作量机制的方法是通过增加一个满足hash值0位需求的随机数。</p></li>
<li><p>工作量机制的优点： 它解决了大多数问题决策中决定由谁来表示的问题。相比与不可靠的One-IP-one-vote,工作量机制的核心是基于One-CPU-one-vote，最长的工作链
代表了大多数决策，这需要大量CPU投入工作量来证明，慢速攻击的概率随着块的增加是呈指数状减少的。</p></li>
<li><p>工作量机制的保证： 为了弥补随着时间推移带来的增长的硬件速率和计算不同结点的利益分配，工作量证明的难度取决于每小时平均产生的块的数量的平均目标，难度随生成速度增加。</p></li>
</ul>


<p><img src="/pictures/timestamp.png"></p>

<h4>3.3 网络：</h4>

<p>激动人心的时刻到了！～～～</p>

<p>网络运行的步骤如下：</p>

<blockquote><ul>
<li>新的交易被广播到所有结点</li>
<li>每个结点收集新的交易信息到一个块里</li>
<li>每个结点为它的块生成工作量证明而努力工作（这里不是很懂）</li>
<li>当一个结点找到工作量的证明后它向所有结点广播这个块</li>
<li>结点接收一个块需要满足：所有的交易是有效的并且没有被消费掉</li>
<li>结点表达它接收一个块的方式是：通过hash之前公认的块的hash值来创建链中的下一个块</li>
</ul>
</blockquote>

<p>结点认为最长的链就是正确的链，并且继续扩展它，如果两个结点同时播出下一个数据块的不同版本怎么办呢？一个结点接收其中一个并基于它工作，但是该节点保留另一个的分支。</p>

<p>新的交易广播不必告知每一个结点，块广播也容忍信息的丢失，如果一个结点没有收到一个块，当它发现下一个块时它会发现自己错过了块并且请求它。</p>

<p><img src="/pictures/proof.png"></p>

<h4>3.4 奖励机制：</h4>

<ul>
<li><p>就像矿工挖矿一样，这里付出的是CPU工作量和电力。</p></li>
<li><p>也可以从中获取交易费用（类似于中间人收取的费用？），因为交易费也在交易中包含，所以不会引起通货膨胀。（这里不是很懂，经济学的东西深奥呢？）</p></li>
<li><p>最有意思的一点是它可以帮助结点保持诚实，还是蛮有道理的，如果你有那么多的CPU工作量，何必去窃取呢，直接自己产不久可以了……</p></li>
</ul>


<h4>3.5 磁盘空间回收：</h4>

<ul>
<li><p>一旦一个钱币最新的交易被掩盖在了足够的块中，已经消费掉的交易可以被丢弃以节省磁盘空间</p></li>
<li><p>为了保证不破坏交hash值，块的根的hash被hash进Merkle Tree中，内部的hash值不必被存储</p></li>
</ul>


<p><img src="/pictures/diskspace.png"></p>

<h4>3.6 被简化的支付验证：</h4>

<ul>
<li><p>用户需要持有一份最长工作链中块头的拷贝，这可以通过询问网络节点直到确认它拥有最长的链，并且取得Merkle分支中的链接交易的时间戳，它不能自己检查交易，
而是链接到链中的一个地方（哪个地方？），他可以看到其他的结点接受了它并且增加块。</p></li>
<li><p>诚实节点掌控全局的时候这个确认是可靠的，一个防止攻击这掌控网络的策略是当检测到一个网络结点的无效块时，提示用户端软件下载完整的块并且警告交易确认不一致</p></li>
</ul>


<p><img src="/pictures/payment.png"></p>

<h4>3.7 组合和拆分值：</h4>

<ul>
<li><p>为了保证值可以组合和拆分，交易包含多个输入输出，一个或者多个输入的情况下，输出只有两个： 会组合多个输入给收款人，并且接收返回值（如果有的话）。</p></li>
<li><p>一个递归的基于交易的扇出系统应该不是问题，因为不需要提供一个完整的单个的交易历史</p></li>
</ul>


<p><img src="/pictures/values.png"></p>

<h4>3.8 隐私问题：</h4>

<ul>
<li><p>机制中有一点是要公开声明所有的交易，但是即使实在这样的条件下还是能够保证隐私的： 通过保证公匙的匿名姓。结点可以看到有人正在发送给别人钱币，但是看
不到任何联系起个人信息的交易。</p></li>
<li><p>作为额外的保障，可以使用一个新的密匙来对应每个交易</p></li>
</ul>


<p><img src="/pictures/privacy.png"></p>

<h4>3.9 计算：</h4>

<ul>
<li><p>即使攻击结点的计算能力大于诚实结点，也不会造成系统随意地被更改，就像通过空气获取价值或者是创作不属于攻击者的钱币。诚实结点不会接受无法验证的交易，
攻击者仅仅是可以通过更改自己的交易回收额来赚钱。</p></li>
<li><p>Binomial Random Walk：成功的交易使诚实结点block长度加一，而失败的交易会使攻击者的block链长度减一。</p></li>
<li><p>赌徒破产问题？有意思了</p></li>
<li><p>看了一遍，木有看懂…… 好吧，认认真真看一遍……</p></li>
</ul>


<p> .
 .
 .
 .
 .
 .</p>

<ul>
<li><strong>认真</strong>看过之后：
……</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>calculation   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">math</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">double</span> <span class="n">AttackerSuccessProbability</span><span class="p">(</span><span class="kt">double</span> <span class="n">q</span><span class="p">,</span> <span class="kt">int</span> <span class="n">z</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">array</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="n">q</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;q = %lf</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">AttackerSuccessProbability</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="o">*</span><span class="n">array</span><span class="p">);</span>
</span><span class='line'>    <span class="o">++*</span><span class="n">array</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;z = %d </span><span class="se">\t</span><span class="s"> sum = %.7lf</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">double</span> <span class="n">AttackerSuccessProbability</span><span class="p">(</span><span class="kt">double</span> <span class="n">q</span><span class="p">,</span> <span class="kt">int</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">double</span> <span class="n">p</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">lambda</span> <span class="o">=</span> <span class="n">z</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span> <span class="o">/</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">z</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">poisson</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">lambda</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">poisson</span> <span class="o">*=</span> <span class="n">lambda</span> <span class="o">/</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">-=</span> <span class="n">poisson</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">pow</span><span class="p">(</span><span class="n">q</span> <span class="o">/</span> <span class="n">p</span><span class="p">,</span> <span class="n">z</span> <span class="o">-</span> <span class="n">k</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/pictures/bitcoin.png"></p>

<p><strong>LINKS</strong></p>

<p><a href="http://bitcoin.org/en/">Bitcoin</a></p>

<p><a href="https://en.bitcoin.it/wiki/FAQ">Bitcoin Wiki FAQ</a></p>

<p><a href="https://www.weusecoins.com/">What Is Bitcoin</a></p>

<p><a href="http://zh.wikipedia.org/wiki/Bitcoin">Wikipedia</a></p>

<p><a href="http://www.36kr.com/p/24387.html">36Kr的文章</a></p>

<p><a href="http://blog.codingnow.com/2011/05/bitcoin.html">云风的Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning jQuery In Process]]></title>
    <link href="http://metooit.github.com/blog/2013/03/20/learning-jquery-in-process/"/>
    <updated>2013-03-20T20:59:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/20/learning-jquery-in-process</id>
    <content type="html"><![CDATA[<p>这几天都在看关于JavaScript和jQuery的东西，我觉得还挺好玩的，jQuery的感觉就像是第一次知道coffeeScript时的感觉一样，让人感到世界又美好了一点，总之，
我看完<code>CodeSchool</code>的『Try jQuery』之后，很是喜欢jQuery,于是我又借了一本《Head First jQuery》，目前也在看这本书呢！(*<sup>__<sup>*)</sup></sup> 嘻嘻…… 喜欢Head First
的书。</p>

<hr />

<p>那么我就在这里记录一下比较重要的东东吧 ：-）</p>

<h3>jQuery基础：</h3>

<ul>
<li><code>JavaScript</code>的解释器并不改变原始的<code>HTML</code>和<code>CSS</code>文件，只是在浏览器的缓存中更改<code>DOM</code>的表示。</li>
<li><code>$</code>符号代表的是<code>jQuery</code>方法，即表示<code>$</code>---><code>jQuery()</code>。</li>
<li><code>jQuery</code>选择元素的方式和<code>CSS</code>是一样的：
  <strong> <code>tag selector</code> ---> 名称
  </strong> <code>class selector</code> ---> <code>.</code>加上名称
  ** <code>ID selector</code> ---> <code>#</code>加上名称</li>
<li><p>如何写一个script:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  $(document).ready(function() {
</span><span class='line'>      $("div").click(function() {
</span><span class='line'>          alert("You clicked me.");
</span><span class='line'>      });
</span><span class='line'>  }); 
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;/script></span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p><code>$(this)</code>指向当前元素</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For You And For Me]]></title>
    <link href="http://metooit.github.com/blog/2013/03/15/for-you-and-for-me/"/>
    <updated>2013-03-15T16:49:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/15/for-you-and-for-me</id>
    <content type="html"><![CDATA[<p>学习编程对于我来说就是一种生活，但是我所期待的另一种生活是能够用编程来改变人们的生活！</p>

<p>这算是我的一个宏愿吧，但是我还是一直为此而努力着。因为不是有一句话叫做不想当将军的士兵不是好士兵吗？我想对于一个程序员来讲，不想去实现这样一个愿望便枉自为程序员吧！</p>

<p>看到一个关于编程的公益广告<a href="http://video.sina.com.cn/v/b/98166519-2036021381.html">视频地址</a>,里面有好多我所崇拜的大牛，看完视频感觉到他们是计算机世界里的英雄，也是我们生活中的英雄，因为他们正是那些用编程来改变人们生活的人！</p>

<p>虽然是一个小菜程序员，但是我还是因为自己当时选择编程这条道路感到庆幸，因为是编程让我真正爱上了生活！以前的我以为自己喜欢的是电子行业，因为我看到电子产品以惊人的速度进入并改变着人们的生活。所以大学我选择了电子信息工程专业，但是我的兴趣却逐渐转向了编程领域，最初的C语言实现一个小程序实现输出“Hello World！”的时候，我觉得兴奋异常，怎么说呢？这样一种兴奋来自一种成就感或者说来自一种探索欲，我开始觉得自己能够操纵机器去做一些事情，那个说的酸溜溜一点就是一点小幸福吧！o(∩∩)o...哈哈，总之我就是这样不可救药的喜欢上了编程！</p>

<p>为什么我对编程这么着迷吗？我想对你说：学习编程吧，哪怕你只是想多了解一点计算机，然后你就会懂我了，这是一个可以作为爱好的事情！</p>

<p>这篇文章，For you and for me， enjoy Programming, enjoy Life!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 语言不完全笔记]]></title>
    <link href="http://metooit.github.com/blog/2013/02/22/c-none-complete-note/"/>
    <updated>2013-02-22T20:26:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/22/c-none-complete-note</id>
    <content type="html"><![CDATA[<p>今天， 又拾起了《C 程序设计语言》， 想再看一遍， 希望能够真正拾起一些东西吧……</p>

<h2>类型、运算符与表达式</h2>

<ol>
<li>变量名限制： 对内部名而言， 至少前31个字符是有效的； 对外部名而言， ANSI仅保证前六个字符的唯一性， 并且不区分大小写</li>
<li><p>ANSI 表格：</p>

<pre><code>   2 3 4 5 6 7       30 40 50 60 70 80 90 100 110 120
 -------------      ---------------------------------
0:   0 @ P ` p     0:    (  2  &lt;  F  P  Z  d   n   x
1: ! 1 A Q a q     1:    )  3  =  G  Q  [  e   o   y
2: " 2 B R b r     2:    *  4  &gt;  H  R  \  f   p   z
3: # 3 C S c s     3: !  +  5  ?  I  S  ]  g   q   {
4: $ 4 D T d t     4: "  ,  6  @  J  T  ^  h   r   |
5: % 5 E U e u     5: #  -  7  A  K  U  _  i   s   }
6: &amp; 6 F V f v     6: $  .  8  B  L  V  `  j   t   ~
7: ´ 7 G W g w     7: %  /  9  C  M  W  a  k   u  DEL
8: ( 8 H X h x     8: &amp;  0  :  D  N  X  b  l   v
9: ) 9 I Y i y     9: ´  1  ;  E  O  Y  c  m   w
A: * : J Z j z
B: + ; K [ k {
C: , &lt; L \ l |
D: - = M ] m }
E: . &gt; N ^ n ~
F: / ? O _ o DEL
</code></pre></li>
<li>我们通常用'\0'代替0以强调某些表达式的字符属性</li>
<li>字符串内部使用'\0'结尾， 因此存储字符串的物理单元数量比括在双引号内的字符数多一个</li>
<li>'x' 和 "x" 是不同的， 前者是一个整数， 其值是字母x在机器字符集中的对应数值； 后者是一个包含一个字符以及'\a'的字符数组</li>
<li>'&amp;&amp;6' 具有左结合性</li>
<li>为了保证正确性， 在char类型的变量中存储非字符数据，最好要声明是signed 还是unsigned</li>
<li>在if, while, for等测试语句中， 真就意味着非0</li>
<li>赋值是要进行类型转换， 右边的值需要转换成左边的类型</li>
<li>自增运算符与自减运算符只能作用于变量</li>
<li>在不需要任何具体值且仅需要递增变量的情况下， 前缀方式和后缀方式效果相同</li>
<li><code>,</code>运算符是C语言中优先级最低的。某些情况下的逗号并不是逗号运算符， 比如分隔函数参数的逗号， 分隔声明中变量的逗号等， 这些逗号并不保证各个表达式从左到右求值。</li>
<li>函数的返回的表达式将被返回为函数的返回值类型</li>
<li>C语言中一个函数中不允许定义其他函数， 因此函数本身是外部的</li>
<li>如果要在外部变量定义之前使用该变量， 或者外部变量的定义与变量的使用不在同一个文件中，那么必须在相应的变量声明中强制地使用<code>extern</code></li>
<li><code>register</code>声明告诉编译器它所声明的变量在程序中使用的频率较高， 放到寄存器中使程序更小， 执行速度更快</li>
<li>初始化数组时：如果初始化表达式的个数比数组元素少， 则数组后面的元素被初始化为0； 如果初始化表达式的个数比数组元素多， 是错误的</li>
<li>指针只能指向某种特定类型的对象， odi类型的指针可以存放指向任意类型的指针， 但是它不能间接引用其自身</li>
<li>对于数组a[]来讲， &amp;a[i] 与 a + i等价</li>
<li>数组名和指针之间的一个重要区别就是：指针是变量，因此赋值和递增都是合法的； 但是数组名不是变量</li>
<li>在函数定义中的形式参数char s[] 与 char *s 是等价的</li>
<li>C语言保证， 0不是有效的数据地址， 因此返回值0可以用来表示发生了异常事件。*</li>
<li>指针和整数之间不能相互转换， 但是0是唯一的例外</li>
<li>进栈和出栈的标准用法：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>stack      </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p</span><span class="o">++</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span> <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="err">将</span><span class="n">val</span><span class="err">压入栈</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">val</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;--</span><span class="n">p</span><span class="p">;</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="err">将栈顶元素弹出到</span><span class="n">val</span><span class="err">中</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>当数组的行数无关紧要时： f(int daytab[][13]) {...} 与 f(int (<em>daytab)[13]) {...} 是等价的， 注意第二种方式的int (</em>daytab)[13]中的括号不能去掉。</li>
<li>指针数组的一个重要优点在于数组每一行的长度可以不同</li>
<li>调用主函数main时， 他有两个参数， 第一个参数习惯上成为(argc, 用于参数计算)的值表示运行程序时命令行中参数的数量; 第二个参数(成为argv, 用于参数向量)是一个指向字符串数组的指针，其中每一个字符串对应一个参数， 我们常用多级指针来处理这些字符串。</li>
<li>C语言中，函数本身不是变量，但是可以定义指向函数的指针</li>
<li>结构体<code>struct</code>后面的变量名是可选的，成为结构标记</li>
<li>如果结构声明后面不带变量表， 则不需要为它分配存储空间， 它仅仅描述了一个结构模板或者轮廓</li>
<li>不要认为结构的长度等于各个成员的长度和， 因为不同的对象有不同的对齐要求， 结构中可能会出现空穴。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[想对算法做点什么]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/something-i-want-to-write-about-algorithms/"/>
    <updated>2013-02-07T20:23:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/something-i-want-to-write-about-algorithms</id>
    <content type="html"><![CDATA[<p>今天的收获不小，其一就是收获了一种思维模式<code>if...then...</code>，也就是“想要做什么……那么要……”，以前我总是想要做什么、做什么，可是呢，行动力不够就不能真正的去做些什么，所以我觉得是到了改变的时候了。</p>

<hr />

<p>最近在看<a href="http://book.douban.com/subject/1885170/">《算法导论》</a>，看算法的目的是为了进一步学习好编程，虽然有时候看得有点头晕，但是我觉得收获还是很大的。光看书肯定是不行的，所以必须用算法做点什么才能够更有趣吧，所以我就有了这个想法 『用算法做点什么呢』。</p>

<hr />

<p>（未完待续……）</p>
]]></content>
  </entry>
  
</feed>
