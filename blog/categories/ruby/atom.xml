<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-23T02:22:27+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Style]]></title>
    <link href="http://metooit.github.com/blog/2013/02/16/ruby-style-gide/"/>
    <updated>2013-02-16T09:34:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/16/ruby-style-gide</id>
    <content type="html"><![CDATA[<blockquote><p>Style is what separates the good from the great.</p></blockquote>

<p><a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a></p>

<p><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md">简体版本</a></p>

<h2>读书笔记：</h2>

<h3>源代码排版：</h3>

<ul>
<li>使用空格来围绕操作符： 唯一的例外是使用指数操作的时候</li>
<li>把<code>when</code>和<code>case</code>缩排在同一层</li>
<li>在<code>def</code>之间使用空行， 并且把方法分成合乎逻辑的段落</li>
<li>当一个方法呼叫叫的参数过长时， 排列它们</li>
<li>长的常量数字加底线来提高可读性</li>
<li>不要在注解区块和<code>def</code>之间放一个空行</li>
<li>每一行限制在80个字符</li>
<li>避免尾随的空白</li>
</ul>


<h3>语法：</h3>

<ul>
<li><code>def</code>接收参数时使用括号， 没有参数时省略括号</li>
<li>永远不要使用<code>for</code>， 除非你知道为什么， 一般用迭代器来取代</li>
<li>永远不要在多行的<code>if</code>...<code>unless</code>中使用<code>then</code></li>
<li>偏爱三元操作符 <code>?:</code> 胜于 <code>if/then/else/end</code> 结构</li>
<li>使用表达式来给三元操作符分支， 这意味着三元操作符不能嵌套</li>
<li>布尔表达式使用 &amp;&amp;/||, 控制流程使用 and/or</li>
<li>偏爱 <code>if/unless</code> 修饰符当你有单行的主体， 或者使用控制流程的 <code>and/or</code></li>
<li>否定条件偏爱<code>unless</code> 胜于 <code>if</code></li>
<li>永远不要使用 <code>unless</code> 搭配 <code>else</code></li>
<li>不要使用圆括号围绕 <code>if/unless/while</code> 的条件表达式， 除非这个表达式包含了一个赋值</li>
<li>当你有单行的主体时， 偏爱<code>while/until</code> 修饰符</li>
<li>忽略围绕方法参数的括号</li>
<li>单行区块偏爱<code>{...}</code> 胜于 <code>do...end</code> 多行区块避免使用 <code>{...}</code></li>
<li>避免在不需要控制流程的场合使用 <code>return</code></li>
<li>避免在不需要的情况使用 <code>self</code></li>
<li>避免使用带有局域变量的 <code>shadowing</code> 方法</li>
<li>赋予默认值给方法的参数时需要使用空格来围绕 <code>=</code></li>
<li>使用 <code>||=</code> 来初始化变量， 不要使用该符号初始化布尔变量</li>
<li>避免在方法名和做括号之间放一个空格</li>
<li>如果方法的第一个参数由左括号开始， 那么方法参数应该使用括号</li>
<li>偏好使用<code>lambda</code>新语法</li>
<li>未使用的区块参数用 <code>_</code></li>
</ul>


<h3>命名：</h3>

<ul>
<li>方法与变量使用蛇底式小写</li>
<li>类别与模组使用陀峰方式</li>
<li>其他常数使用蛇底式大写</li>
<li>返回布尔值的方法用 <code>?</code> 结尾</li>
<li>若潜在危险的方法有安全的版本存在时， 应该使用 <code>!</code> 结尾</li>
</ul>


<hr />

<p>（未完待续……）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Ruby the hard way]]></title>
    <link href="http://metooit.github.com/blog/2013/02/15/learn-ruby-the-hard-way/"/>
    <updated>2013-02-15T19:23:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/15/learn-ruby-the-hard-way</id>
    <content type="html"><![CDATA[<p><a href="http://ruby.learncodethehardway.org/book/">Learn Ruby The Hard Way</a></p>

<p>所谓笨方法学习就是通过不断地实践练习去学习一门新的知识， 但是这应该不算是笨的方法吧。 编程不是有一个一万小时定律吗？ 这应该是学习的正确方法吧。</p>
]]></content>
  </entry>
  
</feed>
