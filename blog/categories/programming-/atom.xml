<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming, | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/programming-/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-14T14:17:33+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Ruby in Process 1]]></title>
    <link href="http://metooit.github.com/blog/2013/02/08/learning-ruby-in-process-1/"/>
    <updated>2013-02-08T19:26:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/08/learning-ruby-in-process-1</id>
    <content type="html"><![CDATA[<ul>
<li>对于一个字符串中每个字元的遍历：（迭代器 -> <code>iterator</code>）
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>iterator1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">each_byte</span><span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="nb">printf</span> <span class="s2">&quot;&amp;lt;%c&gt;&quot;</span><span class="p">,</span> <span class="n">c</span> <span class="p">};</span> <span class="nb">print</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
each_byte是字符串中处理每个字元的迭代器。</li>
</ul>


<p>如果是用循环语句来实现的话：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>iterator2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">004</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="k">while</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">s</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="nb">printf</span> <span class="s2">&quot;&amp;lt;%c&gt;&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">end</span><span class="p">;</span> <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><code>retry</code>意思是重新开始循环， 而<code>redo</code>意思是当前循环重新做一次迭代。
举例来说：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>retry  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">i</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">retry</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
再试试换成<code>redo</code>呢？</p></li>
</ul>


<!-- more -->


<ul>
<li><p><code>Ruby</code>的方法可以接受参数：与传统的语言一样， 用括号扩起来， 而且在不引起歧义的情况下，可以省略括号。 有一个特别的参数叫做<code>self</code>。</p></li>
<li><p>新建立一个类别的对象 ClassName.new</p></li>
<li><p><code>Ruby</code>中有继承， 可以重写父类的方法， 如果要增强父类中的方法， 而不是完全替换， 可以用<code>super</code>关键字。</p></li>
<li><p><code>Access Control</code>： 1. 在对象外部定义的函数不能直接由对象来调用 2. 在对象内部定义的函数不能直接被外部调用， 可以将函数变成私有的<code>private: 函数名</code>。</p></li>
<li><p>关于module：</p>

<blockquote><p>module 没有实例
module 没有子类别
module 由module...end定义</p></blockquote></li>
<li><p><code>::</code>算子会向<code>module</code>查询常数的值， 如果不用这个就要 <code>include</code>。</p></li>
<li><p><code>procedure object</code>程序对象：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>procedure  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;irb(main):033:0&gt; quux = Proc.new {</span>
</span><span class='line'><span class="sr">irb(main):034:1&lt;em&gt; puts &quot;QUUXQUUX&quot;</span>
</span><span class='line'><span class="sr">irb(main):035:1&gt; }</span>
</span><span class='line'><span class="sr">=&gt; #&amp;lt;Proc:0x9e1eee4@(irb):33&gt;</span>
</span><span class='line'><span class="sr">irb(main):036:0&gt; quux.call</span>
</span><span class='line'><span class="sr">QUUXQUUX</span>
</span><span class='line'><span class="sr">=&gt; nil</span>
</span><span class='line'><span class="sr">irb(main):037:0&gt; def run(p)</span>
</span><span class='line'><span class="sr">irb(main):038:1&gt; puts &quot;About to call a procedure&quot;</span>
</span><span class='line'><span class="sr">irb(main):039:1&gt; p.call</span>
</span><span class='line'><span class="sr">irb(main):040:1&gt; puts &quot;Procedure finished&quot;</span>
</span><span class='line'><span class="sr">irb(main):041:1&gt; end</span>
</span><span class='line'><span class="sr">=&gt; nil</span>
</span><span class='line'><span class="sr">irb(main):042:0&gt; run quux</span>
</span><span class='line'><span class="sr">About to call a procedure</span>
</span><span class='line'><span class="sr">QUUXQUUX</span>
</span><span class='line'><span class="sr">Procedure finished</span>
</span><span class='line'><span class="sr">=&gt; nil&lt;/em</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>利用<code>trap</code>方法， 我们可以针对任何系统信号指派不同的应对措施。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>trap  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">047</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">inthandler</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Press ^C was paused&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&amp;lt;Proc:0x9c08614@(irb):47&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">04</span><span class="mi">8</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">trap</span> <span class="s2">&quot;SIGINT&quot;</span><span class="p">,</span> <span class="n">inthandler</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&amp;lt;Proc:0x9c86e24@(irb):44&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">04</span><span class="mi">9</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">Press</span> <span class="o">^</span><span class="n">C</span> <span class="n">was</span> <span class="n">paused</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>变量：通过识别标识符就能够区别变量。</li>
</ul>


<table>
<thead>
<tr>
<th>符号   </th>
<th align="right">   意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>$      </td>
<td align="right">   全局变量（globla variable）</td>
</tr>
<tr>
<td>@      </td>
<td align="right">   实例变量（instance ariable）</td>
</tr>
<tr>
<td>[az]或_</td>
<td align="right">   局部变量（local variable）</td>
</tr>
<tr>
<td>[AZ]   </td>
<td align="right">   常量</td>
</tr>
</tbody>
</table>


<p>self 和 nil不能被初始化， 赋值。</p>

<p><strong> 慎重使用全局变量， 可能引发不好纠正的错误
</strong> 全局变量的优点是能够追踪。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>global_var  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">trace_var</span> <span class="p">:</span><span class="vg">$x</span><span class="p">,</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;$x is now </span><span class="si">#{</span><span class="vg">$x</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="vg">$x</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="vg">$x</span> <span class="n">is</span> <span class="n">now</span> <span class="mi">5</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<a href="http://guides.ruby.tw/ruby/globalvars.html">一个特别参数的表格</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>instance_var  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">007</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">InstTest</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">00</span><span class="mi">8</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">set_foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">00</span><span class="mi">9</span><span class="p">:</span><span class="mi">2</span><span class="o">&gt;</span> <span class="vi">@foo</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">010</span><span class="p">:</span><span class="mi">2</span><span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">011</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">set_bar</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">012</span><span class="p">:</span><span class="mi">2</span><span class="o">&gt;</span> <span class="vi">@bar</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">013</span><span class="p">:</span><span class="mi">2</span><span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">014</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">015</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="no">InstTest</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&amp;lt;InstTest:0x9220ad4&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">016</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span><span class="o">.</span><span class="n">set_foo</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">017</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&amp;lt;InstTest:0x9220ad4 @foo=2&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">01</span><span class="mi">8</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span><span class="o">.</span><span class="n">set_bar</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">01</span><span class="mi">9</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&amp;lt;InstTest:0x9220ad4 @foo=2, @bar=4&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p>注意： 局部变量在初始化之前并没有nil值。
局部变量作用域： Proc.new {...} lambda{...}  loop{...} def...end class...end  module...end</p></blockquote>

<ul>
<li><p>defined? 是用来检查识别符是否有定义的算子。</p></li>
<li><p><code>rescue</code>救援， <code>fail</code>唤起一个意外， <code>ensure</code>确认。</p></li>
<li><p><code>inspect</code>方法， 传回以合理方式描述对象的字串。to_s 转换为字符串。</p></li>
<li><p><code>initialize</code>方法， 可以接受参数。（有一种弹性初始化的方式，就是传递参数同时赋初值）。</p></li>
<li><p>statement delimiter ： -> <code>;</code>, 跨行用<code>\</code>.</p></li>
<li><p>comment: <code>#</code> Or <code>=begin...=end</code></p></li>
</ul>


<blockquote><p>参考文献：
<a href="http://guides.ruby.tw/ruby/index.html">Ruby使用手册</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get to know Ruby]]></title>
    <link href="http://metooit.github.com/blog/2013/02/06/get-to-know-ruby/"/>
    <updated>2013-02-06T20:58:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/06/get-to-know-ruby</id>
    <content type="html"><![CDATA[<p>这几天通过对<code>octopress</code>的了解，越来越觉得<code>Ruby</code>是一门很优美的语言，我虽然还没有下定决心学习它，但是要初步了解一下还是可以的，多看看总是不会有坏处的 ：-）</p>

<hr />

<h3>什么是Ruby?</h3>

<p><a href="http://www.ruby-lang.org/zh_cn/">Ruby</a>的官方网站上是这样说的：Ruby是一种跨平台、面向对象、动态的编程语言。简单性， 一致性是<code>Ruby</code>推崇的思想。</p>

<h4>Ruby思想：</h4>

<p><code>Ruby</code>的发明者是一个日本人，<a href="http://www.rubyist.net/~matz/">松本行弘</a>.我看了他说过的话，<code>Ruby</code>的思想就是：自然，表面简单内部却很复杂。</p>

<h4>Ruby成长：</h4>

<p>看过<code>Ruby</code>的成长记，我不得不说这是开源运动的一个胜利。开源才能更自由，有这么多优秀的软件架构用<code>Ruby</code>写成，<code>Ruby</code>也会越来越受欢迎吧！</p>

<h4>面向对象：</h4>

<p><code>Ruby</code>从最开始就是要：比<code>Perl</code>更加强大，比<code>Python</code>更加面向对象。<code>Ruby</code>中所有东西都是对象。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby-example1     </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">print</span> <span class="s2">&quot;I love Ruby!&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
据说这一句就说明了<code>Ruby</code>是一种纯『面向对象』的语言，这么说是要纯到什么程度呢？<code>Ruby</code>让所有类型都可以赋予方法和产生实例变量。具体的以后再好好体会吧！</p>

<h4>灵活性：</h4>

<p><code>Ruby</code>允许用户改变其核心，它试着不去妨碍程序员。比如，你可以定义如下函数以使用<code>plus</code>而不是<code>+</code>：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby-example2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Numberic</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def plus(x)</span>
</span><span class='line'><span class="sr">    self.+(x)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Blocks 一个独特而强大的特性：</h4>

<p>程序员可以给任意一个函数添加一个密封（closure）来表述这个函数如何工作。密封也被叫做代码块。这个特性也是<code>Lisp</code>文化融入<code>Ruby</code>的一个体现：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby-example1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">search_engine</span> <span class="o">=&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;%w[Google Yahoo MSN].map do |engine|</span>
</span><span class='line'><span class="sr">    &quot;http:/</span><span class="o">/</span><span class="n">www</span><span class="o">.</span><span class="s2">&quot; + engine.downcase + &quot;</span><span class="o">.</span><span class="n">com</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
代码块在do...end 结构中。map函数将代码块应用一个词的列表中。</p>

<h4><code>Ruby</code>“有意”只提供单继承：</h4>

<p>这里这个“有意”是个什么意思呢？<code>Ruby</code>拥有模块，模块把许多方法放在一个类别里。类可以混合一个模块，得到这个模块提供的所有方法。比如所有提供<code>each</code>方法的类可以混合<code>Enumerable</code>模块，来调用这个模块所提供的所有方法。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby-example1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyArray</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include Enumerable</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>Ruby</code>的面貌：</h4>

<p><code>Ruby</code>很少使用符号并且倾向于使用英文单词作为关键字。
* var 可以是局部变量
* @var 是一个实例变量
* $var 是一个全局变量
这些信号让程序员看清楚每一个变量的角色，增强了程序的可读性。</p>

<h4>更多特性：</h4>

<ul>
<li>异常处理</li>
<li>有一个真正表示清扫的垃圾收集器对象</li>
<li>C 扩展方便</li>
<li>动态调用库</li>
<li>可提供不依赖操作系统的线程</li>
<li>轻便
......</li>
</ul>


<hr />

<p>阅读完<code>Ruby</code>的一些特性之后，我又看了一下<a href="http://www.ruby-lang.org/zh_cn/documentation/quickstart/">20分钟体验<code>Ruby</code></a>,感觉很简单，所以也没有必要多说了。</p>

<hr />

<p>在<a href="http://ruby-china.org">Ruby-China</a>逛了一圈之后，作为一个新手，我决定看一看它的<a href="http://ruby-china.org/wiki">wiki</a>看一看有什么好的学习资源，简单翻看之后还真是收获不小。</p>

<ul>
<li>首先，<a href="http://saito.im/slide/ruby-new.html"><code>Ruby</code>语言新手教程</a>让我大体上体验了一下<code>Ruby</code>，这种幻灯片式的tutorial让人感觉简单明了，虽然不是很深入，我还时觉得这个是一个很好的学习资源。</li>
<li>然后，看到了<a href="http://ruby-china.org/wiki/start_leaning_rails">几篇文章</a>，关于Ruby， Ruby on rails, 先学习哪个呢？具体到每个人可能并不一样吧，所以我就先学习一下<code>Ruby</code>的语法，在看的过程中对比<code>Python</code>，然后立刻就学着用rails 建立一些小项目吧。</li>
<li>最后，算是一点意外的惊喜吧，我前两天写<code>Git</code>的两篇文章，其实这里就有一些关于<code>Git</code>学习的资料。</li>
</ul>

]]></content>
  </entry>
  
</feed>
