<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-23T02:22:27+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C 语言不完全笔记]]></title>
    <link href="http://metooit.github.com/blog/2013/02/22/c-none-complete-note/"/>
    <updated>2013-02-22T20:26:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/22/c-none-complete-note</id>
    <content type="html"><![CDATA[<p>今天， 又拾起了《C 程序设计语言》， 想再看一遍， 希望能够真正拾起一些东西吧……</p>

<h2>类型、运算符与表达式</h2>

<ol>
<li>变量名限制： 对内部名而言， 至少前31个字符是有效的； 对外部名而言， ANSI仅保证前六个字符的唯一性， 并且不区分大小写</li>
<li><p>ANSI 表格：</p>

<pre><code>   2 3 4 5 6 7       30 40 50 60 70 80 90 100 110 120
 -------------      ---------------------------------
0:   0 @ P ` p     0:    (  2  &lt;  F  P  Z  d   n   x
1: ! 1 A Q a q     1:    )  3  =  G  Q  [  e   o   y
2: " 2 B R b r     2:    *  4  &gt;  H  R  \  f   p   z
3: # 3 C S c s     3: !  +  5  ?  I  S  ]  g   q   {
4: $ 4 D T d t     4: "  ,  6  @  J  T  ^  h   r   |
5: % 5 E U e u     5: #  -  7  A  K  U  _  i   s   }
6: &amp; 6 F V f v     6: $  .  8  B  L  V  `  j   t   ~
7: ´ 7 G W g w     7: %  /  9  C  M  W  a  k   u  DEL
8: ( 8 H X h x     8: &amp;  0  :  D  N  X  b  l   v
9: ) 9 I Y i y     9: ´  1  ;  E  O  Y  c  m   w
A: * : J Z j z
B: + ; K [ k {
C: , &lt; L \ l |
D: - = M ] m }
E: . &gt; N ^ n ~
F: / ? O _ o DEL
</code></pre></li>
<li>我们通常用'\0'代替0以强调某些表达式的字符属性</li>
<li>字符串内部使用'\0'结尾， 因此存储字符串的物理单元数量比括在双引号内的字符数多一个</li>
<li>'x' 和 "x" 是不同的， 前者是一个整数， 其值是字母x在机器字符集中的对应数值； 后者是一个包含一个字符以及'\a'的字符数组</li>
<li>'&amp;&amp;6' 具有左结合性</li>
<li>为了保证正确性， 在char类型的变量中存储非字符数据，最好要声明是signed 还是unsigned</li>
<li>在if, while, for等测试语句中， 真就意味着非0</li>
<li>赋值是要进行类型转换， 右边的值需要转换成左边的类型</li>
<li>自增运算符与自减运算符只能作用于变量</li>
<li>在不需要任何具体值且仅需要递增变量的情况下， 前缀方式和后缀方式效果相同</li>
</ol>

]]></content>
  </entry>
  
</feed>
