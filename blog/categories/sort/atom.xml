<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sort | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/sort/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-13T22:32:53+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn Algorithms : Sort -- Counting Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-counting-sort/"/>
    <updated>2013-02-13T17:58:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-counting-sort</id>
    <content type="html"><![CDATA[<p>下面要说的是一种<code>线性时间</code>的排序 ———— <code>计数排序</code>（Counting Sort）。</p>

<hr />

<p>计数排序假设n个输入元素中的每一个都是在0到k区间内的一个整数， 其中k为某个整数。</p>

<h2>计数排序的基本思想：</h2>

<p>对于每一个输入元素x， 确定小于x的元素的个数。 利用这一信息， 可以直接把该元素放到它在输出数组的位置上了。当几个元素相同时， 需要略做修改。 因为不能把他们放在数组的同一个位置上。</p>

<h2>计数排序的前提条件：</h2>

<p>假设输入的数组为A[1..n], A.length = n。</p>

<h2>计数排序基本性能分析：</h2>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(k + n)              </td>
<td align="left"> O(k + n)         </td>
<td align="left"> O(n + k)</td>
</tr>
</tbody>
</table>


<ul>
<li>特点：

<blockquote><ol>
<li>我们还需要两个数组，B[1..n]用来存放排序的输出， C[0..k]用来提供临时的存储空间。</li>
<li>常数时间的排序</li>
</ol>
</blockquote></li>
</ul>


<!-- more -->


<h2>计数排序的描述：</h2>

<h2>计数排序伪代码实现：</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>COUNTING-SORT(A, B, k)
</span><span class='line'>1 let C[0..k] be a new array
</span><span class='line'>2 for i = 0 to k
</span><span class='line'>3   C[i] = 0
</span><span class='line'>4 for j = 1 to A.length
</span><span class='line'>5   C[A[j]] = C[A[j]] + 1
</span><span class='line'>6 // C[i] now contains the number of elements equal to i
</span><span class='line'>7 for i = 1 to k
</span><span class='line'>8   C[i] = C[i] + C[i - 1]
</span><span class='line'>9 // C[i] now contains the number of elements less than or equal to i
</span><span class='line'>10for j = A.length downto 1
</span><span class='line'>11  B[C[A[j]]] = A[j]
</span><span class='line'>12  C[A[j]] = C[A[j]] - 1</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/pictures/counting-sort.jpg" title="COUNTING-SORT" ></p>

<h2>计数排序的C语言实现：</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>counting-sort    counting-sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">counting_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">idx_arr</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">count_bucket</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">max</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">count_bucket</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">((</span><span class="n">max</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'><span class="n">max</span> <span class="o">=</span> <span class="n">max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">count_bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">count_bucket</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">idx_arr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">count_bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// for the duplicated value</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">count_bucket</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">*</span><span class="p">(</span><span class="n">arr</span><span class="o">+</span><span class="n">idx_arr</span><span class="p">)</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="n">idx_arr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">count_bucket</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>不小心查到一个很好的网站<a href="http://opendatastructures.org/ods-java/11_2_Counting_Sort_Radix_So.html">counting sort and radix sort</a></li>
<li>发现一个更加cool的东西， 可视化的<a href="http://www.cs.usfca.edu/~galles/visualization/CountingSort.html">counting sort</a></li>
</ul>


<p>本来想写一下Python的版本的， 结果搜索到了<a href="http://rosettacode.org/wiki/Sorting_algorithms/Counting_sort">这个</a>, 想死的心都有了。</p>
]]></content>
  </entry>
  
</feed>
