<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithms | K.I.S.S]]></title>
  <link href="http://metooit.github.com/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-17T21:02:33+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binary Search Tree]]></title>
    <link href="http://metooit.github.com/blog/2013/02/16/binary-search-tree/"/>
    <updated>2013-02-16T13:04:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/16/binary-search-tree</id>
    <content type="html"><![CDATA[<h2>Introduction:</h2>

<p>二叉搜索树上的基本操作所花费的时间与树的高度成正比。对于一个有<code>n</code>个结点的二叉搜索树来说， 基本操作的最坏运行时间为<code>O(lgn)</code>。</p>

<h2>1. 二叉搜索树的概念：</h2>

<ul>
<li>一棵二叉搜索树是以一棵二叉树来组织的</li>
<li>树可以用一个链表的数据结构来表示， 其中的每一个结点就是一个对象</li>
<li>除了<code>key</code> 和 <code>卫星数据</code> 外， 每一个结点还包含了属性 <code>left</code> <code>right</code> 和 <code>p</code>。 如果相应的属性不存在， 那么它的值就是<code>NIL</code>。 根结点是树中唯一一个父指针为NIL的结点。</li>
<li>对于任何节点x， 它的左子树中的关键字最大不能大于x.key, 右子树中的关键字最小不能小于x.key</li>
</ul>


<h2>2. 二叉搜索树上的操作：</h2>

<h3>2.1 如何按序打印二叉树：</h3>

<ul>
<li><p>二叉搜索树的性质决定了我们可以通过简单的<code>递归算法</code>来按顺序打印出二叉树的所有关键字。这种方法称作是<code>中序遍历</code>（inorder tree walk）</p>

<p>** 中序遍历： 输出的子树根的关键字位于其左子树关键字和右子树关键字之间</p>

<p>** 先序遍历： 输出的根的关键字在其左右子树关键字之前</p>

<p>** 后序遍历： 输出的根的关键字在其左右子树关键字之后</p></li>
<li><p>伪代码实现：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INORDER-TREE-WALK(x)
</span><span class='line'>  if x != NIL&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  INORDER-TREE-WALK(x.left)
</span><span class='line'>  print x.key
</span><span class='line'>  INORDER-TREE-WALK(x.right)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>遍历打印一个有n个结点的二叉搜索树需要耗费O(n)的时间 （证明详见《算法导论（第三版）》）</p></li>
</ul>


<h3>2.2 查询二叉搜索树：</h3>

<h4>2.2.1查找：</h4>

<ul>
<li>差找是指在一棵二叉搜索数中找到一个具有给定关键字的结点</li>
<li>输入是一个指向树根的指针和一个关键字<code>k</code>, 如果结点存在则返回指向该关键字的指针，否则返回<code>NIL</code></li>
<li>伪代码实现：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TREE-SEARCH(x, k)
</span><span class='line'>  if x == NIL or k == x.key
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  return x
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  if x &lt; x.key
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  return TREE-SEARCH(x.left, k)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  else
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  return TREE-SEARCH(x.right, k)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p><img src="/pictures/BSTree.jpg" title="BSTree" ></p>

<ul>
<li><p>TREE-SEARCH 的运行时间为O(h) (h 是指树的高度)</p></li>
<li><p>我们也可以不用递归， 用<code>while</code>循环来展开
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ITERATIVE-TREE_SEARCH(x, k)
</span><span class='line'>  whiel x != NIL and k != x.key&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  if x &lt; x.key
</span><span class='line'>      x = x.left
</span><span class='line'>  else x = x.right
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  return x</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<h4>2.2.2 最大和最小关键字元素：</h4>

<ul>
<li><p>查找最小关键字的元素：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TREE-MINIMUM(x)
</span><span class='line'>  while x.left != NIL&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  x = x.left
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  return x</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>查找最大关键字的元素：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TREE-MAXIMUM(x)
</span><span class='line'>  while x.right != NIL&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  x = x.right
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  return x</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>这两个过程的运行时间为O(h)</p></li>
</ul>


<h4>2.2.3 后继和前驱：</h4>

<ul>
<li><p>伪代码的实现过程：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TREE-SUCCESSOR(x)
</span><span class='line'>  if x.right != NIL&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  return TREE-MINIMUM(x.right)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  y = x.p
</span><span class='line'>  while y != NIL and x == y.right
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  x = y
</span><span class='line'>  y = y.p
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>两种情况：
<strong> 如果结点x的右子树为非空，那么x的后继恰好是x右子树中的最左的结点
</strong> 如果结点x的右子树非空并且有一个后继y， 那么y就是x的有左孩子的底层祖先， 并且它也是x的一个祖先， 为了找到y， 只需要简单地从x开始沿树而上直到遇到一个其双亲有左孩子的结点</p></li>
<li><p>执行此过程的操作时间同样是O(h)</p></li>
</ul>


<h3>2.3 查找和删除：</h3>

<h4>2.3.1 插入：</h4>

<ul>
<li><p>前提条件： 将一个新值v插入到一棵二叉搜索树T中， 以z作为输入， 其中z.key=v, z.left=NIL, z.right=NIL</p></li>
<li><p>伪代码实现：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TREE-INSERT(T, z)
</span><span class='line'>  y = NIL
</span><span class='line'>  x = T.root
</span><span class='line'>  while x != NIL&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  y = x
</span><span class='line'>  if z.key &lt; x.key
</span><span class='line'>      x = x.left
</span><span class='line'>  else
</span><span class='line'>      x = x.right
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  z.p = y
</span><span class='line'>  if y == NIL
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  T.root = z // tree T was empty
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  elseif z.key &lt; y.key
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  y.left = z
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  else
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  y.right = z
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>TREE-INSERT 的运行时间为O(h)</p></li>
</ul>


<h4>2.3.2 删除：</h4>

<ul>
<li>一棵二叉搜索树中删除一个结点z的整个策略分为三种基本情况：</li>
<li>如果z没有孩子结点， 那么只是简单地将它删除， 并且修改它的父结点， 用NIL作为孩子来替换z
<img src="/pictures/delete1.png" title="delete1" ></li>
<li>如果z只有一个孩子， 那么将这个孩子提升到树中z的位置上， 并且修改z的父结点， 用z的孩子来替换z
<img src="/pictures/delete2.png" title="delete2" ></li>
<li><p>如果z有两个孩子， 那么找到z的后继y（一定在z的右子树中）， 并且让y占据树中z的位置。 z的原来右子树部分成为y的新右子树， 并且z的左子树成为y的新的左子树。
<img src="/pictures/delete3.png" title="delete3" ></p></li>
<li><p>从一棵二叉搜索树中删除一个结点，如果取指向T和z的指针作为输入：</p></li>
<li>如果z没有左孩子， 那么用其右孩子来替换z， 这个右孩子可以是NIL也可以不是. 当z的右孩子是NIL时， 这种情况就是z只有一个孩子结点的情况。 当z的右孩子非NIL时， 这种情况就是z仅有一个孩子结点的情形， 该孩子是其右孩子。</li>
<li>如果z仅有一个孩子并且为其左孩子时， 那么用左孩子来替换z</li>
<li>否则， z两个孩子都有。 我们要查找z的后继y，这个后继位于z的右子树中并且没有左孩子。 现在需要将y移出原来的位置进行拼接， 并替换树中的z</li>
<li><p>如果y是z的右孩子， 那么用y替换z， 并仅留下y的右孩子</p></li>
<li><p>为了在二叉树中移动子树， 定义TRANSPLANT， 用另一棵子树替换一棵子树并且成为其双亲的孩子结点。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TRANSPLANT(T, u, v)
</span><span class='line'>  if u.p == NIL&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  T.root = v
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  elseif u == u.p.left
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  u.p.left = v
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  else u.p.right = v
</span><span class='line'>  if v != NIL
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  v.p = u.p
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>从二叉树中删除结点的过程伪代码：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TREE-DELETE(T, z)
</span><span class='line'>  if z.left = NIL&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  TRANSPLANT(T, z, z.right)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  elseif z.right == NIL
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  TRANSPLANT(T, z, z.left)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>  else y = TREE-MINIMUM(z.right)
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  if y.p != z
</span><span class='line'>      TRANSPLANT(T, y, y.right)
</span><span class='line'>      y.right = z.right
</span><span class='line'>      y.right.p = y
</span><span class='line'>  TRANSPLANT(T, z, y)
</span><span class='line'>  y.left = z.left
</span><span class='line'>  y.left.p = y
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>从一棵高度为h的二叉树上删除一个结点的时间代价为O(h)</p></li>
</ul>


<h3>源代码实现：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/&lt;em> Initialize the binary tree, generate the root node &lt;/em>/
</span><span class='line'>Tree_Node* TreeInit(Tree_Node_Key key)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>Tree_Node* Start = NULL;
</span><span class='line'>if ((Start = malloc(sizeof(Tree_Node))) == NULL)
</span><span class='line'>{
</span><span class='line'>    fprintf(stderr, "Failed to initialize memory\n");
</span><span class='line'>    exit(EXIT_FAILURE);
</span><span class='line'>}
</span><span class='line'>Start-&gt;key = key;
</span><span class='line'>Start-&gt;left = NULL;
</span><span class='line'>Start-&gt;right = NULL;
</span><span class='line'>return Start;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Insert the given key to the Tree &lt;/em>/
</span><span class='line'>Tree_Node&lt;em> TreeInsert(Tree_Node&lt;/em> Start, Tree_Node_Key key)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if(Start == NULL) {
</span><span class='line'>    return (TreeInit(key));
</span><span class='line'>}
</span><span class='line'>else {
</span><span class='line'>    if(Start-&gt;key &gt; key)
</span><span class='line'>        Start-&gt;left = TreeInsert(Start-&gt;left, key);
</span><span class='line'>    else
</span><span class='line'>        Start-&gt;right = TreeInsert(Start-&gt;right, key);
</span><span class='line'>    return Start;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Find the node that contains the min key &lt;/em>/
</span><span class='line'>Tree_Node&lt;em> TreeMinimum(Tree_Node&lt;/em> Start)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>while(Start-&gt;left != NULL)
</span><span class='line'>{
</span><span class='line'>    Start = Start-&gt;left;
</span><span class='line'>}
</span><span class='line'>return Start;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Find the node that contains the max key &lt;/em>/
</span><span class='line'>Tree_Node&lt;em> TreeMaximum(Tree_Node&lt;/em> Start)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>while(Start-&gt;right != NULL)
</span><span class='line'>{
</span><span class='line'>    Start = Start-&gt;right;
</span><span class='line'>}
</span><span class='line'>return Start;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Print the tree in order &lt;/em>/
</span><span class='line'>void InorderPrintTree(Tree_Node* Start)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if(Start == NULL)
</span><span class='line'>    return;
</span><span class='line'>InorderPrintTree(Start-&gt;left);
</span><span class='line'>printf("%d ", Start-&gt;key);
</span><span class='line'>InorderPrintTree(Start-&gt;right);
</span><span class='line'>return;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Print the tree in postorder &lt;/em>/
</span><span class='line'>void PostorderPrintTree(Tree_Node* Start)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if(Start == NULL)
</span><span class='line'>    return;
</span><span class='line'>PostorderPrintTree(Start-&gt;left);
</span><span class='line'>PostorderPrintTree(Start-&gt;right);
</span><span class='line'>printf("%d ", Start-&gt;key);
</span><span class='line'>return;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Using recurse to free the tree &lt;/em>/
</span><span class='line'>void TreeFreeRecurse(Tree_Node* Start)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if(Start == NULL)
</span><span class='line'>    return;
</span><span class='line'>else {
</span><span class='line'>    TreeFreeRecurse(Start-&gt;left);
</span><span class='line'>    TreeFreeRecurse(Start-&gt;right);
</span><span class='line'>}
</span><span class='line'>free(Start-&gt;left);
</span><span class='line'>free(Start-&gt;right);
</span><span class='line'>return;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Free the space of the tree &lt;/em>/
</span><span class='line'>void TreeFree(Tree_Node* Start)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>TreeFreeRecurse(Start);
</span><span class='line'>free(Start);
</span><span class='line'>return;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Return the tree size &lt;/em>/
</span><span class='line'>int TreeSize(Tree_Node* Start)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if (Start == NULL) return 0;
</span><span class='line'>else return 1 + TreeSize(Start-&gt;left) + TreeSize(Start-&gt;right);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em> Return the max depth of the tree &lt;/em>/
</span><span class='line'>int TreeMaxDepth(Tree_Node* Start)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if(Start == NULL)
</span><span class='line'>    return 0;
</span><span class='line'>
</span><span class='line'>if(TreeMaxDepth(Start-&gt;left) &gt;= TreeMaxDepth(Start-&gt;right))
</span><span class='line'>    return TreeMaxDepth(Start-&gt;left) + 1;
</span><span class='line'>else
</span><span class='line'>    return TreeMaxDepth(Start-&gt;right) + 1;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<h3>References:</h3>

<ul>
<li><a href="http://www.qmatica.com/DataStructures/Trees/AVL/AVLTree.html">动画演示</a></li>
<li><a href="http://cslibrary.stanford.edu/110/BinaryTrees.html">Binary Trees</a></li>
<li><a href="http://lonelycoder.org/?p=142">A simple introduction to Binary Search Tree</a></li>
<li><a href="http://www.wutianqi.com/?p=2430">《算法导论》学习笔记</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
