<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[K.I.S.S]]></title>
  <link href="http://metooit.github.com/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-04-04T00:43:37+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Things I Know About Bitcoin]]></title>
    <link href="http://metooit.github.com/blog/2013/04/04/things-i-know-about-bitcoin/"/>
    <updated>2013-04-04T00:07:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/04/04/things-i-know-about-bitcoin</id>
    <content type="html"><![CDATA[<p>首先感谢@hayeah让我知道了这么好玩的东东，我今天晚上才第一次听说了<code>Bitcoin</code>,我承认第一眼看到满篇的英文文档时我的表情是复杂的，因为我看到里面的配图
还有一些小程序时我以为这是一篇讲解复杂数据结构的文档，我胆战心惊的看完概述之后才晓得这篇论文大概讲的是某种在线支付系统，心下少安～～～ 然后果断
<code>Google</code>之……</p>

<p>我<code>Google</code>到的一些链接我觉得比较好的放在下面的<strong>LINKS</strong>里面。下面我看到的和理解的一些东西来尝试着写一写，都算不得是一家之言吧<sup>-<sup>(笑)</sup></sup></p>

<p>说实话，我是在看了三个小时的各种介绍之后才敢再次翻开这篇文档的(PS:所谓这篇文档在36Kr的文章里有写到)<a href="http://lnch.is/bitcoin-manifesto">链接</a>,发现
顿时明朗了许多，但是还是有些地方难以理解的。</p>

<p>好，下面就是我要说的话了：</p>

<hr />

<h3>各种知识积累：</h3>

<h4>What is bitcoin?</h4>

<p>一言以毕之，The so called <code>Bitcoin</code> is 一种以文件形式存在的虚拟货币。</p>

<h4>Why is it special?</h4>

<p>这就要引用一下36Kr所引述的<code>LAUNCH</code>团队的调查分析结果了：</p>

<pre><code>&gt; * 技术靠谱
&gt; * 无法停止，除非终端用户起诉
&gt; * 有史以来最危险的开源项目 (看到这里，我默默地去Github给这个牛X的项目加了一个Star，虽然我还不了解它)
&gt; * 可能是有互联网依赖最危险的开源项目
&gt; * 是科技自由主义者的一次政治声明（我想到了Hacker精神，崇敬中……）
&gt; * 将改变世界（乔帮主用过没有？），除非政府通过眼里的惩罚措施制止（政府绝对干的出来……Nothing about policy）
</code></pre>

<h4>Why is it so good?</h4>

<pre><code>&gt; * 不会冻结
&gt; * 无法跟踪，不可跟踪的密码学网络支付系统
&gt; * 不用纳税
&gt; * 交易成本极低
&gt; * 只能被它的真实拥有者使用，且只能使用一次
</code></pre>

<p><strong>LINKS</strong>
<a href="http://bitcoin.org/en/">Bitcoin</a>
<a href="https://en.bitcoin.it/wiki/FAQ">Bitcoin Wiki FAQ</a>
<a href="https://www.weusecoins.com/">What Is Bitcoin</a>
<a href="http://zh.wikipedia.org/wiki/Bitcoin">Wikipedia</a>
<a href="http://www.36kr.com/p/24387.html">36Kr的文章</a>
<a href="http://blog.codingnow.com/2011/05/bitcoin.html">云风的Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy For Something]]></title>
    <link href="http://metooit.github.com/blog/2013/04/02/happy-for-something/"/>
    <updated>2013-04-02T22:51:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/04/02/happy-for-something</id>
    <content type="html"><![CDATA[<p>其实我有点搞不懂现在的天气，这两天都在下雪诶…… 要知道这是春天了啊！ 现在的时间真是安排的满满的了啊，不过我还是很开心能在有限的时间里做一些自己喜欢
的事情～～</p>

<p>不过好像有一点累啊，年轻人～抗得住！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怀念张国荣]]></title>
    <link href="http://metooit.github.com/blog/2013/03/31/in-memory-of-leslie/"/>
    <updated>2013-03-31T22:09:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/31/in-memory-of-leslie</id>
    <content type="html"><![CDATA[<p>喜欢张国荣，不仅是他的歌，他的电影，更加是它的人格。在娱乐圈，很少有这样一个人，几乎所有人都说他的好，很多人都感激他的好。说实话，我是很钦慕这样
他这样一个人……</p>

<p>其实，有一点遗憾，我是高中之后才开始听张国荣的歌曲的。他的歌让我感到真实，不虚伪，不做作。看过哥哥演唱会的录像，他唱的满头大汗，怪不得演唱会之前
哥哥要为了演唱会锻炼很长时间呢…… 正因为他的这份认真，才会让歌迷觉得这样一个巨星也是一个真真实实的人吧……</p>

<p>缅怀逝去的哥哥，他有一个无愧无悔的人生。:-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『编程珠玑』（一）]]></title>
    <link href="http://metooit.github.com/blog/2013/03/28/programming-pearls-1/"/>
    <updated>2013-03-28T18:39:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/28/programming-pearls-1</id>
    <content type="html"><![CDATA[<p>『编程珠玑』这本书其实早就买了，也看过一遍了，经典的书看一遍总是不够的嘛，现在要敦促自己再看一遍！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How About Mataining A WiKi]]></title>
    <link href="http://metooit.github.com/blog/2013/03/27/how-about-mataining-a-wiki/"/>
    <updated>2013-03-27T18:56:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/27/how-about-mataining-a-wiki</id>
    <content type="html"><![CDATA[<p>今天有一个想法就是弄一个个人的Wiki。平时学到一些散乱的东西，来不及整理成条目记录下来的，其实很有必要去想办法记录下来那些偶然看见的好东西，以及学到
的一些零散的小知识，当然，小知识有时候能有大用处哦。</p>

<p>我想要有一个自己的Wiki的想法来源于我看到了别人写的Wiki，我总能从其中找到一些对我有用的内容，所以自己有一个知识的仓储还是必要的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python yield]]></title>
    <link href="http://metooit.github.com/blog/2013/03/26/python-yield/"/>
    <updated>2013-03-26T19:05:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/26/python-yield</id>
    <content type="html"><![CDATA[<p>一直没有认真去体会一下<code>Python yield</code>，今天就来更多的了解一下这个所谓的生成器吧。</p>

<p>简单地说，<code>yield</code>就是把一个函数变成一个<code>generator</code>，带有<code>yield</code>的函数不再是一个普通的函数，<code>python</code>解释器会将其视为一个<code>generator</code>，调用函数时不是
执行函数，而是生成一个<code>iterator</code>的对象！</p>

<figure class='code'><figcaption><span>yield    python-yield </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">flatten</span><span class="p">(</span><span class="n">nested</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">nested</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">element</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">nested</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">flatten</span><span class="p">(</span><span class="n">nested</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">num</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于上一个函数来讲，这个包含<code>yield</code>语句的函数就称为一个生成器，除了名字不同以外，它的行为和普通函数也是有很大差别的。这个差别就在于它不是像<code>return</code>
语句一样返回一个值，而是每次产生多个值。每次产生一个值（使用yield语句），函数就会被冻结：即函数停在那点等待被激活。函数被激活后就从停止的那点开始
执行。神奇的地方在哪里呢？代码会从<code>yield</code>的下一句开始执行，而函数的本地变量看起来和上一次中断执行前是完全一样的，于是函数继续执行，直到再一次遇见
<code>yield</code>。</p>

<p>另一个例子：</p>

<figure class='code'><figcaption><span>yield2    python-yield </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fab</span><span class="p">(</span><span class="nb">max</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="nb">max</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">b</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">fab</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained">StackOverflow</a>上的一篇关于<code>yield</code>的东东</p>

<hr />

<h3>递归生成器：</h3>

<figure class='code'><figcaption><span>python-yield    python </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#! -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">flatten</span><span class="p">(</span><span class="n">nested</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span> <span class="n">nested</span> <span class="o">+</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span> <span class="k">pass</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span> <span class="k">raise</span> <span class="ne">TypeError</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">nested</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">flatten</span><span class="p">(</span><span class="n">sublist</span><span class="p">):</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">element</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">nested</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">flatten</span><span class="p">([</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;bar&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;baz&#39;</span><span class="p">]]]))</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>生成器是由两部分组成：生成器函数和生成器迭代器。生成器函数是由<code>def</code>语句定义的，包含<code>yield</code>部分，生成器的迭代器是这个函数返回的部分。</p>

<hr />

<h3>尝试解决八皇后问题：</h3>

<p>问题： 有一个棋盘和八个要放置在上面的皇后，唯一的要求是皇后之间不能相互构成威胁。</p>

<figure class='code'><figcaption><span>python-yield    python-yield </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#! -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">conflict</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">nextX</span><span class="p">):</span>
</span><span class='line'>    <span class="n">nextY</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nextY</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">nextX</span><span class="p">)</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">nextY</span> <span class="o">-</span> <span class="n">i</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">queens</span><span class="p">(</span><span class="n">num</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">state</span> <span class="o">=</span> <span class="p">()):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">pos</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">conflict</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="o">==</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                <span class="k">yield</span> <span class="p">(</span><span class="n">pos</span><span class="p">,)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">queens</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">state</span> <span class="o">+</span> <span class="p">(</span><span class="n">pos</span><span class="p">,)):</span>
</span><span class='line'>                    <span class="k">yield</span> <span class="p">(</span><span class="n">pos</span><span class="p">,)</span> <span class="o">+</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">solution</span> <span class="ow">in</span> <span class="n">queens</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">solution</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What a fucking day]]></title>
    <link href="http://metooit.github.com/blog/2013/03/25/what-a-fucking-day/"/>
    <updated>2013-03-25T23:20:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/25/what-a-fucking-day</id>
    <content type="html"><![CDATA[<p>今天我最想说的一句话就是：WHAT A FUCKING DAY!!!</p>

<p>一天十二个小时的课程加实验，这样真的让人很不爽啊，外加点名签到……有没有搞错，自由？自由……自由啊！这样的课程安排真的是让人情何以堪？我真的有点累了。
本来想要总结学习一点东西的，看来今天只好先放一放。</p>

<p>现在时间是：北京时间
Mon Mar 25 23:24:24 CST 2013</p>

<p>晚安，世界</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符串匹配算法]]></title>
    <link href="http://metooit.github.com/blog/2013/03/23/string-match-algorithms/"/>
    <updated>2013-03-23T14:44:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/23/string-match-algorithms</id>
    <content type="html"><![CDATA[<h3>NATIVE-STRING-MATCHER</h3>

<p>字符串 T = abcabaabcabac，字符串 P = abaa，判断P是否是T的子串，就是字符串匹配问题了，T 叫做文本
（Text） ，P 叫做模式（Pattern），所以正确描述是，找出所有在文本 T = abcabaabcabac 中模式 P = abaa
的所有出现。</p>

<p><img src="http://metooit.github.com/pictures/string_match.png" title="" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NATIVE-STRING-MATCHER(T, P)
</span><span class='line'>    n=T.length
</span><span class='line'>    m=P.length
</span><span class='line'>    for s = 0 to n -m
</span><span class='line'>        if P[1..m] == T[s+1..s+m]
</span><span class='line'>            print "Pattern occurs with shift"</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstring&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">NativeStringMatcher</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">T</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">P</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;朴素算法，匹配位置是：%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="s">&quot;2359023141526739921&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">P</span> <span class="o">=</span> <span class="s">&quot;31415&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NativeStringMatcher</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">P</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>Useful Tips:
* 用 Σ* 表示用字母表Σ中的所有有限长度的字符串的集合
* 字符串 x 的长度用 |x| 表示
* x 和 y 的连接表示为 xy，长度为| x |+| y |
* x = yw，y 是 x 的前缀，w 是 x 的后缀</p>

<h3>Rabin-Karp算法</h3>

<p>Rabin-Karp算法由 Rabin 和 Karp 提出，预处理时间为 O（m），最坏情况下运行时间为O((n – m + 1)m)，和
朴素算法差不多，但是平均情况很好。</p>

<p>已知模式 P[1..m]，设 p 表示其相应十进制数地值，类似地， 对于给定的文本T[1..n]. 用 ts 表示长度为
m 的子字符串 T[s + 1 ‥ s + m]（ s = 0, 1, &#8230; , n – m）， ts = p 当且仅当 [s + 1..s + m] =
P[1..m]；因此s是有效位移当且仅当 ts = p，可以通过把 p 与每一个 ts 值进行比较。</p>

<blockquote><p>可以用霍纳规则(Horner’s rule) 在Θ(m) 的时间内计算p的值 ：</p>

<pre><code>                   p = P[m] + 10 (P[m - 1] + 10(P[m - 2] + · · · + 10(P[2] + 10P[1]) ))
</code></pre></blockquote>

<p>类似地，可以在Θ(m)时间内，根据T[1..m]计算出t0 的值。为了在Θ(n – m) 时间内计算出剩余的值t1, t2,
&#8230; , tn-m 可以在常数的时间内根据ts计算出ts+1，总结出公式：</p>

<blockquote><pre><code>            t(s + 1) = 10 （ts – 10^m*1 T[s + 1]） + T[s + m + 1]
</code></pre></blockquote>

<p>还有一个问题，计算中 p 和 ts 的值可能太大，超出计算机字长，不能方便地进行处理。如果 p 包含m
个字符，那么， 关于在 p 上地每次算术运算需要“常数”时间这一假设就不合理了，幸运的是，对这一问题存在
一个简单的补救方法，对一个合适的模 q 来计算 p 和 ts 的模，每个字符是一个十进制数，因为 p 和 t0  以
及 公式1 计算过程都可以对模 q 进行，所以可以在 Θ(m) 时间内计算出模 q 的 p 值，在 Θ(n – m + 1) 时间
内计算出模 q 的所有 ts 值，通常选模 q 为一个素数，使得 10q 正好为一个计算机字长，单精度算术运算就可
以执行所有必要的运算过程。 一般情况下，采用d进制的字母表{0, 1, &#8230; , d – 1}, 所选的 q 要满足 d *
q &lt; 字长，调整 公式1， 使其为：</p>

<blockquote><pre><code>          ts + 1 = （d（ts – T[s + 1] * h） + T[s + m + 1]） mod q
</code></pre></blockquote>

<p>其中的h = d<sup>m-1</sup> (mod q)，但是加入模q后，由ts ≡ p (mod q)不能说明 ts = p. 但ts  p (mod q), 可以说明
ts ≠ p，因此当ts ≡ p (mod q)时， 再用朴素的字符串匹配算法验证ts = p。. 如果q足够大，可以期望伪命中
很少出现。</p>

<p><img src="http://metooit.github.com/pictures/Rabin-Karp.png" title="" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RABIN-KARP-MATCHER(T, P, d, q)
</span><span class='line'>    n ← length[T]
</span><span class='line'>    m ← length[P]
</span><span class='line'>    h ← dm-1 mod q
</span><span class='line'>    p ← 0
</span><span class='line'>    t0 ← 0
</span><span class='line'>    for i ← 1 to m           ▹ Preprocessing.
</span><span class='line'>        do p ← (dp + P[i]) mod q
</span><span class='line'>           t0 ← (dt0 + T[i]) mod q
</span><span class='line'>    for s ← 0 to n – m       ▹ Matching.
</span><span class='line'>         do if p = ts
</span><span class='line'>               then if P[1 ‥ m] = T [s + 1 ‥ s + m]
</span><span class='line'>                       then print "Pattern occurs with shift" s
</span><span class='line'>            if s &lt; n – m
</span><span class='line'>               then ts+1 ← (d(ts – T[s + 1]h) + T[s + m + 1]) mod q</span></code></pre></td></tr></table></div></figure>


<p>代码实现：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include&lt;algorithm&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="c1">//朴素匹配算法，用于RabinKarp调用</span>
</span><span class='line'><span class="n">bool</span> <span class="n">NativeStringMatcher</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">T</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">P</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'><span class="err">    </span><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span><span class='line'><span class="err">    </span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">        </span><span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">            </span><span class="k">if</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'><span class="err">                </span><span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="err">            </span><span class="p">}</span>
</span><span class='line'><span class="err">        </span><span class="p">}</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">            </span><span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="err">        </span><span class="p">}</span>
</span><span class='line'><span class="err">    </span><span class="p">}</span>
</span><span class='line'><span class="err">    </span><span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="c1">//RabinKarp算法</span>
</span><span class='line'><span class="kt">void</span> <span class="n">RabinKarp</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">T</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">P</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">,</span> <span class="kt">int</span> <span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'><span class="err">    </span><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="err">    </span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">        </span><span class="n">h</span> <span class="o">*=</span> <span class="n">d</span><span class="p">;</span><span class="c1">//pow可能会越界，所以用乘法</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="p">(</span><span class="n">h</span> <span class="o">&gt;=</span> <span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">            </span><span class="n">h</span> <span class="o">%=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="err">        </span><span class="p">}</span>
</span><span class='line'><span class="err">    </span><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="err">    </span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="err">    </span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">        </span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span> <span class="o">*</span> <span class="n">p</span> <span class="o">+</span> <span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">))</span> <span class="o">%</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="err">        </span><span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span> <span class="o">*</span> <span class="n">t</span> <span class="o">+</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">))</span> <span class="o">%</span> <span class="n">q</span><span class="p">;</span><span class="err">       </span>
</span><span class='line'><span class="err">    </span><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">        </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;t%d = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">            </span><span class="k">if</span> <span class="p">(</span><span class="n">NativeStringMatcher</span><span class="p">(</span><span class="n">T</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">P</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="err">                </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;匹配位置是：%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">NativeStringMatcher</span><span class="p">(</span><span class="n">T</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">P</span><span class="p">)</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="err">            </span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="err">                </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;伪命中点：%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="err">            </span><span class="p">}</span>
</span><span class='line'><span class="err">        </span><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">            </span><span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span> <span class="o">*</span> <span class="p">(</span><span class="n">t</span> <span class="o">-</span> <span class="n">h</span> <span class="o">*</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">))</span> <span class="o">+</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">m</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="o">%</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="err">            </span><span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">                </span><span class="n">t</span> <span class="o">+=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="err">            </span><span class="p">}</span>
</span><span class='line'><span class="err">        </span><span class="p">}</span>
</span><span class='line'><span class="err">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="s">&quot;2359023141526739921&quot;</span><span class="p">;</span>
</span><span class='line'><span class="err">    </span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">P</span> <span class="o">=</span> <span class="s">&quot;31415&quot;</span><span class="p">;</span>
</span><span class='line'><span class="err">    </span><span class="n">RabinKarp</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
</span><span class='line'><span class="err">    </span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Knuth-Morris-Pratt算法</h3>

<p>KMP算法预处理时间Θ（m），匹配时间Θ（n），KMP算法用到了一个辅助数组π[1，m]，这个数组记录模式与其自身的
位移进行匹配的信息，这些信息可以避免在朴素匹配算法中的无用位移测试，KMP算法的精髓和高效之处全在这个
辅助数组。</p>

<p><img src="http://metooit.github.com/pictures/KMP.png" title="" ></p>

<p>模式P和T匹配过程中，（a）中一个特定的位移 s 处，q = 5个字符已经匹配成功，但是第六个字符不匹配了，如
果是朴素算法，位移s处无效，则接着到 s + 1处，但是明显的 s + 1 处是明显无效的，而如（b）图，s + 2前
三个字符都可以匹配，所以很可能是匹配点。数组π记录的就是这些信息，比如对于P，上边的例子 π[5] = 3，则
下一个可能的位移是s’= s + （q – π[q]），即s’= s + 2，也就是在匹配过程中，同时用π数组记录下一次可能匹
配位置的信息。</p>

<p>首先来看一下前缀蛮力匹配算法的代码（代码linux源码string.h），模式串和母串的比较是从左到右进行
（strncmp()），如果找不到和模式串相同的子串，则从左到右移动模式串，距离为1（s++）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="nf">strstr</span><span class="p">(</span><span class="k">register</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="k">register</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">wanted</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">wanted</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">!=</span> <span class="o">*</span><span class="n">wanted</span> <span class="o">||</span> <span class="n">strncmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">wanted</span><span class="p">,</span> <span class="n">len</span><span class="p">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">++</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>KMP算法中的KMP分别是指三个人名：Knuth、Morris、Pratt，其本质也是前缀匹配算法，对比前缀蛮力匹配算法
，区别在于它会动态调整每次模式串的移动距离，而不仅仅是加一，从而加快匹配过程。下图通过一个直观的例
子展示前缀蛮力匹配算法和KMP算法的区别，前文提过，这二者唯一的不同在于模式串移动距离。</p>

<p><img src="http://metooit.github.com/pictures/KMP2.png" title="" ></p>

<p>上图中，前缀蛮力匹配算法发现匹配不上，就向右移动距离1，而KMP算法根据已经比较过的前缀信息，了解到应
该移动距离为2；换句话说针对母串的下一个匹配字符，KMP算法了解它下回应该匹配模式串的哪个位置，比如上
图中，针对母串的第i+1个字符，KMP算法了解它应该匹配模式串的第k+1个字符。为什么会是这样，这是因为母串
的子串T[i-k, i]=aba，而模式串的子串P[0,k]=aba，这二者正好相等。所以模式串应该移动到这个位置，从而让
母串的第i+1个字符和模式串的第k+1个字符继续比较。</p>

<p>KMP算法伪代码，其中 COMPUTE-PREFIX-FUNCTION 过程是预处理来计算π数组的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KMP-MATCHER(T, P)
</span><span class='line'>1 n ← length[T]
</span><span class='line'>2 m ← length[P]
</span><span class='line'>3 π ← COMPUTE-PREFIX-FUNCTION(P)
</span><span class='line'>4 q ← 0                          ▹Number of characters matched.
</span><span class='line'>5 for i ← 1 to n                 ▹Scan the text from left to right.
</span><span class='line'>6      do while q > 0 and P[q + 1] ≠ T[i]
</span><span class='line'>7             do q ← π[q]    ▹Next character does not match.
</span><span class='line'>8         if P[q + 1] = T[i]
</span><span class='line'>9            then q ← q + 1      ▹Next character matches.
</span><span class='line'>10         if q = m                    ▹Is all of P matched?
</span><span class='line'>11            then print "Pattern occurs with shift" i – m
</span><span class='line'>12                 q ← π[q]    ▹Look for the next match.
</span><span class='line'> 
</span><span class='line'>
</span><span class='line'>COMPUTE-PREFIX-FUNCTION(P)
</span><span class='line'>1 m ← length[P]
</span><span class='line'>2 π[1] ← 0
</span><span class='line'>3 k ← 0
</span><span class='line'>4 for q ← 2 to m
</span><span class='line'>5      do while k > 0 and P[k + 1] ≠ P[q]
</span><span class='line'>6             do k ← π[k]
</span><span class='line'>7         if P[k + 1] = P[q]
</span><span class='line'>8            then k ← k + 1
</span><span class='line'>9         π[q] ← k
</span><span class='line'>10 return π</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.matrix67.com/blog/archives/115">Matrix67 KMP</a></p>

<figure class='code'><figcaption><span>KMP   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include&lt;string&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//伪代码中的fail数组，用fail来表示</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fail</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//预处理fail数组</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ComputePrefixFunction</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">P</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">fail</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">fail</span><span class="p">));</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">P</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">!=</span> <span class="n">P</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">k</span> <span class="o">=</span> <span class="n">fail</span><span class="p">[</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">k</span> <span class="o">=</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">fail</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">KMPMatcher</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">T</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">P</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">q</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">P</span><span class="p">[</span><span class="n">q</span><span class="p">]</span> <span class="o">!=</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">fail</span><span class="p">[</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">q</span><span class="p">]</span> <span class="o">==</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">q</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">q</span> <span class="o">==</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;匹配位置: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">fail</span><span class="p">[</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">KMPMatcher</span><span class="p">(</span><span class="s">&quot;123451233211234561234&quot;</span><span class="p">,</span> <span class="s">&quot;12345&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>字典树</h3>

<p>字典树：又称为 Trie ，是一种用于快速检索的多叉树结构。如英文字母的字典树是一个26叉树。数字的字典树是一个10叉树。字典树的基本功能是用来查询某个单词在所有单词中出现次数的一种数据结构，它的插入和查询复杂度都为O(len)，Len为单词（前缀）长度，但是它的空间复杂度却非常高，如果字符集是26个字母，那每个节点的度就有26个，典型的以空间换时间结构。</p>

<p>相比较Rabin-Karp算法和KMP算法主要解决，少量长字符之间匹配问题。字典树主要用于解决大量短字符之间匹配问题。</p>

<p>特别地：和二叉查找树不同，在Trie树中，每个结点上并非存储一个元素。 在 Trie 树中查找一个关键字的时间和树中包含的结点数无关，而取决于组成关键字的字符数。HH师兄讲字典树时的一个例子，用she，he，his，hers 构成一棵字典树：</p>

<p><img src="http://metooit.github.com/pictures/Trie.png" title="" ></p>

<p>字典树特点：</p>

<p>①利用串的公共前缀->节约内存。</p>

<p>②根结点(root)不包含任何字母。</p>

<p>③其余结点仅包含一个字母(非元素)。</p>

<p>④每个结点的子结点包含字母不同。</p>

<p>字典树查找过程：</p>

<p>①在Trie树上进行检索总是始于根结点。</p>

<p>②取得要查找关键词的第一个字母，并根据该字母选择对应的子树并转到该子树继续进行检索。</p>

<p>③在相应的子树上，取得要查找关键词的第二个字母，并进一步选择对应的子树进行检索。</p>

<p>④在某个结点处，关键词的所有字母已被取出，则读取附在该结点上的信息，即完成查找。</p>

<p>假如用包含26个字母的字符构造字典树，那么每个结点都最多有26个分支，匹配某个单词时，每个字符在字典树中对应一层，这样可以非常快速的查找，因为根据字符对应分支查找就可以了。字典树主要的时间花在预处理构造字典树上，设node为实际使用的结点数目，建树O(node * 26)，每次查询是O(length)，空间复杂度O(node * 26)。</p>

<figure class='code'><figcaption><span>Trie  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//HDU 1251 代码，字典树模板</span>
</span><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include&lt;string&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include&lt;algorithm&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">MAXN</span> <span class="o">=</span> <span class="mi">100010</span><span class="p">,</span> <span class="n">MAXM</span> <span class="o">=</span> <span class="mi">11</span><span class="p">,</span> <span class="n">KIND</span> <span class="o">=</span> <span class="mi">26</span><span class="p">;</span>
</span><span class='line'><span class="c1">//小写字母-&gt;26 ，大小混写-&gt;52，大小写+数字-&gt;62</span>
</span><span class='line'><span class="kt">int</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">prefix</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bool</span> <span class="n">isword</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">*</span> <span class="n">next</span><span class="p">[</span><span class="n">KIND</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="n">prefix</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//前缀</span>
</span><span class='line'>        <span class="n">isword</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">next</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="n">a</span><span class="p">[</span><span class="n">MAXN</span><span class="o">*</span><span class="n">MAXM</span><span class="p">],</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span><span class="c1">//根</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span><span class="c1">//插入</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span> <span class="o">=</span> <span class="n">str</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&gt;</span><span class="n">prefix</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">isword</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">bool</span> <span class="nf">del</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span><span class="c1">//删除</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span><span class="c1">//for(i)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">isword</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&gt;</span><span class="n">isword</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">bool</span> <span class="nf">search</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span><span class="c1">//查找</span>
</span><span class='line'>    <span class="n">node</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span><span class="c1">//for(i)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">isword</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">count</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span><span class="c1">//统计后缀</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span><span class="c1">//for(i)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">prefix</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>    <span class="n">root</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">MAXM</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">gets</span><span class="p">(</span><span class="n">str</span><span class="p">),</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">gets</span><span class="p">(</span><span class="n">str</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">count</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">str</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux中的查找命令]]></title>
    <link href="http://metooit.github.com/blog/2013/03/23/find-command-in-linux/"/>
    <updated>2013-03-23T12:37:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/23/find-command-in-linux</id>
    <content type="html"><![CDATA[<p>今天是一个很好的周六啊，为什么很好呢？可能是因为心情比较好所以天气比较好所以世界比较美好，o(∩∩)o&#8230;哈哈！总之呢，在这个大好的日子里，我觉得很有一点
做些什么的必要啦！</p>

<hr />

<p>早晨六点钟（确切的说是6：25）分的时候起床，然后就和同学一起去打羽毛球啦（PS：这件事情已经坚持了一周了，继续努力），后来还吃了早饭（窃喜：-），然后开
始了崭新的一天……</p>

<hr />

<p>今天呢，我很想总结一下<code>Linux</code>中会用到的各种的查找命令，<code>Linux</code>中的查找包括文件、命令、历史等的查找，希望我能够将自己用到的一些东西尽数总结出来，回
顾也是学习：</p>

<h3>文件的查找：</h3>

<blockquote><p><code>whereis</code> <code>locate</code> <code>find</code></p></blockquote>

<p><code>whereis</code> <code>locate</code>是利用数据库来查找相关文件，所以速度会比使用<code>find</code>命令来的快一些。</p>

<h4>whereis</h4>

<p>使用方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>whereis [-bmsu] 文件或者目录名
</span><span class='line'>
</span><span class='line'>-b  ： 只是查找二进制格式的文件
</span><span class='line'>-m  ： 只是查找在说明文件manual路径下的文件
</span><span class='line'>-s  ： 只是查找source源文件
</span><span class='line'>-u  ： 查找不在上述三个选项中的其他特殊文件</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注意： 使用不同的用户（普通用户和根用户），查找到的文件位置可能是不一样的，因为毕竟不同等级的用户他们的命令的执行路径不同，这个和$PATH有关。</li>
</ul>


<h4>locate</h4>

<p>使用方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>locate [-ir] 关键字
</span><span class='line'>
</span><span class='line'>-i  ： 忽略大小写
</span><span class='line'>-r  ： 正则表达式查找</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注意： 这个命令的特点在于它能够根据部分文件名，这个特点也带来了另一个方面的考虑，就是只要是包含你要查找的名称，即使是比它长，也会显示出来。</li>
<li>PS： <code>locate</code>查找的文件是从已经建立的数据库<code>/var/lib/mlocate/</code>里面的数据查找来的，新建文件后查找该文件的话有可能数据库还没有更新呢！手动更新数据
库的话，需要用到一条指令<code>updatedb</code>。这个时间就要长一点了，你懂的。</li>
</ul>


<h4>find</h4>

<p>说到<code>find</code>呢，那要说的就多了啊……</p>

<p>使用方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find [PATH] [option] [action]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>与时间相关的参数：</p>

<blockquote><p>-atime -mtime -ctime
-mtime  n : n为数字，意义为在n天之前的“一天之内”修改过得文件
-mtime +n : 列出n天之前（不含n天本身）被更改过的文件
-mtime -n : 列出n天之内（含n天本身）被更改过的文件
-newer file : 列出比file更新的文件</p></blockquote></li>
<li><p>与用户有关的参数：</p>

<blockquote><p>-uid n
-gid n
-user name
-group name
-nouser
-nogroup
这些命令吧，我觉的从字面意思来看就很明白它的意思了，所以不再赘述。</p></blockquote></li>
<li><p>与文件权限及名称有关的参数：</p>

<blockquote><p>-name 文件名 : 查找相应的文件名
-size [+-] SIZE : 查找比SIZE大或小的文件
-type TYPE : 文件的类型有： 一般正规文件（f）、设备文件（b、c）、目录（d）、连接文件（l）、socket（s）、FIFO（p）
-perm mode : 查找文件权限等于mode的文件
-perm -mode
-perm +mode</p></blockquote></li>
</ul>


<p>还有一个很重要的-exec:</p>

<p>怎么说呢？ 我很喜欢这个命令， 就像我在解压一堆文件的时候， 我只能说： 我很喜欢。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find / -perm +7000 -exec ls -l {}\;</span></code></pre></td></tr></table></div></figure>


<h3>命令的查找：</h3>

<blockquote><p><code>which</code> <code>type</code></p></blockquote>

<h4>which</h4>

<p>使用方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>which -a 命令
</span><span class='line'>
</span><span class='line'>-a  ： 将所有由PATH目录中可以找到的命令均列出，而不是只有第一个被找到的命令的名称。</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注意： 这里同样有一个问题，和PATH有关的，就是不同身份（是吧，身份很重要）。</li>
</ul>


<h4>type</h4>

<p>type的作用是区别一个命令是<code>shell</code>自带的，还是外部扩展的命令。如果一个命令是外部扩展的名令，那么加一个<code>-p</code>就可以找到可执行的二进制文件的位置（相当
于which）
使用方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type -p 命令名称
</span><span class='line'>
</span><span class='line'>-p  ： 找到可执行的二进制文件的位置。（相当于which)</span></code></pre></td></tr></table></div></figure>


<p>题目起的有点大了，恐怕我知道的没有那么全面，这样算是一个小小的总结而已吧……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning jQuery In Process]]></title>
    <link href="http://metooit.github.com/blog/2013/03/20/learning-jquery-in-process/"/>
    <updated>2013-03-20T20:59:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/20/learning-jquery-in-process</id>
    <content type="html"><![CDATA[<p>这几天都在看关于JavaScript和jQuery的东西，我觉得还挺好玩的，jQuery的感觉就像是第一次知道coffeeScript时的感觉一样，让人感到世界又美好了一点，总之，
我看完<code>CodeSchool</code>的『Try jQuery』之后，很是喜欢jQuery,于是我又借了一本《Head First jQuery》，目前也在看这本书呢！(*<sup>__<sup>*)</sup></sup> 嘻嘻…… 喜欢Head First
的书。</p>

<hr />

<p>那么我就在这里记录一下比较重要的东东吧 ：-）</p>

<h3>jQuery基础：</h3>

<ul>
<li><code>JavaScript</code>的解释器并不改变原始的<code>HTML</code>和<code>CSS</code>文件，只是在浏览器的缓存中更改<code>DOM</code>的表示。</li>
<li><code>$</code>符号代表的是<code>jQuery</code>方法，即表示<code>$</code>&#8212;><code>jQuery()</code>。</li>
<li><code>jQuery</code>选择元素的方式和<code>CSS</code>是一样的：
  <strong> <code>tag selector</code> &#8212;> 名称
  </strong> <code>class selector</code> &#8212;> <code>.</code>加上名称
  ** <code>ID selector</code> &#8212;> <code>#</code>加上名称</li>
<li>如何写一个script:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>
</span><span class='line'>        $(document).ready(function() {
</span><span class='line'>            $("div").click(function() {
</span><span class='line'>                alert("You clicked me.");
</span><span class='line'>            });
</span><span class='line'>        }); 
</span><span class='line'>    &lt;/script></span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>$(this)</code>指向当前元素</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Think In Vim]]></title>
    <link href="http://metooit.github.com/blog/2013/03/19/think-in-vim/"/>
    <updated>2013-03-19T12:58:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/19/think-in-vim</id>
    <content type="html"><![CDATA[<p>Vim是一个可以让人着迷的编辑器，它的美需要你去认真地体会！</p>

<p>曾经我也是一个喜欢各种IDE（比如VS， ECLIPSE）而不是文本编辑器的人，最初知道VIM是因为Linux的缘故，说实话，我对VIM不是一见倾心，这种间很多次的情感转折
，不过VIM还是以它强大的美丽征服了我。初见VIM，是从学习Linux开始的，因为Linux中经常要编辑一些配置文件，查到的资料都是要<code>vim xxxx</code>， 我当时在看的书是
《鸟哥的linux私房菜》，里面有专门介绍Vim的一章，我的Vim旅程就此开始。</p>

<p>说说我的感觉吧，第一次打开Vim是黑乎乎的一片，然后是几行字，我甚是怀疑这就是一些前辈口中的神器，总之我敲进了第一条命令<code>:help</code>，简单的看了一下之后，我
就敲下了第二个命令<code>:q</code>，这样的相遇不免让人尴尬，就好象听说了一个久赋盛名的美女却发现不是我喜欢的那一款，也只好一笑了之。后来的事情我自己也是有点说不
清楚了，可能就是在某个瞬间吧，vim用它特有的方式打动了我……</p>

<p>现在的我看来的话，vim打动人的方式很多，打动人的方面也很多：
比如说，vim打动人的方式来说：可能是一个强大的命令，可能是偶然装了一款顺手的插件，可能是一个动人的特性（比如split window啦）…… 总之，只要你使用vim我
相信总有那么一瞬间，你也会为vim所倾倒的。
再说说vim打动人的方面吧，这个说起来就是仁者见仁，智者见智了，但是有一点是相同的，我们都喜欢着vim的简洁与美丽！那么到底我为了什么喜欢vim呢？主要是有
一下几点吧：
* vim的哲学和很多计算机世界里的美丽事物一样：它简洁，美丽
* vim的使用者是快乐的，虽然每个人都有他的快乐，但是我们都会因为vim而快乐，是因为高效的编辑，或是方便的随心所欲，还是丰富的插件？你说呢？
* vim是大家的，更是你的。有句话说有一百个人就有一百个哈姆雷特，其实有一百个人也会有一百种vim
* （保留项 因人而异）vim是一种信仰！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn the hard way]]></title>
    <link href="http://metooit.github.com/blog/2013/03/17/learn-the-hard-way/"/>
    <updated>2013-03-17T07:22:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/17/learn-the-hard-way</id>
    <content type="html"><![CDATA[<p>看了一个系列的教程，learn xx the hard way。觉得还挺不错的，主要是作者的一些理念正适合我。我又思考了一下自己的学习，有时候总是想要有个计划，但是没有计划的时候心情不爽，有了计划之后没有执行又是很不爽。我开始觉得制定计划是一个需要慎重考虑的事情，就像前两天我给自己制定的一些小计划：比如，每天总结一条<code>Linux</code>命令啊，坚持看算法啊，坚持看手册啊…… 想起来又有点惭愧了 所以，干脆我就来个<code>Learn the hard way</code>,笨方法的学习，按部就班，一步一个脚印，我想也许坚持真的不是那么容易……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For You And For Me]]></title>
    <link href="http://metooit.github.com/blog/2013/03/15/for-you-and-for-me/"/>
    <updated>2013-03-15T16:49:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/15/for-you-and-for-me</id>
    <content type="html"><![CDATA[<p>学习编程对于我来说就是一种生活，但是我所期待的另一种生活是能够用编程来改变人们的生活！</p>

<p>这算是我的一个宏愿吧，但是我还是一直为此而努力着。因为不是有一句话叫做不想当将军的士兵不是好士兵吗？我想对于一个程序员来讲，不想去实现这样一个愿望便枉自为程序员吧！</p>

<p>看到一个关于编程的公益广告<a href="http://video.sina.com.cn/v/b/98166519-2036021381.html">视频地址</a>,里面有好多我所崇拜的大牛，看完视频感觉到他们是计算机世界里的英雄，也是我们生活中的英雄，因为他们正是那些用编程来改变人们生活的人！</p>

<p>虽然是一个小菜程序员，但是我还是因为自己当时选择编程这条道路感到庆幸，因为是编程让我真正爱上了生活！以前的我以为自己喜欢的是电子行业，因为我看到电子产品以惊人的速度进入并改变着人们的生活。所以大学我选择了电子信息工程专业，但是我的兴趣却逐渐转向了编程领域，最初的C语言实现一个小程序实现输出“Hello World！”的时候，我觉得兴奋异常，怎么说呢？这样一种兴奋来自一种成就感或者说来自一种探索欲，我开始觉得自己能够操纵机器去做一些事情，那个说的酸溜溜一点就是一点小幸福吧！o(∩∩)o&#8230;哈哈，总之我就是这样不可救药的喜欢上了编程！</p>

<p>为什么我对编程这么着迷吗？我想对你说：学习编程吧，哪怕你只是想多了解一点计算机，然后你就会懂我了，这是一个可以作为爱好的事情！</p>

<p>这篇文章，For you and for me， enjoy Programming, enjoy Life!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不得不面对的一切]]></title>
    <link href="http://metooit.github.com/blog/2013/03/14/something-you-have-to-face/"/>
    <updated>2013-03-14T06:41:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/14/something-you-have-to-face</id>
    <content type="html"><![CDATA[<p>今天听说了一个算是很不好的消息， 我的一个好朋友要退学了， 这让我忽然间感觉到世事无常， 如此让人伤感， 有些事情， 放下要比接受起来更难……</p>

<p>如果这个传闻是真的， 那我对中国的教育体制感到失望， 为我的同学感到可惜， 同时有些事情也值得我们去深思……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git —— 如何让我不爱你]]></title>
    <link href="http://metooit.github.com/blog/2013/03/11/what-are-you-doing/"/>
    <updated>2013-03-11T18:54:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/11/what-are-you-doing</id>
    <content type="html"><![CDATA[<p>要想要知道一个朋友如何， 那你就应该多去了解他， 如果想要知道Git如何， 那么多多地去接触它， 深入的去了解它吧！ Git是美丽由内而外的美。</p>

<p>上一篇《Git 工作流程》还没有写完， 时隔几天， 我还要把没有总结学习过得步骤继续完善在这里：</p>

<p>Git</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Follow the professional way]]></title>
    <link href="http://metooit.github.com/blog/2013/03/08/follow-the-professional-way/"/>
    <updated>2013-03-08T23:14:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/08/follow-the-professional-way</id>
    <content type="html"><![CDATA[<p>这两天一直在跟着两个Dinael的脚步实现<code>game-of-life</code>， 从中我学到了很多东西， 我最感激两位Dinael的一点是： 你们让我看到了<code>Pair Programming</code>的好处， 最重要的是你们让我看到了专业的程序员的工作流程， 也让我学到了一些思考、编码、测试的方法， 真的是很感谢你们！</p>

<p>记得假期的时候看了一个台湾程序员的博客， 其中写到： 如果你打算从事这个行业， 那你就不能是业余地去学习， 而是要把它当成自己的专业去努力去钻研！（大体是这个意思） 作者写到自己在工作的前几年去了一个和自己喜欢的编程工作关系不大的公司， 怀着自己利用业余时间去学习编程的想法， 作者的工作生活并不开心， 然后他开始思考并毅然绝然的辞去了工作， 选择了做一个<code>Ruby</code>程序员， 然后现在的他成功了！</p>

<p>所以， 我在心里不断告诉自己： 你要知道自己想要什么， 想成为一个怎样的人， 想要朝着怎样的目标努力。 有时候我会怪自己， 觉得自己不够有主见， 所以我也会一直告诉自己， 做自己吧！不要在乎其他人的想法， 不要在意别人的眼光！ 其实呢， 除了最亲的人和最好的朋友， 其他人又在意你的什么呢？ 就像我的语文老师曾经给我们看得一首诗一样： 注定， 每个人都是过客。 梦想是注定孤独的旅程， 让支持我的与嘲笑我的人都看到最真实的我， 无论如何， 我始终在走着自己的路， 谢谢你们的陪伴或擦肩而过， 让我体会到这真真实实的人生。</p>

<p>记得小时候的我总会想自己以后会做什么， 现在的我最想时刻提醒自己的却是： 你要明白你现在在干什么。 至于将来， 相信那句话吧： 天道酬勤！ 总是在内心里告诉自己， 你还差得很远， 你还不行…… 但是， 为什么不告诉自己： 你很好， 坚持下去， 也许你还不够好， 但只要你够勤奋……</p>

<p>我的未来取决与我的现在</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 工作流程]]></title>
    <link href="http://metooit.github.com/blog/2013/03/07/git-work-flow/"/>
    <updated>2013-03-07T11:46:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/07/git-work-flow</id>
    <content type="html"><![CDATA[<p>Git是我最常用的版本控制工具， 当然也是我喜欢的工具之一， 我想要写一篇系统的文章来总结一下我在平时使用中总是要用到的一些<code>Git</code>的命令和技巧等， 来记录使用<code>Git</code>工作的流程。</p>

<hr />

<h2>Why Git?</h2>

<p><code>Git</code>的起源和开源运动的进行颇有渊源， 它就诞生于<code>Linux</code>兴起的那个伟大的时代， <code>Git</code>的出现正是<code>黑客精神</code>的体现， 代表了黑客们对于自由分享的向往和不懈地执着地努力！</p>

<blockquote><p>Git起源：
Linux内核最初的维护工作都是提交补丁和保存归档， 但是从2002年开始使用分布式版本管理系统<code>BitKeeper</code>来管理， 但是后者于2005年收回了Linux开源社区免费使用的权利， 于是， 为了避免重蹈复辙， Linus Torvalds 决定开发一套开源的版本控制系统， 然后Git就此诞生了， 不得不佩服这样一群黑客的伟大创举， 再次向他们致敬！</p></blockquote>

<h3>Git 的原则：</h3>

<p>说到Git的原则， 我不禁想到了<code>Unix</code>的原则， 可以说它们在某些方面是一脉相乘的：
* 简洁
* 速度
* 分布式
* 并发支持</p>

<h3>Git 很方便：</h3>

<ul>
<li>直接记录快照， 而不关心具体的数据变化</li>
<li>近乎所有的操作都在本地执行</li>
<li>时刻保持数据完整性</li>
<li>多数操作仅仅是添加数据</li>
</ul>


<p>Git 有如此多的Sexy的特性， 让人怎么能够不喜欢呢？ 正是因为有了这些特性， Git让版本控制变得不再让人头疼。</p>

<hr />

<h2>How To Install Git?</h2>

<p>在<code>Linux</code>系统上的安装很简单：只要调用系统默认的软件包管理器使用命令安装就好了
比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu系统：
</span><span class='line'>> sudo apt-get install git
</span><span class='line'>fedora系统：
</span><span class='line'>> sudo yum install git</span></code></pre></td></tr></table></div></figure>


<h2>And The Configuration?</h2>

<p>Git 的配置文件可以分为三个层级：
* /etc/gitconfig 中所配置的是系统中所有用户的通用配置。
如果使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> git config --system</span></code></pre></td></tr></table></div></figure>


<p>修改的就是这个文件了</p>

<ul>
<li>~/gitconfig 中所做的配置只是针对当前的用户
如果使用：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> git config --global</span></code></pre></td></tr></table></div></figure>


<p>修改的就是这个文件了</p>

<ul>
<li>最后一级就是当前项目中<code>.git</code>文件夹下的<code>config</code>配置文件了， 这个配置仅对当前项目有效。</li>
</ul>


<p>所以， 安装<code>Git</code>完成后， 就需要对<code>Git</code>进行配置了：</p>

<h3>用户信息：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global user.name "xxxx"
</span><span class='line'>$ git config --global user.email "xxxx@xxxx.xxx"</span></code></pre></td></tr></table></div></figure>


<h3>文本编辑器：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global core.editor vi</span></code></pre></td></tr></table></div></figure>


<p>当然是选择我最喜欢的<code>Vim</code>啦！～</p>

<h3>差异分析工具：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global merge.tool vimdiff</span></code></pre></td></tr></table></div></figure>


<h3>查看当前的配置信息：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --list</span></code></pre></td></tr></table></div></figure>


<hr />

<!-- more -->


<h2>To Start Work With Git</h2>

<hr />

<h3>新建Project并开始使用Git管理：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. 创建工作目录:
</span><span class='line'>$ mkdir `工作目录名称`
</span><span class='line'>
</span><span class='line'>2. 切换到工作目录：
</span><span class='line'>$ cd `工作目录名称`
</span><span class='line'>
</span><span class='line'>3. 初始化工作目录：（Git初始化）
</span><span class='line'>$ git init</span></code></pre></td></tr></table></div></figure>


<p>这几步就可以新建一个工程， 并初始化使用<code>Git</code>管理了。执行完<code>git init</code>后工作目录下多了一个<code>.git</code>文件夹， 其中包含了各种设置信息等。<code>git init</code> 文件同时也执行了 <code>git add .</code> 这样的话， 如果你的目录中之前有文件的话， 那么执行这样的一条命令之后， 当前目录的文件会自动加入工程之中。</p>

<h3>添加文件纳入Git版本控制：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. 创建文件： （多种方式）
</span><span class='line'>$ touch `文件名称`
</span><span class='line'>
</span><span class='line'>2. 添加文件： （多种方式）
</span><span class='line'>$ git add `文件名称`
</span><span class='line'>
</span><span class='line'>3. Commit:
</span><span class='line'>$ git commit -m `INFORMARION`</span></code></pre></td></tr></table></div></figure>


<p>通常， 添加文件时我会使用<code>git add .</code>, 当然这也分情况而定。</p>

<blockquote><p>注：这里通常要新建一个<code>README.md</code>文件， 以让其他人了解你的项目， 同时也记录一些自己的项目进展和bug status等等.</p>

<pre><code>  另外， 可能需要一个`.gitignore`来忽略某些文件.
</code></pre></blockquote>

<h3>克隆现有项目：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone #url# [自定义名称]</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Convenience With Git</h2>

<h3>查看当前文件状态：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status</span></code></pre></td></tr></table></div></figure>


<p>这条命令太常用了， 你可以时刻通过这样一条简单的命令掌控每一个文件的状态， 真心方便已极。</p>

<h3>暂存更新：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add [修改后的文件]</span></code></pre></td></tr></table></div></figure>


<h3>查看具体的修改状况：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. 查看未暂存的文件更新了那些部分：
</span><span class='line'>$ git diff
</span><span class='line'>
</span><span class='line'>2. 查看已暂存文件和上次提交的快照的差异：
</span><span class='line'>$ git diff --cached [--staged]</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>The Exciting Time</h2>

<h3>提交更改：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. 提交准备：
</span><span class='line'>$ git status
</span><span class='line'>
</span><span class='line'>2. 提交更改：
</span><span class='line'>$ git commit</span></code></pre></td></tr></table></div></figure>


<p>注意： 每次提交之前要运行一下<code>git status</code>, 看看是否已经暂存， 这是一个好习惯。</p>

<p>另外， 提交时也可以包含一些信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m "提交信息（如Bug修正等）"</span></code></pre></td></tr></table></div></figure>


<p>提交的记录只是放在暂存区的快照， 每次提交之后， 你还可以通过快照回溯到以前的状态。 多牛啊！</p>

<h3>更快捷的提交：</h3>

<p>Git 提供了一个命令选项用来简化提交操作， 这个命令选项简化了<code>git add</code>这一步：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -a</span></code></pre></td></tr></table></div></figure>


<p>对了！ 就是这个<code>-a</code>选项， 同时你也可以使用<code>-m</code>添加消息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -am "提交信息"</span></code></pre></td></tr></table></div></figure>


<h3>移除文件：</h3>

<p>要移除某个文件， 必须从已经暂存的文件中将文件去除：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rm [移除的文件名称]</span></code></pre></td></tr></table></div></figure>


<p>如果删除之前修改过， 并且已经放到暂存区域的话， 那么要使用强制删除选项： <code>-f</code></p>

<p>如果要将文件从Git仓库删除（暂存区域删除）， 但是仍保留在当前目录中， 即： 去除跟踪但是不删除文件， 一边在<code>.gitignore</code>中补上： <code>--cached</code></p>

<h3>移动文件：</h3>

<p>Git 并不跟踪文件的移动操作， 但是它可以判断出发生了什么：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git mv [源文件名] [目标文件名]</span></code></pre></td></tr></table></div></figure>


<p>实际上， 运行<code>git mv</code>相当与运行三个命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv [源文件名] [目标文件名]
</span><span class='line'>$ git rm [源文件名]
</span><span class='line'>$ git add [目标文件名]</span></code></pre></td></tr></table></div></figure>


<h3>查看提交历史：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log</span></code></pre></td></tr></table></div></figure>


<p>不带参数时， 会按时间列出所有的更新。</p>

<blockquote><p><code>-p</code> 选项展开显示每次提交的差异
<code>-数字</code> 选项选择最近的N次更新
<code>--stat</code> 选项仅显示简要的增改行数统计
<code>--pretty</code>
<code>--oneline</code> 或 <code>--pretty</code> 结合 <code>--graph</code>使用， 会显示ASCII 字符画</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The taste of time]]></title>
    <link href="http://metooit.github.com/blog/2013/03/07/the-taste-of-time/"/>
    <updated>2013-03-07T06:47:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/07/the-taste-of-time</id>
    <content type="html"><![CDATA[<p>昨天刷牙的时候， 忽然间觉得好像有某种似曾相识的感觉， 也说不清楚到底是什么样的感觉， 那更像是一种味道————时光的味道。</p>

<hr />

<p>“不管现在的处境如何， 到了回忆里， 一切都是甜美的” 当年读高三的时候看到这句话， 只觉得是一种勉励， 而今想起来却深觉其中味了， 再苦再难， 一切都会过去， 而回忆都是甜美的。</p>

<p>长久以来， 我始终觉得， 记忆中的事情， 很多都有自己独特的味道， 每一个我到过的地方也都要自己的味道， 总能在某一个瞬间， 我感觉到这种味道似曾相识， 让我不禁回忆起过去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interesting about bluetooth]]></title>
    <link href="http://metooit.github.com/blog/2013/03/06/interesting-about-bluetooth/"/>
    <updated>2013-03-06T19:17:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/06/interesting-about-bluetooth</id>
    <content type="html"><![CDATA[<p>今天上课时老师讲到了一个有趣的故事：蓝牙的来历。</p>

<p>很久很久以前（多俗啊……）， 古老的北欧有一个国王非常喜欢吃蓝莓， 所以国民进献了很多的蓝莓给他， 以至于他的牙齿都染成了蓝色了……（这是真的吗？） 然后就是有着么一个蓝牙齿的国王……</p>

<p>然后蓝牙的图标是怎么来的呢？参见<a href="http://en.wikipedia.org/wiki/Bluetooth">wikipedia</a></p>

<p>还有一篇关于这个有意思的小故事的<a href="http://news.xinhuanet.com/classad/2005-02/01/content_2534111.htm">新闻稿</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For more education or For some practice]]></title>
    <link href="http://metooit.github.com/blog/2013/03/05/for-more-education-or-for-some-practice/"/>
    <updated>2013-03-05T21:13:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/03/05/for-more-education-or-for-some-practice</id>
    <content type="html"><![CDATA[<p>考研还是工作？</p>

<p>这是这个学期开始两天来同学们问得最多的一个问题， 对于这个问题， 我还时要问自己一句： 你真的想过了吗？</p>

<p>忽然间想起了之前看过的一片文章， 其中提到了人生的抉择与经济学， 这篇文章的作者就是已故的中国软件界倍受尊敬的<em>冯华军</em>, 我面临这样一个问题了现在， 然后自然想要再次温习一下， Google了好久居然找不到冯华军的博客了！！！ 唉， 可能是因为没有人打理博客， 域名因为欠费被注销了吧， 可惜……</p>

<p>我记忆犹深的有一部分是说， 有时候， 我们面临选择的时候可以试着用经济学中的某个理念（具体叫做什么有待考证）， 其方法就是： 试想我们已经作出了决定， 而且要试想好几次， 把每一种可能都要想到， 然后我们就去再深入的想， 假设每一种设想都得到最坏的结果， 最后我们比较最坏的这些结果， 看看这些最坏的结果中哪个是最好的， 那么这个结果就是要找的最优结果。</p>

<h2>具体分析：</h2>

<ul>
<li><p>如果选择考研：
考研可能遇到的状况就是准备了好久但是最后的结果却不尽如人意， 最坏的莫过于没有学校可上， 然后被迫去找工作， 然后没有找到理想的工作（还不至于流落街头吧， 我想……）。</p></li>
<li><p>如果选择工作：
找工作最坏的可能是找不到理想的工作， 从事了自己不喜欢的职业， 却因为生计所迫去做这份工作。</p></li>
</ul>


<p>这两种假设哪种是我可以接受的呢？ 那条路才是我该选择的呢？</p>

<h2>学会决定：</h2>

<p>记得以前读到过， 有人写道： 人生就是各种各样的选择。 面临如此多的选择， 我最应该做的是要学会决定， 做出自己的选择！ 而且， 我要给自己立一个规矩： 无论做出的选择结果如何， 都不要怨天尤人， 无悔无惧， 相信未来， 相信希望！</p>

<p>其实说到底， 考研还是工作都是自己的事情， 不要让别人的观点左右了自己的内心， 既然大多数的成功不能复制， 那么我又何必去追随别人的脚步然后不断祈祷能像xxx一样呢？ 安静下来吧， 让心安静一会儿， 然后倾听内心的声音， 这才是最重要的！</p>

<h2>选择选择：</h2>

<p>选择有时候确实是艰难的， 这个艰难包含了很多的层面， 很多的意思。 何去何从， 还是让我好好想一想吧。</p>

<h2>学会取舍</h2>

<p>你要知道， 上帝给了每个人不同的天赋， 你要问问自己的内心， 到底你应该去做什么。</p>
]]></content>
  </entry>
  
</feed>
