<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[K.I.S.S]]></title>
  <link href="http://metooit.github.com/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-13T17:24:06+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The useage of SCREEN]]></title>
    <link href="http://metooit.github.com/blog/2013/02/13/the-useage-of-screen/"/>
    <updated>2013-02-13T16:23:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/13/the-useage-of-screen</id>
    <content type="html"><![CDATA[<p>Linux <code>SCREEN</code> 的用法：</p>

<h1>窗口基本操作：</h1>

<ul>
<li><code>Ctrl + a</code> + <code>c</code>  产生一个新窗口（new window）</li>
<li><code>Ctrl + a</code> + <code>n</code>  下一个窗口（next window）</li>
<li><code>Ctrl + a</code> + <code>p</code>  上一个窗口（previous window）</li>
<li><code>Ctrl + a</code> + <code>"</code>  从列表中选择窗口（choose from the list）</li>
<li><code>Ctrl + a</code> + <code>Ctrl +a</code> 上一个查看过的窗口</li>
</ul>


<h1>分屏操作：</h1>

<ul>
<li><code>Ctrl + a</code> + <code>%</code> 垂直分割窗口。</li>
<li><code>Ctrl + a</code> + <code>|</code> 水平分割窗口.</li>
<li><code>Ctrl + a</code> + <code>tab</code> 移动到分割后的另一个区域。（同时可以用方向键完成相同的操作）</li>
<li><code>Ctrl + a</code> + <code>:resize</code> 重新确定区域的大小</li>
<li><code>Ctrl + a</code> + <code>:fit</code> 窗口大小适应终端的大小</li>
<li><code>Ctrl + a</code> + <code>:remove</code> 移除区域。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Algorithms : Sort --- Merge Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-mergesort/"/>
    <updated>2013-02-13T10:34:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-mergesort</id>
    <content type="html"><![CDATA[<p>下面的这个排序算法呢， 是《算法导论》中首先涉及到一种思想而引出来的算法， 所以这里要总结的不止是<em>归并排序</em>这种算法而已， 还要说一下这里的一种思想方法<code>分治法</code>。</p>

<hr />

<h3>分治法：</h3>

<h4>算法的递归性：</h4>

<p>递归性是指为了解决一个给定的问题， 算法一次或多次地调用自身， 以解决紧密相关的若干子问题。</p>

<h4>算法的思想：</h4>

<p>运用递归来解决问题的算法通常典型地遵守<code>分治法</code>的思想： 将原问题分解为几个规模较小的子问题， 然后递归地求解这些子问题， 最后合并这些子问题的解来建立原问题的解。</p>

<h5>分治模式在每一层的递归时都有三个步骤：</h5>

<ul>
<li><h2>分解:</h2>

<p>原问题为若干子问题</p></li>
<li><h2>解决:</h2>

<p>这些子问题， 递归地求解各个子问题。</p></li>
<li><h2>合并:</h2>

<p>这些子问题的解为原问题的解。</p></li>
</ul>


<hr />

<h3>归并排序基本性能分析：</h3>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(n lgn)              </td>
<td align="left"> O(n lgn)         </td>
<td align="left"> O(n)</td>
</tr>
</tbody>
</table>


<ul>
<li>插入排序的特点：

<blockquote><ol>
<li>对于少量的元素， 它是一个非常有效的算法。</li>
<li>该算法原址排序输入的数： 算法在数组A中重排这些数， 在任何时候， 最多只有常数个数字存储在数组外面。</li>
</ol>
</blockquote></li>
</ul>


<!-- more -->


<h3>归并排序的实现过程：</h3>

<ul>
<li>分解： 将待排序的n个元素的序列分解问n/2的两个子序列。</li>
<li>解决： 使用归并排序递归地排序两个子序列。</li>
<li>合并： 合并两个已排序的子序列以产生结果。</li>
</ul>


<h3>归并排序的前提条件：</h3>

<p>排序数组 A[p..r]。该数组分解后产生<code>A[p..q]</code>和<code>A[q+1, r]</code>两个部分，其中p &lt; q &lt; r</p>

<h3>归并排序的特点：</h3>

<ul>
<li>归并排序的<em>关键</em>是“合并”步骤中将两个已经排序的序列合并的操作。也就是<code>MERGE</code>的过程。该过程需要<code>O(n)</code>的时间。其中 <code>n = r - p + 1</code>.</li>
<li>为了避免在每一个基本步骤中都检查堆是否为空， 我们在每个堆的底部放上一个哨兵， 它含有一个特殊值， 用于简化代码。</li>
</ul>


<h3>归并排序的伪代码实现：</h3>

<p><code>MERGE</code>过程的实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MERGE(A, p, q, r)
</span><span class='line'>1   n1 = q - p + 1
</span><span class='line'>2   n2 = r - q
</span><span class='line'>3   let L[1..n1 + 1] and R[1..n2 + 1] be new arrays
</span><span class='line'>4   for i = 1 to n1
</span><span class='line'>5       L[i] = A[p + i - 1]
</span><span class='line'>6   for j = 1 to n2
</span><span class='line'>7       R[j] = A[q + j]
</span><span class='line'>8   L[n1 + 1] = nil
</span><span class='line'>9   R[n2 + 1] = nil
</span><span class='line'>10  i = 1
</span><span class='line'>11  j = 1
</span><span class='line'>12  for k = p to r
</span><span class='line'>13      if L[i] &lt; R[j]
</span><span class='line'>14          A[k] = L[i]
</span><span class='line'>15          i = i + 1
</span><span class='line'>16      else A[k] = R[j]
</span><span class='line'>17          j = j + 1</span></code></pre></td></tr></table></div></figure>


<h3>归并排序的C语言实现：</h3>

<figure class='code'><figcaption><span>insertion_sort    insertion_sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Algorithms : Sort --- Insertion Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-insertion-sort/"/>
    <updated>2013-02-13T09:24:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/13/learn-algorithms-sort-insertion-sort</id>
    <content type="html"><![CDATA[<p>今天认真地把《算法导论》上其他的排序算法整理一下， 当然从最开始介绍的 <em>插入排序</em> 开始了。</p>

<hr />

<h3>插入排序基本性能分析：</h3>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(n<sup>2)</sup>                </td>
<td align="left"> O(n<sup>2)</sup>           </td>
<td align="left"> O(n)</td>
</tr>
</tbody>
</table>


<ul>
<li>插入排序的特点：

<blockquote><ol>
<li>对于少量的元素， 它是一个非常有效的算法。</li>
<li>该算法原址排序输入的数： 算法在数组A中重排这些数， 在任何时候， 最多只有常数个数字存储在数组外面。</li>
</ol>
</blockquote></li>
</ul>


<!-- more -->


<h3>插入排序的伪代码实现：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERTION-SORT(A)
</span><span class='line'>1   for j = 2 to A.length
</span><span class='line'>2       key = A[j]
</span><span class='line'>3       // Insert A[j] into the  sorted sequence A[1..j-1]
</span><span class='line'>4       i = j - 1
</span><span class='line'>5       while i > 0 and A[i] > key
</span><span class='line'>6           A[i + 1] = A[i]
</span><span class='line'>7           i = i - 1
</span><span class='line'>8       A[i + 1] = key</span></code></pre></td></tr></table></div></figure>


<h3>插入排序的C语言实现：</h3>

<figure class='code'><figcaption><span>insertion_sort    insertion_sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">insertion_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">store_index</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">store_index</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">store_index</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">store_index</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">store_key</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">store_index</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sort_index</span> <span class="o">=</span> <span class="n">store_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">sort_index</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">array</span><span class="p">[</span><span class="n">sort_index</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">store_key</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">array</span><span class="p">[</span><span class="n">sort_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">sort_index</span><span class="p">];</span>
</span><span class='line'>            <span class="n">sort_index</span> <span class="o">=</span> <span class="n">sort_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">array</span><span class="p">[</span><span class="n">sort_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">store_key</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://metooit.github.com/pictures/insertion_sort.png" title="Insertion_sort" ></p>

<hr />

<h3>插入排序的Python实现：</h3>

<figure class='code'><figcaption><span>insertion_sort     insertion_sort </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">item</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>        <span class="n">hole</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">hole</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">hole</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>            <span class="n">seq</span><span class="p">[</span><span class="n">hole</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">hole</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">hole</span> <span class="o">=</span> <span class="n">hole</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">seq</span><span class="p">[</span><span class="n">hole</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">seq</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://metooit.github.com/pictures/insertion_sort2.png" title="insertion_sort2" ></p>

<ul>
<li>后记： 虽然这些东西的实现过程相对简单， 文章也没有什么分量， 但是将这些点滴总结在一起也是一个学习的过程吧， 所以要坚持下去～～</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Algorithms : Sort --- Quick Sort]]></title>
    <link href="http://metooit.github.com/blog/2013/02/11/learn-algorithms-sort-quick-sort/"/>
    <updated>2013-02-11T09:52:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/11/learn-algorithms-sort-quick-sort</id>
    <content type="html"><![CDATA[<p>前面提到过要系统地学习一下算法， 今天就先从一个排序算法开始。<em>快速排序</em></p>

<hr />

<h3>快速排序基本性能分析：</h3>

<table>
<thead>
<tr>
<th></th>
<th> 最坏情况时间复杂度    </th>
<th align="left"> 期望时间复杂度   </th>
<th align="left"> 空间复杂度   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(n<sup>2)</sup>                </td>
<td align="left"> O(nlgn)          </td>
<td align="left"> O(nlgn)      |</td>
</tr>
</tbody>
</table>


<ul>
<li>特点：

<blockquote><ol>
<li>虽然最坏情况的时间复杂度很差， 但是快速排序通常是实际排序中应用最好的选择， 因为它的平均性能比较好。</li>
<li>它能进行<em>原址排序</em>。</li>
<li>快速排序使用了<em>分治思想</em>。</li>
</ol>
</blockquote></li>
</ul>


<!-- more -->


<h3>快速排序的描述：</h3>

<ul>
<li><p>快速排序分为三个部分： 分解==>解决==>合并</p></li>
<li><p>问题的前提： 对一个典型的数组 A[p..r] 进行排序。</p></li>
<li><p>排序过程：</p>

<blockquote><ol>
<li>分解： 将数组 A[p..r] 划分为两个数组 A[p..q-1] 和 A[q+1..r]， 使得 A[p..q-1] 中的每一个元素都小于等于 A[q]， 而 A[q+1..r] 中的每一个元
素都大于A[q].</li>
<li>解决： 递归调用快速排序， 对两个子数组进行排序。</li>
<li>合并： 以为子数组都是原址排序的，  所以不需要合并操作： 数组 A[p..r] 已经有序。</li>
</ol>
</blockquote></li>
</ul>


<h3>快速排序伪代码实现：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>QUICKSORT(A, p, r)
</span><span class='line'>1 if p &lt; r
</span><span class='line'>2       q = PARTITION(A, p, r)
</span><span class='line'>3       QUICKSORT(A, p, q - 1)
</span><span class='line'>4       QUICKSORT(A, q + 1, r)</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>为了排序一个数组的全部， 初始调用的是 QUICKSORT(A, 1, A.length)。</p></li>
<li><p>算法的关键部分是 <em>PARTITION</em> 过程， 它实现了对子数组 A[p&#8230;r] 的原址重排。</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PARTITION(A, p, r)
</span><span class='line'>1  x = A[r]
</span><span class='line'>2  i = p - 1
</span><span class='line'>3  for j = p to r - 1
</span><span class='line'>4       do if A[j] &lt;= x
</span><span class='line'>5             then i = i + 1
</span><span class='line'>6                  exchange A[i] with A[j]
</span><span class='line'>7  exchange A[i + 1] with A[r]
</span><span class='line'>8  return i + 1 ></span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>PARTITION</code>过程总是选择一个 x=A[r] 作为主元， 并围绕它来进行子数组的划分 A[p..r]， 随着程序的进行， 数组可能被划分为四个区域。</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> 小于x的部分    </th>
<th align="left"> 大于x的部分    </th>
<th align="left"> 无限制      </th>
<th align="left"> 主元x   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <code>X  X  X  X</code>   </td>
<td align="left"> <code>X  X  X  X</code>   </td>
<td align="left"> <code>X  X  X</code>   </td>
<td align="left"> <code>X</code></td>
</tr>
<tr>
<td></td>
<td> <code>p--------i</code>   </td>
<td align="left"> <code>----------</code>   </td>
<td align="left"> <code>j------</code>   </td>
<td align="left"> <code>r</code></td>
</tr>
</tbody>
</table>


<blockquote><p>3 ~ 6 行的循环对人以数组下标 <code>k</code>：会按照 <code>k</code> 与 <code>p</code> <code>i</code> <code>j</code> <code>r</code> 的关系将其放在对应的位置。</p></blockquote>

<ul>
<li><p>快速排序算法的正确性证明参见算法导论（第三版） 96页。</p></li>
<li><p>一个例子：</p></li>
</ul>


<p>对<code>2 8 7 1 3 5 6 4</code> 数组进行排序</p>

<p><img src="http://metooit.github.com/pictures/quick-sort-demo.jpg" title="quick-sort-demo" ></p>

<hr />

<h3>快速排序算法的实现：</h3>

<h4>C 语言实现：</h4>

<ul>
<li>第一步： 先要实现算法的核心部分， PARTITION 过程的实现：</li>
</ul>


<figure class='code'><figcaption><span>quick-sort  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">partition</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pivot_index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pivot_value</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">pivot_index</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">store_index</span> <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot_value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">store_index</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">store_index</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">store_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">store_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>依照算法导论上的伪代码可以写出上述的代码，该过程主要实现了传入的数组对应标号的分治过程。通过分治过程可以把数组<code>array</code>中从<code>left</code>到<code>right</code>的
元素以<code>pivot_index</code>为标号的元素为基准分成两部分。</p>

<ul>
<li>第二步： 实现QUICKSORT的主过程：</li>
</ul>


<figure class='code'><figcaption><span>quick-sort-2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">quicksort</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pivot_index</span> <span class="o">=</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pivot_index</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">pivot_index</span><span class="p">);</span>
</span><span class='line'>        <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">pivot_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">pivot_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样是依照算法导论上的实现过程， 我们可以实现快速排序的算法， 其中用到了递归调用， 通过递归调用把数组的每一部分排好序。 注意：由于是原址排
序， 我们就不用再分配新的存储空间，直接在原数组上排序即可。</p>

<ul>
<li>第三步： 细节问题：</li>
</ul>


<figure class='code'><figcaption><span>swap  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span><span class='line'>    <span class="n">array</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span><span class='line'>    <span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个程序就很简单了， 实现了数组元素的互换。</p>

<p><img src="http://metooit.github.com/pictures/quick-sort-test.png" title="quick-sort-test" ></p>

<h4>Python 语言实现：</h4>

<figure class='code'><figcaption><span>quick-sort-python  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">quicksort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">seq</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">pivot</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">=</span> <span class="n">sort</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">])</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">=</span> <span class="n">sort</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">pivot</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">left</span> <span class="o">+</span> <span class="p">[</span><span class="n">pivot</span><span class="p">]</span> <span class="o">+</span> <span class="n">right</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'>    <span class="n">seq</span> <span class="o">=</span> <span class="n">quicksort</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://metooit.github.com/pictures/quick-sort-python.png" title="quick-sort-python" ></p>

<p>进一步对python版本进行测试：</p>

<p><img src="http://metooit.github.com/pictures/quick-sort-python2.png" title="quick-sort-python2" ></p>

<p>看来还是python 要简洁不少啊！感慨一下～</p>

<h4>Ruby 语言实现：</h4>

<figure class='code'><figcaption><span>quick-sort-ruby    </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">right</span><span class="o">]</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">left</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">right</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">,</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">array</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">array</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">,</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>    <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">q</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现过程和C语言的版本基本没有差别， 这里只是熟悉依稀<code>Ruby</code>的语法罢了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy New Year]]></title>
    <link href="http://metooit.github.com/blog/2013/02/09/happy-new-year/"/>
    <updated>2013-02-09T23:10:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/09/happy-new-year</id>
    <content type="html"><![CDATA[<p>今天是农历新年的三十， 现在就是除夕夜啦～ 祝所有人都新年快乐啊！</p>

<p>o(∩∩)o&#8230;哈哈， 这个年过了对于我们来说是长了一岁， 总是在过年的时候忽然觉得时间过得好快， 真的好快。 不过年的时候根本就不会去想的事情， 忽然在这岁末涌现在脑海里。 2013真的来了！</p>

<p>大年三十儿的晚上， 忽然觉得没有了小时候过年的兴奋， 也说不上觉得特别想要过年， 可能过年对于我来讲就是<code>寒假不会要结束了吧</code>这个问题要开始考虑了，：）</p>

<p>我感觉我的强迫症越来越厉害了， 在今天一天就有以下表现：</p>

<ul>
<li>贴对联的时候要求做到非常之对齐， 不仅是高度距离等因素， 还有对联上粘的胶带， 胶带的长度， 贴上去的位置， 还有不能贴出气泡…… 唉， 贴个对联真是费了好大的劲儿啊:(</li>
<li>祝福短信上， 因为我觉得可能短信群发有点不够诚意， 我决定要个每个人发一条不一样的短信， 所以…… 连续好几个小时的时间里， 我是一边走路、聊天、看春晚……的时间， 都在发短信啊， 而且还要检查看看是不是有重复的啊……</li>
<li>看春晚， 我要被刘谦的魔术折磨疯了， 我真的很想知道是怎么做到的， 所以看完他的魔术， 我立刻回到电脑前面开始查魔术， 但是， 但是 …… 算了， 就让这小子欺骗广大人民吧， 唉～ 我这个不懂<code>艺术</code>的人……</li>
<li>我是真的必须要遵循<code>三十er晚上熬一宿</code>的习俗啊， 真的， 不到十二点我是真的不放心啊， 而且一定要是正好的十二点我才放心……</li>
<li>我刚刚上<code>github</code>， 结果上不去说是维护， 我点进<code>gitstatus</code>里面写了十分钟， 然后我就一直在刷新看看过了几分钟， 我觉得我是有必要看看医生了……</li>
<li>……</li>
</ul>


<p>先写到这里吧， 过年了， Hello 2013！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Ruby in Process 1]]></title>
    <link href="http://metooit.github.com/blog/2013/02/08/learning-ruby-in-process-1/"/>
    <updated>2013-02-08T19:26:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/08/learning-ruby-in-process-1</id>
    <content type="html"><![CDATA[<ul>
<li>对于一个字符串中每个字元的遍历：（迭代器 -> <code>iterator</code>）</li>
</ul>


<figure class='code'><figcaption><span>iterator1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">each_byte</span><span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="nb">printf</span> <span class="s2">&quot;&lt;%c&gt;&quot;</span><span class="p">,</span> <span class="n">c</span> <span class="p">};</span> <span class="nb">print</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>each_byte是字符串中处理每个字元的迭代器。</p>

<p>如果是用循环语句来实现的话：</p>

<figure class='code'><figcaption><span>iterator2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">004</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="nb">printf</span> <span class="s2">&quot;&lt;%c&gt;&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">end</span><span class="p">;</span> <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>retry</code>意思是重新开始循环， 而<code>redo</code>意思是当前循环重新做一次迭代。
举例来说：</li>
</ul>


<figure class='code'><figcaption><span>retry  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">retry</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再试试换成<code>redo</code>呢？</p>

<!-- more -->


<ul>
<li><p><code>Ruby</code>的方法可以接受参数：与传统的语言一样， 用括号扩起来， 而且在不引起歧义的情况下，可以省略括号。 有一个特别的参数叫做<code>self</code>。</p></li>
<li><p>新建立一个类别的对象 ClassName.new</p></li>
<li><p><code>Ruby</code>中有继承， 可以重写父类的方法， 如果要增强父类中的方法， 而不是完全替换， 可以用<code>super</code>关键字。</p></li>
<li><p><code>Access Control</code>： 1. 在对象外部定义的函数不能直接由对象来调用 2. 在对象内部定义的函数不能直接被外部调用， 可以将函数变成私有的<code>private: 函数名</code>。</p></li>
<li><p>关于module：</p>

<blockquote><p>module 没有实例
module 没有子类别
module 由module&#8230;end定义</p></blockquote></li>
<li><p><code>::</code>算子会向<code>module</code>查询常数的值， 如果不用这个就要 <code>include</code>。</p></li>
<li><p><code>procedure object</code>程序对象：</p></li>
</ul>


<figure class='code'><figcaption><span>procedure  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">033</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">quux</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">034</span><span class="p">:</span><span class="mi">1</span><span class="o">*</span> <span class="nb">puts</span> <span class="s2">&quot;QUUXQUUX&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">035</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Proc:0x9e1eee4@(irb):33&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">036</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">quux</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="no">QUUXQUUX</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">037</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="nb">p</span><span class="p">)</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">03</span><span class="mi">8</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="nb">puts</span> <span class="s2">&quot;About to call a procedure&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">03</span><span class="mi">9</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="nb">p</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">040</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="nb">puts</span> <span class="s2">&quot;Procedure finished&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">041</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">042</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">run</span> <span class="n">quux</span>
</span><span class='line'><span class="no">About</span> <span class="n">to</span> <span class="n">call</span> <span class="n">a</span> <span class="n">procedure</span>
</span><span class='line'><span class="no">QUUXQUUX</span>
</span><span class='line'><span class="no">Procedure</span> <span class="n">finished</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用<code>trap</code>方法， 我们可以针对任何系统信号指派不同的应对措施。</p>

<figure class='code'><figcaption><span>trap  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">047</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">inthandler</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Press ^C was paused&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Proc:0x9c08614@(irb):47&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">04</span><span class="mi">8</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">trap</span> <span class="s2">&quot;SIGINT&quot;</span><span class="p">,</span> <span class="n">inthandler</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Proc:0x9c86e24@(irb):44&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">04</span><span class="mi">9</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">Press</span> <span class="o">^</span><span class="n">C</span> <span class="n">was</span> <span class="n">paused</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>变量：通过识别标识符就能够区别变量。</li>
</ul>


<table>
<thead>
<tr>
<th>符号   </th>
<th align="right">   意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>$      </td>
<td align="right">   全局变量（globla variable）</td>
</tr>
<tr>
<td>@      </td>
<td align="right">   实例变量（instance ariable）</td>
</tr>
<tr>
<td>[az]或_</td>
<td align="right">   局部变量（local variable）</td>
</tr>
<tr>
<td>[AZ]   </td>
<td align="right">   常量</td>
</tr>
</tbody>
</table>


<p>self 和 nil不能被初始化， 赋值。</p>

<p><strong> 慎重使用全局变量， 可能引发不好纠正的错误
</strong> 全局变量的优点是能够追踪。</p>

<figure class='code'><figcaption><span>global_var  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">trace_var</span> <span class="p">:</span><span class="vg">$x</span><span class="p">,</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;$x is now </span><span class="si">#{</span><span class="vg">$x</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="vg">$x</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="vg">$x</span> <span class="n">is</span> <span class="n">now</span> <span class="mi">5</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://guides.ruby.tw/ruby/globalvars.html">一个特别参数的表格</a></p>

<figure class='code'><figcaption><span>instance_var  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">007</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">InstTest</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">00</span><span class="mi">8</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">set_foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">00</span><span class="mi">9</span><span class="p">:</span><span class="mi">2</span><span class="o">&gt;</span> <span class="vi">@foo</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">010</span><span class="p">:</span><span class="mi">2</span><span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">011</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">set_bar</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">012</span><span class="p">:</span><span class="mi">2</span><span class="o">&gt;</span> <span class="vi">@bar</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">013</span><span class="p">:</span><span class="mi">2</span><span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">014</span><span class="p">:</span><span class="mi">1</span><span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">015</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="no">InstTest</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;InstTest:0x9220ad4&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">016</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span><span class="o">.</span><span class="n">set_foo</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">017</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;InstTest:0x9220ad4 @foo=2&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">01</span><span class="mi">8</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span><span class="o">.</span><span class="n">set_bar</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">01</span><span class="mi">9</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">i</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;InstTest:0x9220ad4 @foo=2, @bar=4&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意： 局部变量在初始化之前并没有nil值。
局部变量作用域： Proc.new {&#8230;} lambda{&#8230;}  loop{&#8230;} def&#8230;end class&#8230;end  module&#8230;end</p></blockquote>

<ul>
<li><p>defined? 是用来检查识别符是否有定义的算子。</p></li>
<li><p><code>rescue</code>救援， <code>fail</code>唤起一个意外， <code>ensure</code>确认。</p></li>
<li><p><code>inspect</code>方法， 传回以合理方式描述对象的字串。to_s 转换为字符串。</p></li>
<li><p><code>initialize</code>方法， 可以接受参数。（有一种弹性初始化的方式，就是传递参数同时赋初值）。</p></li>
<li><p>statement delimiter ： -> <code>;</code>, 跨行用<code>\</code>.</p></li>
<li><p>comment: <code>#</code> Or <code>=begin...=end</code></p></li>
</ul>


<blockquote><p>参考文献：
<a href="http://guides.ruby.tw/ruby/index.html">Ruby使用手册</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『Python3 程序开发指南』 阅读笔记]]></title>
    <link href="http://metooit.github.com/blog/2013/02/08/notes-for-programming-in-python-3/"/>
    <updated>2013-02-08T12:17:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/08/notes-for-programming-in-python-3</id>
    <content type="html"><![CDATA[<h2>数据类型</h2>

<h3>1.1 标识符与关键字：</h3>

<ul>
<li>不要使用预定义标识符对自定义标识符进行命名

<blockquote><p>dir() 函数可以返回对象的属性列表
不带参数是返回<code>python</code>的内置属性列表, 调用方式为  <code>dir(__builtins__)</code>
大写字母引导的是异常名，而其他的是函数名和数据类型名</p></blockquote></li>
<li>关于下滑线的使用：应该避免使用</li>
</ul>


<!-- more -->


<h3>1.2 Integral 类型：</h3>

<p><code>Python</code>提供了两种<code>Integral</code>类型，即int 和 bool。0与<code>false</code>都表示<code>false</code>， 其他任意数和<code>true</code>都表示<code>true</code>。</p>

<h4>1.2.1 整数：</h4>

<ul>
<li>十进制：xxxx</li>
<li>二进制: 0bxxxx</li>
<li>八进制: 0oxxxx</li>
<li>十六进制： 0xxxxx</li>
</ul>


<blockquote><p>数值操作符与函数</p></blockquote>

<table>
<thead>
<tr>
<th></th>
<th> 语法         </th>
<th align="center"> 描述                                              </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> x + y        </td>
<td align="center"> 相加                                              |</td>
</tr>
<tr>
<td></td>
<td> x - y        </td>
<td align="center"> 相减                                              |</td>
</tr>
<tr>
<td></td>
<td> x * y        </td>
<td align="center"> 相乘                                              |</td>
</tr>
<tr>
<td></td>
<td> x / y        </td>
<td align="center"> 相除                                              |</td>
</tr>
<tr>
<td></td>
<td> x // y       </td>
<td align="center"> 舍弃小数部分， 使得结果总为整数 （参见round()）   |</td>
</tr>
<tr>
<td></td>
<td> x % y        </td>
<td align="center"> 取余                                              |</td>
</tr>
<tr>
<td></td>
<td> x ** y       </td>
<td align="center"> 计算x的y次幂， （参见pow()函数）                  |</td>
</tr>
<tr>
<td></td>
<td> abs(x)       </td>
<td align="center"> 取得绝对值                                        |</td>
</tr>
<tr>
<td></td>
<td> divmod(x, y) </td>
<td align="center"> 以二元组形式返回商和余数                          |</td>
</tr>
<tr>
<td></td>
<td> pow(x, y)    </td>
<td align="center"> 同 **                                             |</td>
</tr>
<tr>
<td></td>
<td> pow(x, y, z) </td>
<td align="center"> (x ** y) % z                                      |</td>
</tr>
<tr>
<td></td>
<td> round(x, n)  </td>
<td align="center"> x 四舍五入后的n 位整数                            |</td>
</tr>
</tbody>
</table>


<blockquote><p>整数转换函数</p></blockquote>

<table>
<thead>
<tr>
<th>函数 </th>
<th> 作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>bin(i) </td>
<td> 返回i的二进制表示</td>
</tr>
<tr>
<td>hex(i) </td>
<td> 返回i的十六进制表示</td>
</tr>
<tr>
<td>int(x) </td>
<td> 将x转换为整数对象</td>
</tr>
<tr>
<td>oct(i) </td>
<td> 返回i的八进制表示</td>
</tr>
<tr>
<td>int(s, base) </td>
<td> 可以指定基数</td>
</tr>
</tbody>
</table>


<blockquote><p>逻辑与位操作</p></blockquote>

<p>| ^ &amp; &lt;&lt; >> ~</p>

<h4>1.2.2 布尔型：</h4>

<p>True False 是python的两个内置的布尔型对象。</p>

<h3>1.3 浮点类型：</h3>

<h4>1.3.1 浮点数：</h4>

<h4>1.3.2 复数类型：</h4>

<p>复数的两个部分都以属性名的形式存在，分别为real , imag.</p>

<figure class='code'><figcaption><span>literal  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="o">-</span><span class="mf">89.5</span> <span class="o">+</span> <span class="mf">2.125j</span>
</span><span class='line'><span class="n">z</span><span class="o">.</span><span class="n">real</span><span class="p">(),</span> <span class="n">z</span><span class="o">.</span><span class="n">imag</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>conjugate()</code>函数用于改变虚数部分的符号，共轭。 要使用复数先要导入<code>cmath</code>模块，该函数提供了<code>math</code>函数中大多数三角函数和对数函数的复数版。</p>

<h4>1.3.3 十进制数字：</h4>

<p>decimal模块， 需要是再help()吧。现在没有必要记住那么多的函数，况且我也记不住啊！</p>

<h3>1.4 字符串：</h3>

<p>由于.py文件默认使用UTF-8编码，我们可以在字符串字面值中写入任意的Unicode字符放置在字符串内。例如：</p>

<figure class='code'><figcaption><span>euros  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">euros</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\N{euro sign}\u20AC\U000020AC</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果需要知道字符串中莫个特定字符的Unicode字元，可以使用内置的<code>ord()</code>函数。</p>

<figure class='code'><figcaption><span>ord  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">ord</span><span class="p">(</span><span class="n">euros</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="nb">hex</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">euros</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>类似的也可以用内置的chr()函数将有效字元的任意整数转换成相应的Unicode字符。</p>

<h4>1.4.1 比较字符串：</h4>

<h4>1.4.2 字符串的分片与步距：</h4>

<h4>1.4.3 字符串操作与方法：</h4>

<p>参见help(str)。
如果我们需要在某个字符串中找到另一个字符串所在的位置，有两种方法：
* str.index(), 该方法返回字符串的索引位置，或者在失败时产生一个<code>ValueErr</code>异常。
* str.find(), 该方法返回字符产的所以位置， 或者在失败时返回-1</p>

<h4>1.4.4 使用<code>str.format()</code>方法进行字符串的格式化：</h4>

<ul>
<li>字段名：</li>
</ul>


<figure class='code'><figcaption><span>format  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&quot;{who} turned {age} this year.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">who</span><span class="o">=</span><span class="s">&quot;she&quot;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">88</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;The {who} was {0} last week.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">who</span><span class="o">=</span><span class="s">&quot;boy&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外， 字段名可以引用集合数据类型，比如列表：</p>

<figure class='code'><figcaption><span>format2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">stock</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;paper&quot;</span><span class="p">,</span> <span class="s">&quot;envelopes&quot;</span><span class="p">,</span> <span class="s">&quot;notepads&quot;</span><span class="p">,</span> <span class="s">&quot;paper clips&quot;</span><span class="p">]</span>
</span><span class='line'><span class="s">&quot;We have {0[1]} and {0[2]} in stock.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">stock</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中， 0是引用的位置参数， {0[1]}代表的是sotck参数的第二个数据项。
python3.1 开始， 忽略字段名成为可能。</p>

<figure class='code'><figcaption><span>format3  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">element</span> <span class="o">=</span> <span class="s">&quot;Sliver&quot;</span>
</span><span class='line'><span class="n">number</span> <span class="o">=</span> <span class="mi">47</span>
</span><span class='line'><span class="s">&quot;Element {number} is {element}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数<code>locals()</code>返回还在作用范围内的局部变量，**用于映射拆分。
* 转换：</p>

<blockquote><p>s 用于强制使用字符串形式
r 用于强制使用表象形式
a 用于强制使用表象形式，仅限于ASCII字符。
* 格式规约：
这个以后再看吧……</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsGuides 阅读笔记]]></title>
    <link href="http://metooit.github.com/blog/2013/02/08/notes-for-reading-the-railsguides/"/>
    <updated>2013-02-08T11:58:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/08/notes-for-reading-the-railsguides</id>
    <content type="html"><![CDATA[<p><a href="http://guides.ruby.tw/rails3/getting_started.html">RailsGuides</a>是Ruby on Rails 官方网站上的一个tutorial， 下面是我通过阅读学习所做的一些笔记。</p>

<hr />

<p>刚刚准备信心满满地开始看得时候，打开网页的第一条是<code>前提条件</code>：好吧，<code>Rails</code>是一套<code>Ruby</code>的web框架，如果对<code>Ruby</code>一无所知就学习<code>Rails</code>，学习曲线会很陡峭。 于是，我决定还是先看一看它提供的文档。</p>

<hr />

<p>继续在这里写吧，昨天看了<code>Ruby</code>的一个教程，初步了解了一下<code>Ruby</code>语言本身， 现在继续看<code>Rails</code>。</p>

<hr />

<h2>1. 什么是<code>Rails</code>：</h2>

<p><code>Ruby</code>的网络开发框架。<code>Rails</code>的原则是：
* DRY
* Convention Over Configuration
* REST</p>

<!-- more -->


<h3>1.1 MVC架构：</h3>

<ul>
<li>Modles: 应用程序的资料和操作资料的逻辑。</li>
<li>Views: 应用程序的使用者界面。</li>
<li>Controllers: M和V之间的粘着剂</li>
</ul>


<h3>1.2 <code>Rails</code>元件：</h3>

<p><a href="http://guides.ruby.tw/rails3/getting_started.html">参见</a></p>

<h3>1.3 REST</h3>

<ul>
<li>在系统部件之间实现资源状态的转换</li>
<li>使用URLs来代表资源（Resourses）</li>
</ul>


<h2>2. 建立Rails项目：</h2>

<ul>
<li>rails new <code>项目名称</code></li>
<li>cd <code>项目名称</code></li>
</ul>


<blockquote><p>注： 每个目录以及文件的作用参见<a href="http://guides.ruby.tw/rails3/getting_started.html">这里</a></p></blockquote>

<ul>
<li>安装必须的<code>gems</code>：这里是一个简单的项目，所以直接 bundle install</li>
<li>设定数据库： 在这个目录下-> <code>config/database.yml</code></li>
<li>建立数据库： rake db:create</li>
</ul>


<blockquote><p>注：<code>rake</code>是<code>Rails</code>中广泛运用的通用型命令行工具。查看所有可用的命令可以<code>rake -T</code>。</p>

<p>这里要记录一个遇到的问题：
我在创建数据库的时候遇到了一个问题：“could not find a javascript runtime”
那么肯定是没有<code>javascript</code>的运行环境了，安装了一个<code>Node.js</code>
安装过程参考<a href="https://github.com/joyent/node">项目主页</a></p></blockquote>

<h2>3. Hello Rails</h2>

<h3>3.1 启动<code>Rails</code>服务器：</h3>

<p><code>rails server</code>启动<code>Mongrel(WEBrick)</code>服务器，当然也可以用其他服务器。</p>

<blockquote><p>浏览器访问 <code>http://localhost:3000</code>,可以看到rails预设的网页。
<img src="http://metooit.github.com/pictures/rails-server-start.png" width="800" height="600" title="rails-server-start rails-server-start" >
关闭服务器的话使用<code>Ctrl-c</code>
如果是production mode的话，修改任何档案都必须重启服务器才会有效果。</p></blockquote>

<h3>3.2 Say &#8220;hello&#8221; to Rails</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails generate controller home index</span></code></pre></td></tr></table></div></figure>


<p>在app/views/home/index.html.erb中加入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1>Hello Rails&lt;/h1></span></code></pre></td></tr></table></div></figure>


<p>下面设定首页：
* 删除预设的档案：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm public/index.html</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后， 告诉<code>Rails</code>我真正的首页在哪里：编辑config/routes.rb。</li>
</ul>


<p><img src="http://metooit.github.com/pictures/hello-rails.png" title="hello-rails" ></p>

<h2>4. 使用scaffolding快速上手：</h2>

<h2>5. 建立<code>Resource</code>:</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails generate scaffold Post name:string title:string content:text</span></code></pre></td></tr></table></div></figure>


<p><img src="http://metooit.github.com/pictures/scaffold-form.png" title="scaffold-form scaffold-form" ></p>

<ul>
<li>然后执行Migration</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake db:migration</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==  CreatePosts: migrating ====================================================
</span><span class='line'>-- create_table(:posts)
</span><span class='line'>   -> 0.0018s
</span><span class='line'>==  CreatePosts: migrated (0.0019s) ===========================================</span></code></pre></td></tr></table></div></figure>


<ul>
<li>增加超链接： 利用官方的<code>link_to</code>方法来增加一个文章列表的超链接。</li>
</ul>


<p><img src="http://metooit.github.com/pictures/link_to.png" title="link_to" ></p>

<p><img src="http://metooit.github.com/pictures/listing-posts.png" title="listing-posts" ></p>

<ul>
<li>新增验证功能： 在<code>app/modles/post.rb</code>中加入如下代码增加了验证功能：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Post &lt; ActiveRecord::Base
</span><span class='line'>  attr_accessible :content, :name, :title
</span><span class='line'>
</span><span class='line'>  validates :name,  :presence => true
</span><span class='line'>  validates :title, :presence => true,
</span><span class='line'>                    :length   => { :minimum => 5 }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><img src="http://metooit.github.com/pictures/validation.png" title="validation" ></p>

<ul>
<li>使用Console: console可以在<code>terminal</code>中执行代码。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails console</span></code></pre></td></tr></table></div></figure>


<ul>
<li>列出所有文章：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def index
</span><span class='line'>    @posts = Post.all
</span><span class='line'>
</span><span class='line'>    respond_to do |format|
</span><span class='line'>      format.html # index.html.erb
</span><span class='line'>      format.json { render json: @posts }
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>其中的<code>@posts</code>在app/views/posts/index.html中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1>Listing posts&lt;/h1>
</span><span class='line'>&lt;table>
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>String&lt;/th>
</span><span class='line'>    &lt;th>Title&lt;/th>
</span><span class='line'>    &lt;th>String&lt;/th>
</span><span class='line'>    &lt;th>Content&lt;/th>
</span><span class='line'>    &lt;th>Text&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>
</span><span class='line'>&lt;% @posts.each do |post| %>
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;td>&lt;%= post.name %>&lt;/td>
</span><span class='line'>    &lt;td>&lt;%= post.string %>&lt;/td>
</span><span class='line'>    &lt;td>&lt;%= post.title %>&lt;/td>
</span><span class='line'>    &lt;td>&lt;%= post.string %>&lt;/td>
</span><span class='line'>    &lt;td>&lt;%= post.content %>&lt;/td>
</span><span class='line'>    &lt;td>&lt;%= post.text %>&lt;/td>
</span><span class='line'>    &lt;td>&lt;%= link_to 'Show', post %>&lt;/td>
</span><span class='line'>    &lt;td>&lt;%= link_to 'Edit', edit_post_path(post) %>&lt;/td>
</span><span class='line'>    &lt;td>&lt;%= link_to 'Destroy', post, method: :delete, data: { confirm: 'Are you sure?' } %>&lt;/td>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;% end %>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>&lt;br />
</span><span class='line'>
</span><span class='line'>&lt;%= link_to 'New Post', new_post_path %></span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>定制Layout的版型：
<code>layouts</code>使用来包裹<code>views</code>的。app/views/layouts/application.html.erb定制输出的样式。</p></li>
<li><p>新建文档：：
app/views/posts/new.html.erb</p></li>
</ul>


<p>&lt;%= render &#8216;form&#8217; =%>是第一次遇到<code>partials</code>。<code>partials</code>是一个HTML和Ruby的代码片段。可以在其他地方重复使用。</p>

<p>表单内容在 views/posts/<em>form.html.erb</em> 档案中。</p>

<ul>
<li>好吧， 下面是一些功能的实现， 我需要好好静下心来看一看。</li>
</ul>


<p><a href="http://guides.rubyonrails.org/getting_started.html">RailsGuides English</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[想对算法做点什么]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/something-i-want-to-write-about-algorithms/"/>
    <updated>2013-02-07T20:23:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/something-i-want-to-write-about-algorithms</id>
    <content type="html"><![CDATA[<p>今天的收获不小，其一就是收获了一种思维模式<code>if...then...</code>，也就是“想要做什么……那么要……”，以前我总是想要做什么、做什么，可是呢，行动力不够就不能真正的去做些什么，所以我觉得是到了改变的时候了。</p>

<hr />

<p>最近在看<a href="http://book.douban.com/subject/1885170/">《算法导论》</a>，看算法的目的是为了进一步学习好编程，虽然有时候看得有点头晕，但是我觉得收获还是很大的。光看书肯定是不行的，所以必须用算法做点什么才能够更有趣吧，所以我就有了这个想法 『用算法做点什么呢』。</p>

<hr />

<p>（未完待续……）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is functional programming?]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/what-is-functional-programming/"/>
    <updated>2013-02-07T16:28:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/what-is-functional-programming</id>
    <content type="html"><![CDATA[<p>最近看到频率很高的一个词叫做<code>函数式编程</code>，《黑客与画家》中作者对于『Lisp』的极力推崇让人抑制不住去了解一下<code>函数式编程</code>，于是今天再次从阮一峰Blog上看到函数氏编程的时候，我觉得确实应该了解一下这种很神秘很高深的领域了。想一想忽然又觉得很吓人了。</p>

<!-- more -->


<h3>阮一峰&#8212;><a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html">函数式编程初探</a></h3>

<h4>函数式编程的特点</h4>

<ul>
<li>函数可以作为参数， 赋值给其他变量或者作为另一个函数的参数</li>
<li>只用表达式， 不用语句</li>
<li>所有函数保持独立， 功能仅为返回一个值， 不会改变全局变量和系统变量</li>
<li>返回值不依赖外部变量或者状态， 之一来与输入参数</li>
</ul>


<h4>函数式编程的意义</h4>

<ul>
<li>代码简洁，开发快速</li>
<li>代码易于理解</li>
<li>代码管理方便</li>
<li>易于并发编程</li>
<li>可以进行热升级</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[继续学习Ruby]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/continue-learning-ruby/"/>
    <updated>2013-02-07T14:39:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/continue-learning-ruby</id>
    <content type="html"><![CDATA[<p>今天翻看了一下阳志平的网络日志，偶然发现了他很推崇<code>Ruby</code>，然后我就发现了这篇文章<a href="http://www.yangzhiping.com/tech/ruby-worldmap-1.html">Ruby 闲话一二</a>, 看后了解了一下<code>Ruby</code>的处境和氛围， 就像《黑客与画家》里面说的， 编程语言很重要！ <code>Ruby</code> 是优美的，简单的，符合K.I.S.S原则，那我就觉得<code>Ruby</code>是一门好的语言。所以我想要了解它。</p>

<hr />

<p>如何学习一门编程语言呢？ 这个问题或许是很多新手程序员的心声，当然我也有过曾经的疑问，找到一种快速学会编程语言的方法可能是很多人想要的，<a href="http://www.yangzhiping.com/tech/learn-program-psychology.html">在学习区刻意练习</a>或许不是最聪明的方法，但是可能是真正想要学会编程的人应该有的一种执着和毅力，阳老师的这篇文章使我受益匪浅，如果想要去做好一件事情，那就用百分之百的热情和努力去做吧！相信自己能够成功的！我觉得这篇文章好还有另外的原因，就是觉得这篇文章说的话击中了我的弱点：</p>

<blockquote><ul>
<li>提升行动力 : 把自己的思维模式改成 if &#8230; then &#8230;</li>
<li>编程是个人行为 ： 不要忙于社交， 聊天， 发帖， 下载盗版学习资源， 争议语言好坏等等
真的， 如果我想学会<code>Ruby</code>，那就从一点以滴开始努力吧！</li>
</ul>
</blockquote>

<hr />

<p>昨天我写了关于<code>Ruby</code>的<a href="http://metooit.github.com/blog/2013/02/06/get-to-know-ruby/">Get to know Ruby</a>,今天才发现了阳老师的这篇文章：<a href="http://www.yangzhiping.com/tech/why-ruby-text.html">为什么是<code>Ruby</code></a>, 发现比我写的要简练有力的多，同时覆盖的面也要广的多。</p>

<hr />

<p>好了，关于文章的收获就是这些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get to know Ruby]]></title>
    <link href="http://metooit.github.com/blog/2013/02/06/get-to-know-ruby/"/>
    <updated>2013-02-06T20:58:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/06/get-to-know-ruby</id>
    <content type="html"><![CDATA[<p>这几天通过对<code>octopress</code>的了解，越来越觉得<code>Ruby</code>是一门很优美的语言，我虽然还没有下定决心学习它，但是要初步了解一下还是可以的，多看看总是不会有坏处的 ：-）</p>

<hr />

<h3>什么是Ruby?</h3>

<p><a href="http://www.ruby-lang.org/zh_cn/">Ruby</a>的官方网站上是这样说的：Ruby是一种跨平台、面向对象、动态的编程语言。简单性， 一致性是<code>Ruby</code>推崇的思想。</p>

<h4>Ruby思想：</h4>

<p><code>Ruby</code>的发明者是一个日本人，<a href="http://www.rubyist.net/~matz/">松本行弘</a>.我看了他说过的话，<code>Ruby</code>的思想就是：自然，表面简单内部却很复杂。</p>

<h4>Ruby成长：</h4>

<p>看过<code>Ruby</code>的成长记，我不得不说这是开源运动的一个胜利。开源才能更自由，有这么多优秀的软件架构用<code>Ruby</code>写成，<code>Ruby</code>也会越来越受欢迎吧！</p>

<h4>面向对象：</h4>

<p><code>Ruby</code>从最开始就是要：比<code>Perl</code>更加强大，比<code>Python</code>更加面向对象。<code>Ruby</code>中所有东西都是对象。</p>

<figure class='code'><figcaption><span>ruby-example1     </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">print</span> <span class="s2">&quot;I love Ruby!&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>据说这一句就说明了<code>Ruby</code>是一种纯『面向对象』的语言，这么说是要纯到什么程度呢？<code>Ruby</code>让所有类型都可以赋予方法和产生实例变量。具体的以后再好好体会吧！</p>

<h4>灵活性：</h4>

<p><code>Ruby</code>允许用户改变其核心，它试着不去妨碍程序员。比如，你可以定义如下函数以使用<code>plus</code>而不是<code>+</code>：</p>

<figure class='code'><figcaption><span>ruby-example2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Numberic</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">plus</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">+</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Blocks 一个独特而强大的特性：</h4>

<p>程序员可以给任意一个函数添加一个密封（closure）来表述这个函数如何工作。密封也被叫做代码块。这个特性也是<code>Lisp</code>文化融入<code>Ruby</code>的一个体现：</p>

<figure class='code'><figcaption><span>ruby-example1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">search_engine</span> <span class="o">=</span>
</span><span class='line'>    <span class="sx">%w[Google Yahoo MSN]</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">engine</span><span class="o">|</span>
</span><span class='line'>        <span class="s2">&quot;http://www.&quot;</span> <span class="o">+</span> <span class="n">engine</span><span class="o">.</span><span class="n">downcase</span> <span class="o">+</span> <span class="s2">&quot;.com&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码块在do&#8230;end 结构中。map函数将代码块应用一个词的列表中。</p>

<h4><code>Ruby</code>“有意”只提供单继承：</h4>

<p>这里这个“有意”是个什么意思呢？<code>Ruby</code>拥有模块，模块把许多方法放在一个类别里。类可以混合一个模块，得到这个模块提供的所有方法。比如所有提供<code>each</code>方法的类可以混合<code>Enumerable</code>模块，来调用这个模块所提供的所有方法。</p>

<figure class='code'><figcaption><span>ruby-example1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyArray</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>Ruby</code>的面貌：</h4>

<p><code>Ruby</code>很少使用符号并且倾向于使用英文单词作为关键字。
* var 可以是局部变量
* @var 是一个实例变量
* $var 是一个全局变量
这些信号让程序员看清楚每一个变量的角色，增强了程序的可读性。</p>

<h4>更多特性：</h4>

<ul>
<li>异常处理</li>
<li>有一个真正表示清扫的垃圾收集器对象</li>
<li>C 扩展方便</li>
<li>动态调用库</li>
<li>可提供不依赖操作系统的线程</li>
<li>轻便
&#8230;&#8230;</li>
</ul>


<hr />

<p>阅读完<code>Ruby</code>的一些特性之后，我又看了一下<a href="http://www.ruby-lang.org/zh_cn/documentation/quickstart/">20分钟体验<code>Ruby</code></a>,感觉很简单，所以也没有必要多说了。</p>

<hr />

<p>在<a href="http://ruby-china.org">Ruby-China</a>逛了一圈之后，作为一个新手，我决定看一看它的<a href="http://ruby-china.org/wiki">wiki</a>看一看有什么好的学习资源，简单翻看之后还真是收获不小。</p>

<ul>
<li>首先，<a href="http://saito.im/slide/ruby-new.html"><code>Ruby</code>语言新手教程</a>让我大体上体验了一下<code>Ruby</code>，这种幻灯片式的tutorial让人感觉简单明了，虽然不是很深入，我还时觉得这个是一个很好的学习资源。</li>
<li>然后，看到了<a href="http://ruby-china.org/wiki/start_leaning_rails">几篇文章</a>，关于Ruby， Ruby on rails, 先学习哪个呢？具体到每个人可能并不一样吧，所以我就先学习一下<code>Ruby</code>的语法，在看的过程中对比<code>Python</code>，然后立刻就学着用rails 建立一些小项目吧。</li>
<li>最后，算是一点意外的惊喜吧，我前两天写<code>Git</code>的两篇文章，其实这里就有一些关于<code>Git</code>学习的资料。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[继续学习 Git]]></title>
    <link href="http://metooit.github.com/blog/2013/02/05/dive-into-git/"/>
    <updated>2013-02-05T00:46:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/05/dive-into-git</id>
    <content type="html"><![CDATA[<p>我可不想做标题党，我当时可是真的想要认认真真地读一遍英文文档，然后好好总结一下，所以才斗胆写了一句“深入学习 Git”。</p>

<hr />

<p>直到我发现了这个<a href="http://rogerdudler.github.com/git-guide/index.zh.html">Git简易指南</a></p>

<hr />

<p>我忽然觉得整个世界都美好了，居然写的这么清晰易懂（当然也有中文的因素在里面），但是这篇文档无论从结构还是排版配图，都是很养眼的啊，所以我也就没有必要劳神费思在想去dive了，我觉得只要够用就好，所以就先好好的看一下这篇文档好了。我把文章的名字改成<code>继续学习 Git</code>了。囧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习 Git]]></title>
    <link href="http://metooit.github.com/blog/2013/02/04/learning-git/"/>
    <updated>2013-02-04T12:59:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/04/learning-git</id>
    <content type="html"><![CDATA[<p>寒假里的日子，有点让人觉得不知到要做什么，我很怕自己浪费时间，所以觉得要学会自己找事情做，然后我觉得有必要认真的学习一下git。Google了一下，找到了这个<a href="http://learn.github.com/p/intro.html">git官方学习指南</a>，我就照着这个先看一看git吧。：-）</p>

<hr />

<h3>关于Git</h3>

<h4>首先，看一下我的git版本吧：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git --version</span></code></pre></td></tr></table></div></figure>


<p>git version 1.7.10.4
这应该是最新的版本了吧。</p>

<h4>然后，如何取得帮助呢？</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --help
</span><span class='line'>$ git help log</span></code></pre></td></tr></table></div></figure>


<p><img class="git" src="http://metooit.github.com/pictures/git-lang.png" title="git-lang" ></p>

<h4>Git的特点：</h4>

<ul>
<li>几乎可以离线工作，并且很快（相对与SVN来说）</li>
<li>安装体积小</li>
<li>基于snapshot（快照），而不是changesets
<img class="git" src="http://metooit.github.com/pictures/snapshots.png" title="snapshots" ></li>
<li>如果要更加深入的了解git，请看<a href="http://eagain.net/articles/git-for-computer-scientists/">Git for Computer Scitentists</a></li>
<li>分支的代价更小，合并方便</li>
</ul>


<hr />

<h3>Git的初始化设置</h3>

<p>第一次使用Git时，首先要学会设置好一些东西，比如名字和邮件地址。设置的命令是<code>git config</code>,如果加上<code>--global</code>,这个命令会将设置信息存储在<code>~/.gitconfig</code>。</p>

<figure class='code'><figcaption><span>git-config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git -config --global user.name "your name here"
</span><span class='line'>$ git -config --global user.email "your email here"</span></code></pre></td></tr></table></div></figure>


<p>git也可以设定用户默认的文本编辑器，比如emacs</p>

<figure class='code'><figcaption><span>git-editor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git -config --global core.editor 'emacs'</span></code></pre></td></tr></table></div></figure>


<p>可以运行以下命令来查看当前的设置情况：</p>

<figure class='code'><figcaption><span>git-check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config user.name</span></code></pre></td></tr></table></div></figure>


<p>或者呢，你可以自己查看，git首先会读取<code>/etc/gitconfig</code>,然后再读取<code>~/.gitconfig</code>，最后是<code>.git/config</code>。</p>

<hr />

<h3>初始化新的repo</h3>

<p>要初始化一个repo，在相应目录中使用<code>git init</code>。</p>

<figure class='code'><figcaption><span>repo-init </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir myproject
</span><span class='line'>$ cd myproject
</span><span class='line'>$ git init</span></code></pre></td></tr></table></div></figure>


<p>现在我们建立了一个新的code repo，在这个目录中拥有自己的<code>.git</code>目录，有一些自己的设置。
然后我们可以用</p>

<figure class='code'><figcaption><span>add-commit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "initial commit"</span></code></pre></td></tr></table></div></figure>


<p>现在我们拥有了一个新的project，其中有一个commit，如何查看这个项目的状态呢？</p>

<figure class='code'><figcaption><span>git-log </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>克隆一个git repo</h3>

<p>git可以和多个端口链接，其中最常使用的是<code>ssh</code>、<code>http</code>、<code>git protocol</code>。其格式是 <code>git clone [url]</code>, 其中的<code>url</code>的格式是<code>git://(hostname)/(path).git</code>。</p>

<figure class='code'><figcaption><span>git-clone </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/schacon/mungit.git
</span><span class='line'>$ cd mungit
</span><span class='line'>$ ls</span></code></pre></td></tr></table></div></figure>


<p>同样，在很多的情况下，你也可以使用http来clone：</p>

<figure class='code'><figcaption><span>git-clone </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone http://github.com/schacon/mungit.git</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>通常的工作流程</h3>

<p>现在该设置的都设置好了，项目也会建了，然后做什么呢？
通常的工作流程是：
* 修改文件
* 看看你改变了什么
* 阶段性的看看你希望commit的改变
* commit你的阶段性成果
* 重新来过……
最简单的工作流程是：
* 修改文件
* commit你的改变
* 重复……
最简单的example：
Edit files, <code>git commit -a</code>, repeat.</p>

<p>用到了<code>staging area</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status</span></code></pre></td></tr></table></div></figure>


<p>然后我们可以看到一个<code>changed but not updated</code>区域，这里的文件就是<code>unstaged</code>的文件。你必须stage一个文件，然后再commit。</p>

<p><img class="git" src="http://metooit.github.com/pictures/localoperations.png" title="localoperations" ></p>

<p>Git用户使用<code>git add</code>命令来既tracking文件也stage changes。
如果在staging阶段你不仅想看到什么文件被修改了或者staged，并且比较文件可以使用<code>git diff</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 快捷键备忘]]></title>
    <link href="http://metooit.github.com/blog/2013/02/01/vim-tips-to-remember/"/>
    <updated>2013-02-01T19:25:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/01/vim-tips-to-remember</id>
    <content type="html"><![CDATA[<p>Vim 是我最最常用的文本编辑器， 我想要在这里记录一下<code>Vim</code>的快捷键，我会不定期地加入我经常使用或者新发现的快捷键， 没办法， 好记性不如烂笔头， 希望我能在不断的使用和温习中逐渐越来越熟练吧 :)</p>

<h1>插件篇</h1>

<h2>NERDTree</h2>

<ul>
<li>快速启动NERDTree:               <code>leader</code>+<code>e</code></li>
<li>显示与隐藏NERDTree：            <code>Ctrl</code>+<code>E</code></li>
<li>NERDTree查找模式：              <code>leader</code>+<code>e</code> 或者 <code>leader</code>+<code>nt</code></li>
</ul>


<hr />

<h2>NERDCommenter</h2>

<ul>
<li><code>leader</code>+<code>cc</code>:                  仅注释。（普通模式下是注释当前行，可视模式下是注释选中的文字）</li>
<li><code>leader</code>+<code>c</code>+<code>Space</code>:           注释或者取消注释。</li>
<li><code>leader</code>+&#8217;cs&#8217;:                  性感的注释。
更多详细的内容在文档中，<code>help NERDCommenter</code></li>
</ul>


<hr />

<h2>EasyMotion</h2>

<ul>
<li>快速启动按键：                <code>leader</code>+<code>leader</code></li>
<li>词间快速移动：                <code>leader</code>+<code>leader</code>+<code>w</code></li>
<li>行间快速移动：                <code>leader</code>+<code>leader</code>+<code>j</code></li>
</ul>


<hr />

<h2>Ctags</h2>

<ul>
<li>快速启动按键：                <code>leader</code>+<code>tt</code></li>
<li>快速定位到tag：               <code>Ctrl</code>+<code>]</code></li>
</ul>


<hr />

<h1>技巧篇：</h1>

<ul>
<li>不退出<code>vim</code>进入<code>shell</code>，使用<code>:shell</code>，工作结束后，再用命令<code>exit</code>回到<code>vim</code>。</li>
<li>直接再<code>vim</code>中运行命令<code>:!*comand*</code>, 同时可以结合使用<code>:r</code>来将运行命令的结果插入到<code>vim</code>中。</li>
<li>大小写转换可以用<code>shift+~</code></li>
<li><p><code>Ctrl</code>:</p>

<pre><code>  ** `Ctrl+u` 向前翻半屏
  ** `Ctrl+d` 向后翻半屏
  ** `Ctrl+f` 向后翻一屏
  ** `Ctrl+b` 向前翻一屏
  ** `Ctrl+u` 删除输入模式下输入的文本
</code></pre></li>
<li><p><code>nz``&lt;Enter&gt;</code>将第n行滚至屏幕顶部</p></li>
<li><code>R</code>替换当前字符至其后的字符，一直到按下<code>&lt;ESC&gt;</code>键。</li>
<li><code>S</code>删除指定数目的行，并以所输入的文本替代之。</li>
<li><code>/patten</code> 向文件尾部搜索</li>
<li><code>?patten</code> 向文件首部搜索</li>
<li><code>N</code>反方向搜索</li>
<li><code>s/word1/word2/g</code> 当前行中word1用word2代替</li>
<li><code>n1,n2s/word1/word2/g</code> n1到n2的所有行中的word1用word2代替</li>
<li><code>g/word1/s//word2/g</code> 全文替换</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Cheat Sheet]]></title>
    <link href="http://metooit.github.com/blog/2013/02/01/markdown-cheat-sheet/"/>
    <updated>2013-02-01T07:37:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/01/markdown-cheat-sheet</id>
    <content type="html"><![CDATA[<p>大早上一起来忽然想起来要解决一点问题，然后就求助google，结果问题没有解决，却解决了我另一件烦心的事儿，那就是<code>Markdown</code>的语法问题，本来就很在意写博客的格式，但是不会<code>Markdown</code>的语法，我不会排版啊，汗……</p>

<!-- more -->


<p>偶然间发现了<code>github</code>上的一个项目叫做<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">markdown-here</a>写得很简洁，以后可以打印一份来参考，这里呢，为了练习一下<code>Markdown</code>的语法，我就不复制粘贴了，直接在这里打一份好了。就当是<code>Markdown</code>的练习了。</p>

<p>Tue Feb 12 16:54:10 CST 2013
好吧， 我打上这个时间是想说： 今天我又发现了一个<code>Markdown-Cheatsheet</code>, <a href="http://daringfireball.net/projects/markdown/syntax">here is the</a></p>

<h1>Headers</h1>

<hr />

<figure class='code'><figcaption><span>headers</span><a href='https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet'>Markdown-Cheatsheet </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># H1
</span><span class='line'>## H2
</span><span class='line'>### H3
</span><span class='line'>#### H4
</span><span class='line'>##### H5
</span><span class='line'>###### H6
</span><span class='line'>
</span><span class='line'>或者，你可以选择underline-style来标记H1和H2
</span><span class='line'>
</span><span class='line'>Alt-H1
</span><span class='line'>======
</span><span class='line'>
</span><span class='line'>Alt-H2
</span><span class='line'>------</span></code></pre></td></tr></table></div></figure>


<h1>H1</h1>

<h2>H2</h2>

<h3>H3</h3>

<h4>H4</h4>

<h5>H5</h5>

<h6>H6</h6>

<p>或者，你可以选择underline-style来标记H1和H2</p>

<h1>Alt-H1</h1>

<h2>Alt-H2</h2>

<h1>Emphasis</h1>

<hr />

<figure class='code'><figcaption><span>emphasis </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Emphasis, aka italics, with *asterisks* or _underscores_.
</span><span class='line'>Strong emphasis, aka bold, with **asterisks** or __underscores__
</span><span class='line'>Combined emphasis with **asterisks and _underscores_**.
</span><span class='line'>Strikethrough uses two tildes. ~~Scratch this.~~</span></code></pre></td></tr></table></div></figure>


<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong></p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<hr />

<h1>Lists</h1>

<figure class='code'><figcaption><span>lists </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. First ordered list item
</span><span class='line'>2. Another item
</span><span class='line'>   * Unordered sub-list
</span><span class='line'>1. Actual numbers don't matter, just that it's a number
</span><span class='line'>   1. Ordered sub-list
</span><span class='line'>4. And another itme.
</span><span class='line'>
</span><span class='line'>    Some text that should be alignede with the above item.
</span><span class='line'>
</span><span class='line'>* Undered list can use asterisks
</span><span class='line'>- Or minuses
</span><span class='line'>+ Or pluses</span></code></pre></td></tr></table></div></figure>


<ol>
<li>First ordered list item</li>
<li>Another item

<ul>
<li>Unordered sub-list</li>
</ul>
</li>
<li>Actual numbers don&#8217;t matter, just that it&#8217;s a number

<ol>
<li>Ordered sub-list</li>
</ol>
</li>
<li><p>And another itme.</p>

<p> Some text that should be alignede with the above item.</p></li>
<li><p>Undered list can use asterisks</p></li>
<li>Or minuses</li>
<li>Or pluses</li>
</ol>


<hr />

<h1>Links</h1>

<figure class='code'><figcaption><span>links </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I'm an inline-style link](https://www.google.com)
</span><span class='line'>[I'm a reference-style link][Arbitrary case-insensitive reference text]
</span><span class='line'>[You can use numbers for reference-style link definitions][1]
</span><span class='line'>Or leave it empty and use the [link text itself][]
</span><span class='line'>Some tex to show that the reference links can follow later.
</span><span class='line'>
</span><span class='line'>[arbitrary case insensive refeence text]: https://www.mozilla.org
</span><span class='line'>[1]: http://slashdot.org
</span><span class='line'>[link text itself]: http://www.reddit.com</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.google.com">I&#8217;m an inline-style link</a></p>

<p>[I&#8217;m a reference-style link][Arbitrary case-insensitive reference text]</p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a></p>

<p>Some tex to show that the reference links can follow later.</p>

<hr />

<h1>Images</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Here is our logo(hover to see the title text):
</span><span class='line'>
</span><span class='line'>Inline-style:
</span><span class='line'>![alt-text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1)
</span><span class='line'>
</span><span class='line'>Reference-style:
</span><span class='line'>![alt-text][logo]
</span><span class='line'>
</span><span class='line'>[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"</span></code></pre></td></tr></table></div></figure>


<p>Here is our logo(hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" title="Logo Title Text 1" alt="alt-text" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" title="Logo Title Text 2" alt="alt-text" /></p>

<hr />

<h1>Code and syntax highlighting</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Inline `code` has `back-ticks around` it</span></code></pre></td></tr></table></div></figure>


<p>Inline <code>code</code> has <code>back-ticks around</code> it</p>

<p>Blocks of code are either fenced by lines with three back-ticks &#8220;&#8220;` , or are indented with four space.</p>

<pre><code>```javascript
var s = "JavaScript syntax highlighting";
alert(s);
```
```python
s = "python syntax hightlighting"
print s
```

```
No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;
```
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="s2">&quot;JavaScript syntax highlighting&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&quot;python syntax hightlighting&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">No</span> <span class="n">language</span> <span class="n">indicated</span><span class="p">,</span> <span class="n">so</span> <span class="n">no</span> <span class="n">syntax</span> <span class="n">highlighting</span><span class="o">.</span>
</span><span class='line'><span class="n">But</span> <span class="n">let</span><span class="s">&#39;s throw in a &lt;b&gt;tag&lt;/b&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h1>Tables</h1>

<figure class='code'><figcaption><span>tables </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Colons can be used to align columns.
</span><span class='line'>
</span><span class='line'>| Tables        | Are           | Coo l |
</span><span class='line'>| ------------- |:-------------:| -----:|
</span><span class='line'>| col 3 is      | right-aligned | $1600 |
</span><span class='line'>| col 2 is      | centered      |   $12 |
</span><span class='line'>| zebra stripes | are neat      |    $1 |
</span><span class='line'>
</span><span class='line'>The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.
</span><span class='line'>
</span><span class='line'>Markdown | Less | Pretty
</span><span class='line'>--- | --- | ---
</span><span class='line'>*Still* | `renders` | **nicely**
</span><span class='line'>1 | 2 | 3</span></code></pre></td></tr></table></div></figure>


<p>Colons can be used to align columns.</p>

<table>
<thead>
<tr>
<th></th>
<th> Tables        </th>
<th align="center"> Are           </th>
<th align="right"> Coo l </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> col 3 is      </td>
<td align="center"> right-aligned </td>
<td align="right"> $1600 |</td>
</tr>
<tr>
<td></td>
<td> col 2 is      </td>
<td align="center"> centered      </td>
<td align="right">   $12 |</td>
</tr>
<tr>
<td></td>
<td> zebra stripes </td>
<td align="center"> are neat      </td>
<td align="right">    $1 |</td>
</tr>
</tbody>
</table>


<p>The outer pipes (|) are optional, and you don&#8217;t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
<thead>
<tr>
<th>Markdown </th>
<th> Less </th>
<th> Pretty</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Still</em> </td>
<td> <code>renders</code> </td>
<td> <strong>nicely</strong></td>
</tr>
<tr>
<td>1 </td>
<td> 2 </td>
<td> 3</td>
</tr>
</tbody>
</table>


<hr />

<h1>Blockquotes</h1>

<figure class='code'><figcaption><span>blockquotes </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>Blockquotes are very handy in email to emulate reply text.
</span><span class='line'>>This line is part of the same quote.
</span><span class='line'>
</span><span class='line'>Quote break
</span><span class='line'>
</span><span class='line'>>This is a very long line . This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p></blockquote>

<p>Quote break</p>

<p>This is a very long line . This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .</p>

<hr />

<h1>Inline HTML</h1>

<p>You can also use raw HTML in your <code>Markdown</code>.</p>

<figure class='code'><figcaption><span>inline-html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dl>
</span><span class='line'>  &lt;dt>Definition list&lt;/dt>
</span><span class='line'>  &lt;dd>Is something people use sometimes.&lt;/dd>
</span><span class='line'>
</span><span class='line'>  &lt;dt>Markdown in HTML&lt;/dt>
</span><span class='line'>  &lt;dd>Does *not* work **very** well. Use HTML &lt;em>tags&lt;/em>.&lt;/dd>
</span><span class='line'>&lt;/dl></span></code></pre></td></tr></table></div></figure>




<dl>
  <dt>Definition list</dt>
  <dd>Is something people use sometimes.</dd>

  <dt>Markdown in HTML</dt>
  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>
</dl>


<hr />

<h1>Horizontal Rule</h1>

<figure class='code'><figcaption><span>horizontal-rule </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Three or more...
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>Hyphens
</span><span class='line'>
</span><span class='line'>***
</span><span class='line'>
</span><span class='line'>Asterisks
</span><span class='line'>
</span><span class='line'>___
</span><span class='line'>
</span><span class='line'>Underscores</span></code></pre></td></tr></table></div></figure>


<p>Three or more&#8230;</p>

<hr />

<p>Hyphens</p>

<p>Asterisks</p>

<hr />

<p>Underscores</p>

<hr />

<h1>Line Breaks</h1>

<p>My basic recommendation for learning how line breaks work is to experiment and discover &#8211; hit <Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You&#8217;ll soon learn to get what you want. &#8220;Markdown Toggle&#8221; is your friend.</p>

<p>Here are some things to try out:</p>

<figure class='code'><figcaption><span>line-breaks </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Here's a line for us to start with.
</span><span class='line'>
</span><span class='line'>This line is separated from the one above by two newlines, so it will be a *separate paragraph*.
</span><span class='line'>
</span><span class='line'>This line is also a separate paragraph, but...
</span><span class='line'>This line is only separated by a single newline, so it's a separate line in the *same paragraph*.</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also a separate paragraph, but&#8230;
This line is only separated by a single newline, so it&#8217;s a separate line in the <em>same paragraph</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012个人总结]]></title>
    <link href="http://metooit.github.com/blog/2013/01/31/summary-for-year-2012/"/>
    <updated>2013-01-31T14:36:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/01/31/summary-for-year-2012</id>
    <content type="html"><![CDATA[<p><code>2012</code>还是过去了，作为一个成功跨入新纪元的人类，我由衷感到庆幸和激动，不得不说，我感到了自己身上肩负某种伟大的使命，哈哈，也许
还是心有余悸，我觉得至少应该写下点什么来记录这过去的<code>2012</code>以让后代的考古学家们能有所收获，这也许是冥冥中的伟大使命吧～</p>

<!-- more -->


<h1>前言：</h1>

<p><code>2012</code>，过去的一年，收获了很多也失去了很多；铭记了很多也淡忘了很多……
 年关岁末，突发奇想加上强迫症驱使，我觉得非常有必要总结一下即将逝去的<code>2012</code>（PS：当然，我说的时农历）。</p>

<h1>要说的话：</h1>

<h2>关于学习：</h2>

<p>只能说我还在路上，朝着<code>hacker</code>或者<code>geek</code>的理想，做一只打不死的小强，面对着似乎永远没有止境的Programming之路，我仍旧勇敢的翻越GFW，不断充实着自己，学习对我来说是一件开心的事情，有的时候学会一点小小的trick我都会高兴好久，无聊的时候配置一下vim，emacs，发现一两个很geek的功能，专注得调试一个下午的程序，或者读一本好书，都会让我有很多的收获。虽然，我了解自己懂的还是很少，要学习的还是很多，但是我始终坚持着，努力着也进步着。
对于技术我想我也是一个有着技术焦虑症的人，正如<a href="http://coolshell.cn">左耳朵耗子</a>提到过的，正因为认识到了要不断的去充实自己，在技术的道路上才能够真正地不被抛弃，所以我想我很大程度上是因为有强迫症，必须要弄懂我不知道的东西，当然不可能全部【人不能太贪心嘛:-)】
提到学习，我必须在这里对自己约法三章了：
* 首先，学习的态度上，必须要学会专注！学习务必不能多而不精，广而不专。
* 其次，学习的方法上，一定要养成良好的习惯！这其中包括记笔记的习惯、写To-Do-List的习惯、写计划总结的习惯等等，学习笔记、摘录笔记、读书笔记等等一定要有条理的梳理好，To-Do-List要按时完成，计划总结可以用笔记或者blog的方式写。
* 然后，也许我想说的是学习的途径吧，看书或者编程，二者要结合起来，同时要注意多交流多了解。
嗯，说好的约法“三”章，这里就写下三条吧，嘻嘻……，希望以后我读到这篇文章的时候能够仔细想想自己做到了没有。</p>

<h2>关于生活：</h2>

<p>不得不承认，我是一个生活的比较糊涂的人，但是啊，我渐渐开始明白一些道理，比如，这个生活吧，你要是认认真真地对待，就像你一丝不苟
地对待程序一样，其实还是很有乐趣的。所以，我要认认真真的生活，开开心心地生活，生活是美好滴～
除了编程其实最好还要多做运动，说真的，如果总不运动人真的会变得很不开朗啊。然后吧，多照一些照片，记录一下生活中美好的东东，记笔
记或者写在博客里，哎呀，多好，像个文艺青年一样，不错不错。
诶？不对，不对，我这明明是写总结，怎么越写越觉得像是对未来的规划来了……:-(
好吧，其实正是因为有了对过去的反思，才会这么迫不及待的要给自己一些忠告。</p>

<h1>过去的一年：</h1>

<ul>
<li>我从大二升到了大三</li>
<li>似乎就没什么了……我再想想……好像……额……对了！我前天生日，吃了爸爸做的长寿面……</li>
<li>然后，好吧，我承认，我的记忆有些混乱……以后想起来再补充吧……（PS：虽然，我觉得我可能再也不会这么努力地去想了……）</li>
</ul>


<h1>我还想说：</h1>

<p>嘻嘻……，我当然记得这一年中发生了什么，经历了什么，但是何必再去想呢，我得到了或者失去了，心里有数就好！借用一句香港电影里的
话就是，做人嘛，最重要的就是开心！</p>

<h1>读过的书：</h1>

<pre><code>    ·《黑客》-------------------了解真正的黑客和黑客精神
    ·《Python基础教程》----------因为想要好好学习python所以这本书肯定是要读的
    ·《Python Cookbook》-------社区作品里面有好多好的代码，没有全部看，但是以后可以多参考一下
    ·《算法导论》----------------还在不断地研习中，膜拜 Orz
    ·《黑客与画家》--------------这部书让我想了很多，关于编程，关于技术
    ·《数学之美》----------------算法与改变世界
    ·《浪潮之巅》----------------IT界的生存法则和进化规律
    ·《深入理解计算机系统》--------经典的书
      …………
</code></pre>

<p>还有一些书，我在豆瓣里标记过了，这里就不详细地列出来了，总之，多读书有好处的！</p>

<h1>后语：</h1>

<p>为了不犯【前言不搭后语】这样的错误，我觉得还是写个后语，至于搭不搭我就不好说了，那么，后语呢，就是：2013年，我来了～</p>

<p><img class="none" src="http://metooit.github.com/pictures/wallpaper.jpg" width="800" height="600" title="wall_paper" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeblock Test]]></title>
    <link href="http://metooit.github.com/blog/2013/01/31/codeblock/"/>
    <updated>2013-01-31T09:07:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/01/31/codeblock</id>
    <content type="html"><![CDATA[<p>测试一下语法高亮的功能：</p>

<figure class='code'><figcaption><span>browser.py </span><a href='https://github.com/webpy/webpy/blob/master/test/browser.py'>webpy </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">webtest</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">web</span>
</span><span class='line'>
</span><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="s">&quot;index&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;/hello/(.*)&quot;</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;/cookie&quot;</span><span class="p">,</span> <span class="s">&quot;cookie&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;/setcookie&quot;</span><span class="p">,</span> <span class="s">&quot;setcookie&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;/redirect&quot;</span><span class="p">,</span> <span class="s">&quot;redirect&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">web</span><span class="o">.</span><span class="n">application</span><span class="p">(</span><span class="n">urls</span><span class="p">,</span> <span class="nb">globals</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">index</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;welcome&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">hello</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="n">name</span> <span class="o">=</span> <span class="n">name</span> <span class="ow">or</span> <span class="s">&#39;world&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;hello, &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#39;!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">cookie</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">web</span><span class="o">.</span><span class="n">cookies</span><span class="p">()</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">setcookie</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">web</span><span class="o">.</span><span class="n">input</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">i</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>            <span class="n">web</span><span class="o">.</span><span class="n">setcookie</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;done&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">redirect</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">web</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">web</span><span class="o">.</span><span class="n">seeother</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BrowserTest</span><span class="p">(</span><span class="n">webtest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">testCookies</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">browser</span><span class="p">()</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0/setcookie?x=1&amp;y=2&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0/cookie&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="s">&#39;x,y&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">testNotfound</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">browser</span><span class="p">()</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0/notfound&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="mi">404</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">testRedirect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">browser</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0:8080/redirect&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;http://0.0.0.0:8080/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0:8080/redirect?url=/hello/foo&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;http://0.0.0.0:8080/hello/foo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;https://0.0.0.0:8080/redirect&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;https://0.0.0.0:8080/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;https://0.0.0.0:8080/redirect?url=/hello/foo&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;https://0.0.0.0:8080/hello/foo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">webtest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://metooit.github.com/blog/2013/01/30/hello-world/"/>
    <updated>2013-01-30T21:56:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/01/30/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World!
This is a personal blog! I am a person that love programming so much, yet
i&#8217;m not a geek, i am working hard to be one!
:-)</p>
]]></content>
  </entry>
  
</feed>
