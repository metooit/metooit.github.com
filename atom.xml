<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[K.I.S.S]]></title>
  <link href="http://metooit.github.com/atom.xml" rel="self"/>
  <link href="http://metooit.github.com/"/>
  <updated>2013-02-07T19:29:29+08:00</updated>
  <id>http://metooit.github.com/</id>
  <author>
    <name><![CDATA[metooit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is functional programming?]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/what-is-functional-programming/"/>
    <updated>2013-02-07T16:28:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/what-is-functional-programming</id>
    <content type="html"><![CDATA[<p>最近看到频率很高的一个词叫做<code>函数式编程</code>，《黑客与画家》中作者对于『Lisp』的极力推崇让人抑制不住去了解一下<code>函数式编程</code>，于是今天再次从阮一峰Blog上看到函数氏编程的时候，我觉得确实应该了解一下这种很神秘很高深的领域了。想一想忽然又觉得很吓人了。</p>

<!-- more -->


<h3>阮一峰&#8212;><a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html">函数式编程初探</a></h3>

<h4>函数式编程的特点</h4>

<ul>
<li>函数可以作为参数， 赋值给其他变量或者作为另一个函数的参数</li>
<li>只用表达式， 不用语句</li>
<li>所有函数保持独立， 功能仅为返回一个值， 不会改变全局变量和系统变量</li>
<li>返回值不依赖外部变量或者状态， 之一来与输入参数</li>
</ul>


<h4>函数式编程的意义</h4>

<ul>
<li>代码简洁，开发快速</li>
<li>代码易于理解</li>
<li>代码管理方便</li>
<li>易于并发编程</li>
<li>可以进行热升级</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[继续学习Ruby]]></title>
    <link href="http://metooit.github.com/blog/2013/02/07/continue-learning-ruby/"/>
    <updated>2013-02-07T14:39:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/07/continue-learning-ruby</id>
    <content type="html"><![CDATA[<p>今天翻看了一下阳志平的网络日志，偶然发现了他很推崇<code>Ruby</code>，然后我就发现了这篇文章<a href="http://www.yangzhiping.com/tech/ruby-worldmap-1.html">Ruby 闲话一二</a>, 看后了解了一下<code>Ruby</code>的处境和氛围， 就像《黑客与画家》里面说的， 编程语言很重要！ <code>Ruby</code> 是优美的，简单的，符合K.I.S.S原则，那我就觉得<code>Ruby</code>是一门好的语言。所以我想要了解它。</p>

<hr />

<p>如何学习一门编程语言呢？ 这个问题或许是很多新手程序员的心声，当然我也有过曾经的疑问，找到一种快速学会编程语言的方法可能是很多人想要的，<a href="http://www.yangzhiping.com/tech/learn-program-psychology.html">在学习区刻意练习</a>或许不是最聪明的方法，但是可能是真正想要学会编程的人应该有的一种执着和毅力，阳老师的这篇文章使我受益匪浅，如果想要去做好一件事情，那就用百分之百的热情和努力去做吧！相信自己能够成功的！我觉得这篇文章好还有另外的原因，就是觉得这篇文章说的话击中了我的弱点：</p>

<blockquote><ul>
<li>提升行动力 : 把自己的思维模式改成 if &#8230; then &#8230;</li>
<li>编程是个人行为 ： 不要忙于社交， 聊天， 发帖， 下载盗版学习资源， 争议语言好坏等等
真的， 如果我想学会<code>Ruby</code>，那就从一点以滴开始努力吧！</li>
</ul>
</blockquote>

<hr />

<p>昨天我写了关于<code>Ruby</code>的<a href="http://metooit.github.com/blog/2013/02/06/get-to-know-ruby/">Get to know Ruby</a>,今天才发现了阳老师的这篇文章：<a href="http://www.yangzhiping.com/tech/why-ruby-text.html">为什么是<code>Ruby</code></a>, 发现比我写的要简练有力的多，同时覆盖的面也要广的多。</p>

<hr />

<p>好了，关于文章的收获就是这些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get to know Ruby]]></title>
    <link href="http://metooit.github.com/blog/2013/02/06/get-to-know-ruby/"/>
    <updated>2013-02-06T20:58:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/06/get-to-know-ruby</id>
    <content type="html"><![CDATA[<p>这几天通过对<code>octopress</code>的了解，越来越觉得<code>Ruby</code>是一门很优美的语言，我虽然还没有下定决心学习它，但是要初步了解一下还是可以的，多看看总是不会有坏处的 ：-）</p>

<hr />

<h3>什么是Ruby?</h3>

<p><a href="http://www.ruby-lang.org/zh_cn/">Ruby</a>的官方网站上是这样说的：Ruby是一种跨平台、面向对象、动态的编程语言。简单性， 一致性是<code>Ruby</code>推崇的思想。</p>

<h4>Ruby思想：</h4>

<p><code>Ruby</code>的发明者是一个日本人，<a href="http://www.rubyist.net/~matz/">松本行弘</a>.我看了他说过的话，<code>Ruby</code>的思想就是：自然，表面简单内部却很复杂。</p>

<h4>Ruby成长：</h4>

<p>看过<code>Ruby</code>的成长记，我不得不说这是开源运动的一个胜利。开源才能更自由，有这么多优秀的软件架构用<code>Ruby</code>写成，<code>Ruby</code>也会越来越受欢迎吧！</p>

<h4>面向对象：</h4>

<p><code>Ruby</code>从最开始就是要：比<code>Perl</code>更加强大，比<code>Python</code>更加面向对象。<code>Ruby</code>中所有东西都是对象。</p>

<figure class='code'><figcaption><span>ruby-example1     </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">print</span> <span class="s2">&quot;I love Ruby!&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>据说这一句就说明了<code>Ruby</code>是一种纯『面向对象』的语言，这么说是要纯到什么程度呢？<code>Ruby</code>让所有类型都可以赋予方法和产生实例变量。具体的以后再好好体会吧！</p>

<h4>灵活性：</h4>

<p><code>Ruby</code>允许用户改变其核心，它试着不去妨碍程序员。比如，你可以定义如下函数以使用<code>plus</code>而不是<code>+</code>：</p>

<figure class='code'><figcaption><span>ruby-example2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Numberic</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">plus</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">+</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Blocks 一个独特而强大的特性：</h4>

<p>程序员可以给任意一个函数添加一个密封（closure）来表述这个函数如何工作。密封也被叫做代码块。这个特性也是<code>Lisp</code>文化融入<code>Ruby</code>的一个体现：</p>

<figure class='code'><figcaption><span>ruby-example1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">search_engine</span> <span class="o">=</span>
</span><span class='line'>    <span class="sx">%w[Google Yahoo MSN]</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">engine</span><span class="o">|</span>
</span><span class='line'>        <span class="s2">&quot;http://www.&quot;</span> <span class="o">+</span> <span class="n">engine</span><span class="o">.</span><span class="n">downcase</span> <span class="o">+</span> <span class="s2">&quot;.com&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码块在do&#8230;end 结构中。map函数将代码块应用一个词的列表中。</p>

<h4><code>Ruby</code>“有意”只提供单继承：</h4>

<p>这里这个“有意”是个什么意思呢？<code>Ruby</code>拥有模块，模块把许多方法放在一个类别里。类可以混合一个模块，得到这个模块提供的所有方法。比如所有提供<code>each</code>方法的类可以混合<code>Enumerable</code>模块，来调用这个模块所提供的所有方法。</p>

<figure class='code'><figcaption><span>ruby-example1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyArray</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>Ruby</code>的面貌：</h4>

<p><code>Ruby</code>很少使用符号并且倾向于使用英文单词作为关键字。
* var 可以是局部变量
* @var 是一个实例变量
* $var 是一个全局变量
这些信号让程序员看清楚每一个变量的角色，增强了程序的可读性。</p>

<h4>更多特性：</h4>

<ul>
<li>异常处理</li>
<li>有一个真正表示清扫的垃圾收集器对象</li>
<li>C 扩展方便</li>
<li>动态调用库</li>
<li>可提供不依赖操作系统的线程</li>
<li>轻便
&#8230;&#8230;</li>
</ul>


<hr />

<p>阅读完<code>Ruby</code>的一些特性之后，我又看了一下<a href="http://www.ruby-lang.org/zh_cn/documentation/quickstart/">20分钟体验<code>Ruby</code></a>,感觉很简单，所以也没有必要多说了。</p>

<hr />

<p>在<a href="http://ruby-china.org">Ruby-China</a>逛了一圈之后，作为一个新手，我决定看一看它的<a href="http://ruby-china.org/wiki">wiki</a>看一看有什么好的学习资源，简单翻看之后还真是收获不小。</p>

<ul>
<li>首先，<a href="http://saito.im/slide/ruby-new.html"><code>Ruby</code>语言新手教程</a>让我大体上体验了一下<code>Ruby</code>，这种幻灯片式的tutorial让人感觉简单明了，虽然不是很深入，我还时觉得这个是一个很好的学习资源。</li>
<li>然后，看到了<a href="http://ruby-china.org/wiki/start_leaning_rails">几篇文章</a>，关于Ruby， Ruby on rails, 先学习哪个呢？具体到每个人可能并不一样吧，所以我就先学习一下<code>Ruby</code>的语法，在看的过程中对比<code>Python</code>，然后立刻就学着用rails 建立一些小项目吧。</li>
<li>最后，算是一点意外的惊喜吧，我前两天写<code>Git</code>的两篇文章，其实这里就有一些关于<code>Git</code>学习的资料。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[继续学习 Git]]></title>
    <link href="http://metooit.github.com/blog/2013/02/05/dive-into-git/"/>
    <updated>2013-02-05T00:46:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/05/dive-into-git</id>
    <content type="html"><![CDATA[<p>我可不想做标题党，我当时可是真的想要认认真真地读一遍英文文档，然后好好总结一下，所以才斗胆写了一句“深入学习 Git”。</p>

<hr />

<p>直到我发现了这个<a href="http://rogerdudler.github.com/git-guide/index.zh.html">Git简易指南</a></p>

<hr />

<p>我忽然觉得整个世界都美好了，居然写的这么清晰易懂（当然也有中文的因素在里面），但是这篇文档无论从结构还是排版配图，都是很养眼的啊，所以我也就没有必要劳神费思在想去dive了，我觉得只要够用就好，所以就先好好的看一下这篇文档好了。我把文章的名字改成<code>继续学习 Git</code>了。囧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习 Git]]></title>
    <link href="http://metooit.github.com/blog/2013/02/04/learning-git/"/>
    <updated>2013-02-04T12:59:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/04/learning-git</id>
    <content type="html"><![CDATA[<p>寒假里的日子，有点让人觉得不知到要做什么，我很怕自己浪费时间，所以觉得要学会自己找事情做，然后我觉得有必要认真的学习一下git。Google了一下，找到了这个<a href="http://learn.github.com/p/intro.html">git官方学习指南</a>，我就照着这个先看一看git吧。：-）</p>

<hr />

<h3>关于Git</h3>

<h4>首先，看一下我的git版本吧：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git --version</span></code></pre></td></tr></table></div></figure>


<p>git version 1.7.10.4
这应该是最新的版本了吧。</p>

<h4>然后，如何取得帮助呢？</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --help
</span><span class='line'>$ git help log</span></code></pre></td></tr></table></div></figure>


<p><img class="git" src="http://metooit.github.com/pictures/git-lang.png" title="git-lang" ></p>

<h4>Git的特点：</h4>

<ul>
<li>几乎可以离线工作，并且很快（相对与SVN来说）</li>
<li>安装体积小</li>
<li>基于snapshot（快照），而不是changesets
<img class="git" src="http://metooit.github.com/pictures/snapshots.png" title="snapshots" ></li>
<li>如果要更加深入的了解git，请看<a href="http://eagain.net/articles/git-for-computer-scientists/">Git for Computer Scitentists</a></li>
<li>分支的代价更小，合并方便</li>
</ul>


<hr />

<h3>Git的初始化设置</h3>

<p>第一次使用Git时，首先要学会设置好一些东西，比如名字和邮件地址。设置的命令是<code>git config</code>,如果加上<code>--global</code>,这个命令会将设置信息存储在<code>~/.gitconfig</code>。</p>

<figure class='code'><figcaption><span>git-config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git -config --global user.name "your name here"
</span><span class='line'>$ git -config --global user.email "your email here"</span></code></pre></td></tr></table></div></figure>


<p>git也可以设定用户默认的文本编辑器，比如emacs</p>

<figure class='code'><figcaption><span>git-editor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git -config --global core.editor 'emacs'</span></code></pre></td></tr></table></div></figure>


<p>可以运行以下命令来查看当前的设置情况：</p>

<figure class='code'><figcaption><span>git-check </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config user.name</span></code></pre></td></tr></table></div></figure>


<p>或者呢，你可以自己查看，git首先会读取<code>/etc/gitconfig</code>,然后再读取<code>~/.gitconfig</code>，最后是<code>.git/config</code>。</p>

<hr />

<h3>初始化新的repo</h3>

<p>要初始化一个repo，在相应目录中使用<code>git init</code>。</p>

<figure class='code'><figcaption><span>repo-init </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir myproject
</span><span class='line'>$ cd myproject
</span><span class='line'>$ git init</span></code></pre></td></tr></table></div></figure>


<p>现在我们建立了一个新的code repo，在这个目录中拥有自己的<code>.git</code>目录，有一些自己的设置。
然后我们可以用</p>

<figure class='code'><figcaption><span>add-commit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "initial commit"</span></code></pre></td></tr></table></div></figure>


<p>现在我们拥有了一个新的project，其中有一个commit，如何查看这个项目的状态呢？</p>

<figure class='code'><figcaption><span>git-log </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>克隆一个git repo</h3>

<p>git可以和多个端口链接，其中最常使用的是<code>ssh</code>、<code>http</code>、<code>git protocol</code>。其格式是 <code>git clone [url]</code>, 其中的<code>url</code>的格式是<code>git://(hostname)/(path).git</code>。</p>

<figure class='code'><figcaption><span>git-clone </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/schacon/mungit.git
</span><span class='line'>$ cd mungit
</span><span class='line'>$ ls</span></code></pre></td></tr></table></div></figure>


<p>同样，在很多的情况下，你也可以使用http来clone：</p>

<figure class='code'><figcaption><span>git-clone </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone http://github.com/schacon/mungit.git</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>通常的工作流程</h3>

<p>现在该设置的都设置好了，项目也会建了，然后做什么呢？
通常的工作流程是：
* 修改文件
* 看看你改变了什么
* 阶段性的看看你希望commit的改变
* commit你的阶段性成果
* 重新来过……
最简单的工作流程是：
* 修改文件
* commit你的改变
* 重复……
最简单的example：
Edit files, <code>git commit -a</code>, repeat.</p>

<p>用到了<code>staging area</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status</span></code></pre></td></tr></table></div></figure>


<p>然后我们可以看到一个<code>changed but not updated</code>区域，这里的文件就是<code>unstaged</code>的文件。你必须stage一个文件，然后再commit。</p>

<p><img class="git" src="http://metooit.github.com/pictures/localoperations.png" title="localoperations" ></p>

<p>Git用户使用<code>git add</code>命令来既tracking文件也stage changes。
如果在staging阶段你不仅想看到什么文件被修改了或者staged，并且比较文件可以使用<code>git diff</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 快捷键备忘]]></title>
    <link href="http://metooit.github.com/blog/2013/02/01/vim-tips-to-remember/"/>
    <updated>2013-02-01T19:25:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/01/vim-tips-to-remember</id>
    <content type="html"><![CDATA[<h1>插件篇</h1>

<h2>NERDTree</h2>

<ul>
<li>快速启动NERDTree:               <code>leader</code>+<code>e</code></li>
<li>显示与隐藏NERDTree：            <code>Ctrl</code>+<code>E</code></li>
<li>NERDTree查找模式：              <code>leader</code>+<code>e</code> 或者 <code>leader</code>+<code>nt</code></li>
</ul>


<hr />

<h2>NERDCommenter</h2>

<ul>
<li><code>leader</code>+<code>cc</code>:                  仅注释。（普通模式下是注释当前行，可视模式下是注释选中的文字）</li>
<li><code>leader</code>+<code>c</code>+<code>Space</code>:           注释或者取消注释。</li>
<li><code>leader</code>+&#8217;cs&#8217;:                  性感的注释。
更多详细的内容在文档中，<code>help NERDCommenter</code></li>
</ul>


<hr />

<h2>EasyMotion</h2>

<ul>
<li>快速启动按键：                <code>leader</code>+<code>leader</code></li>
<li>词间快速移动：                <code>leader</code>+<code>leader</code>+<code>w</code></li>
<li>行间快速移动：                <code>leader</code>+<code>leader</code>+<code>j</code></li>
</ul>


<hr />

<h2>Ctags</h2>

<ul>
<li>快速启动按键：                <code>leader</code>+<code>tt</code></li>
<li>快速定位到tag：               <code>Ctrl</code>+<code>]</code></li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Cheat Sheet]]></title>
    <link href="http://metooit.github.com/blog/2013/02/01/markdown-cheat-sheet/"/>
    <updated>2013-02-01T07:37:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/02/01/markdown-cheat-sheet</id>
    <content type="html"><![CDATA[<p>大早上一起来忽然想起来要解决一点问题，然后就求助google，结果问题没有解决，却解决了我另一件烦心的事儿，那就是<code>Markdown</code>的语法问题，本来就很在意写博客的格式，但是不会<code>Markdown</code>的语法，我不会排版啊，汗……</p>

<hr />

<p>偶然间发现了<code>github</code>上的一个项目叫做<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">markdown-here</a>写得很简洁，以后可以打印一份来参考，这里呢，为了练习一下<code>Markdown</code>的语法，我就不复制粘贴了，直接在这里打一份好了。就当是<code>Markdown</code>的练习了。</p>

<h1>Headers</h1>

<hr />

<figure class='code'><figcaption><span>headers</span><a href='https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet'>Markdown-Cheatsheet </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># H1
</span><span class='line'>## H2
</span><span class='line'>### H3
</span><span class='line'>#### H4
</span><span class='line'>##### H5
</span><span class='line'>###### H6
</span><span class='line'>
</span><span class='line'>或者，你可以选择underline-style来标记H1和H2
</span><span class='line'>
</span><span class='line'>Alt-H1
</span><span class='line'>======
</span><span class='line'>
</span><span class='line'>Alt-H2
</span><span class='line'>------</span></code></pre></td></tr></table></div></figure>


<h1>H1</h1>

<h2>H2</h2>

<h3>H3</h3>

<h4>H4</h4>

<h5>H5</h5>

<h6>H6</h6>

<p>或者，你可以选择underline-style来标记H1和H2</p>

<h1>Alt-H1</h1>

<h2>Alt-H2</h2>

<h1>Emphasis</h1>

<hr />

<figure class='code'><figcaption><span>emphasis </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Emphasis, aka italics, with *asterisks* or _underscores_.
</span><span class='line'>Strong emphasis, aka bold, with **asterisks** or __underscores__
</span><span class='line'>Combined emphasis with **asterisks and _underscores_**.
</span><span class='line'>Strikethrough uses two tildes. ~~Scratch this.~~</span></code></pre></td></tr></table></div></figure>


<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong></p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<hr />

<h1>Lists</h1>

<figure class='code'><figcaption><span>lists </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. First ordered list item
</span><span class='line'>2. Another item
</span><span class='line'>   * Unordered sub-list
</span><span class='line'>1. Actual numbers don't matter, just that it's a number
</span><span class='line'>   1. Ordered sub-list
</span><span class='line'>4. And another itme.
</span><span class='line'>
</span><span class='line'>    Some text that should be alignede with the above item.
</span><span class='line'>
</span><span class='line'>* Undered list can use asterisks
</span><span class='line'>- Or minuses
</span><span class='line'>+ Or pluses</span></code></pre></td></tr></table></div></figure>


<ol>
<li>First ordered list item</li>
<li>Another item

<ul>
<li>Unordered sub-list</li>
</ul>
</li>
<li>Actual numbers don&#8217;t matter, just that it&#8217;s a number

<ol>
<li>Ordered sub-list</li>
</ol>
</li>
<li><p>And another itme.</p>

<p> Some text that should be alignede with the above item.</p></li>
<li><p>Undered list can use asterisks</p></li>
<li>Or minuses</li>
<li>Or pluses</li>
</ol>


<hr />

<h1>Links</h1>

<figure class='code'><figcaption><span>links </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I'm an inline-style link](https://www.google.com)
</span><span class='line'>[I'm a reference-style link][Arbitrary case-insensitive reference text]
</span><span class='line'>[You can use numbers for reference-style link definitions][1]
</span><span class='line'>Or leave it empty and use the [link text itself][]
</span><span class='line'>Some tex to show that the reference links can follow later.
</span><span class='line'>
</span><span class='line'>[arbitrary case insensive refeence text]: https://www.mozilla.org
</span><span class='line'>[1]: http://slashdot.org
</span><span class='line'>[link text itself]: http://www.reddit.com</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.google.com">I&#8217;m an inline-style link</a></p>

<p>[I&#8217;m a reference-style link][Arbitrary case-insensitive reference text]</p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a></p>

<p>Some tex to show that the reference links can follow later.</p>

<hr />

<h1>Images</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Here is our logo(hover to see the title text):
</span><span class='line'>
</span><span class='line'>Inline-style:
</span><span class='line'>![alt-text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1)
</span><span class='line'>
</span><span class='line'>Reference-style:
</span><span class='line'>![alt-text][logo]
</span><span class='line'>
</span><span class='line'>[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"</span></code></pre></td></tr></table></div></figure>


<p>Here is our logo(hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" title="Logo Title Text 1" alt="alt-text" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" title="Logo Title Text 2" alt="alt-text" /></p>

<hr />

<h1>Code and syntax highlighting</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Inline `code` has `back-ticks around` it</span></code></pre></td></tr></table></div></figure>


<p>Inline <code>code</code> has <code>back-ticks around</code> it</p>

<p>Blocks of code are either fenced by lines with three back-ticks &#8220;&#8220;` , or are indented with four space.</p>

<pre><code>```javascript
var s = "JavaScript syntax highlighting";
alert(s);
```
```python
s = "python syntax hightlighting"
print s
```

```
No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;
```
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="s2">&quot;JavaScript syntax highlighting&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&quot;python syntax hightlighting&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">No</span> <span class="n">language</span> <span class="n">indicated</span><span class="p">,</span> <span class="n">so</span> <span class="n">no</span> <span class="n">syntax</span> <span class="n">highlighting</span><span class="o">.</span>
</span><span class='line'><span class="n">But</span> <span class="n">let</span><span class="s">&#39;s throw in a &lt;b&gt;tag&lt;/b&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h1>Tables</h1>

<figure class='code'><figcaption><span>tables </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Colons can be used to align columns.
</span><span class='line'>
</span><span class='line'>| Tables        | Are           | Coo l |
</span><span class='line'>| ------------- |:-------------:| -----:|
</span><span class='line'>| col 3 is      | right-aligned | $1600 |
</span><span class='line'>| col 2 is      | centered      |   $12 |
</span><span class='line'>| zebra stripes | are neat      |    $1 |
</span><span class='line'>
</span><span class='line'>The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.
</span><span class='line'>
</span><span class='line'>Markdown | Less | Pretty
</span><span class='line'>--- | --- | ---
</span><span class='line'>*Still* | `renders` | **nicely**
</span><span class='line'>1 | 2 | 3</span></code></pre></td></tr></table></div></figure>


<p>Colons can be used to align columns.</p>

<table>
<thead>
<tr>
<th></th>
<th> Tables        </th>
<th align="center"> Are           </th>
<th align="right"> Coo l </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> col 3 is      </td>
<td align="center"> right-aligned </td>
<td align="right"> $1600 |</td>
</tr>
<tr>
<td></td>
<td> col 2 is      </td>
<td align="center"> centered      </td>
<td align="right">   $12 |</td>
</tr>
<tr>
<td></td>
<td> zebra stripes </td>
<td align="center"> are neat      </td>
<td align="right">    $1 |</td>
</tr>
</tbody>
</table>


<p>The outer pipes (|) are optional, and you don&#8217;t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
<thead>
<tr>
<th>Markdown </th>
<th> Less </th>
<th> Pretty</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Still</em> </td>
<td> <code>renders</code> </td>
<td> <strong>nicely</strong></td>
</tr>
<tr>
<td>1 </td>
<td> 2 </td>
<td> 3</td>
</tr>
</tbody>
</table>


<hr />

<h1>Blockquotes</h1>

<figure class='code'><figcaption><span>blockquotes </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>Blockquotes are very handy in email to emulate reply text.
</span><span class='line'>>This line is part of the same quote.
</span><span class='line'>
</span><span class='line'>Quote break
</span><span class='line'>
</span><span class='line'>>This is a very long line . This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p></blockquote>

<p>Quote break</p>

<p>This is a very long line . This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .This is a very long line .</p>

<hr />

<h1>Inline HTML</h1>

<p>You can also use raw HTML in your <code>Markdown</code>.</p>

<figure class='code'><figcaption><span>inline-html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dl>
</span><span class='line'>  &lt;dt>Definition list&lt;/dt>
</span><span class='line'>  &lt;dd>Is something people use sometimes.&lt;/dd>
</span><span class='line'>
</span><span class='line'>  &lt;dt>Markdown in HTML&lt;/dt>
</span><span class='line'>  &lt;dd>Does *not* work **very** well. Use HTML &lt;em>tags&lt;/em>.&lt;/dd>
</span><span class='line'>&lt;/dl></span></code></pre></td></tr></table></div></figure>




<dl>
  <dt>Definition list</dt>
  <dd>Is something people use sometimes.</dd>

  <dt>Markdown in HTML</dt>
  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>
</dl>


<hr />

<h1>Horizontal Rule</h1>

<figure class='code'><figcaption><span>horizontal-rule </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Three or more...
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>Hyphens
</span><span class='line'>
</span><span class='line'>***
</span><span class='line'>
</span><span class='line'>Asterisks
</span><span class='line'>
</span><span class='line'>___
</span><span class='line'>
</span><span class='line'>Underscores</span></code></pre></td></tr></table></div></figure>


<p>Three or more&#8230;</p>

<hr />

<p>Hyphens</p>

<p>Asterisks</p>

<hr />

<p>Underscores</p>

<hr />

<h1>Line Breaks</h1>

<p>My basic recommendation for learning how line breaks work is to experiment and discover &#8211; hit <Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You&#8217;ll soon learn to get what you want. &#8220;Markdown Toggle&#8221; is your friend.</p>

<p>Here are some things to try out:</p>

<figure class='code'><figcaption><span>line-breaks </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Here's a line for us to start with.
</span><span class='line'>
</span><span class='line'>This line is separated from the one above by two newlines, so it will be a *separate paragraph*.
</span><span class='line'>
</span><span class='line'>This line is also a separate paragraph, but...
</span><span class='line'>This line is only separated by a single newline, so it's a separate line in the *same paragraph*.</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also a separate paragraph, but&#8230;
This line is only separated by a single newline, so it&#8217;s a separate line in the <em>same paragraph</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012个人总结]]></title>
    <link href="http://metooit.github.com/blog/2013/01/31/summary-for-year-2012/"/>
    <updated>2013-01-31T14:36:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/01/31/summary-for-year-2012</id>
    <content type="html"><![CDATA[<p><code>2012</code>还是过去了，作为一个成功跨入新纪元的人类，我由衷感到庆幸和激动，不得不说，我感到了自己身上肩负某种伟大的使命，哈哈，也许
还是心有余悸，我觉得至少应该写下点什么来记录这过去的<code>2012</code>以让后代的考古学家们能有所收获，这也许是冥冥中的伟大使命吧～</p>

<hr />

<h1>前言：</h1>

<p><code>2012</code>，过去的一年，收获了很多也失去了很多；铭记了很多也淡忘了很多……
 年关岁末，突发奇想加上强迫症驱使，我觉得非常有必要总结一下即将逝去的<code>2012</code>（PS：当然，我说的时农历）。</p>

<h1>要说的话：</h1>

<h2>关于学习：</h2>

<p>只能说我还在路上，朝着<code>hacker</code>或者<code>geek</code>的理想，做一只打不死的小强，面对着似乎永远没有止境的Programming之路，我仍旧勇敢的翻越GFW，不断充实着自己，学习对我来说是一件开心的事情，有的时候学会一点小小的trick我都会高兴好久，无聊的时候配置一下vim，emacs，发现一两个很geek的功能，专注得调试一个下午的程序，或者读一本好书，都会让我有很多的收获。虽然，我了解自己懂的还是很少，要学习的还是很多，但是我始终坚持着，努力着也进步着。
对于技术我想我也是一个有着技术焦虑症的人，正如<a href="http://coolshell.cn">左耳朵耗子</a>提到过的，正因为认识到了要不断的去充实自己，在技术的道路上才能够真正地不被抛弃，所以我想我很大程度上是因为有强迫症，必须要弄懂我不知道的东西，当然不可能全部【人不能太贪心嘛:-)】
提到学习，我必须在这里对自己约法三章了：
* 首先，学习的态度上，必须要学会专注！学习务必不能多而不精，广而不专。
* 其次，学习的方法上，一定要养成良好的习惯！这其中包括记笔记的习惯、写To-Do-List的习惯、写计划总结的习惯等等，学习笔记、摘录笔记、读书笔记等等一定要有条理的梳理好，To-Do-List要按时完成，计划总结可以用笔记或者blog的方式写。
* 然后，也许我想说的是学习的途径吧，看书或者编程，二者要结合起来，同时要注意多交流多了解。
嗯，说好的约法“三”章，这里就写下三条吧，嘻嘻……，希望以后我读到这篇文章的时候能够仔细想想自己做到了没有。</p>

<h2>关于生活：</h2>

<p>不得不承认，我是一个生活的比较糊涂的人，但是啊，我渐渐开始明白一些道理，比如，这个生活吧，你要是认认真真地对待，就像你一丝不苟
地对待程序一样，其实还是很有乐趣的。所以，我要认认真真的生活，开开心心地生活，生活是美好滴～
除了编程其实最好还要多做运动，说真的，如果总不运动人真的会变得很不开朗啊。然后吧，多照一些照片，记录一下生活中美好的东东，记笔
记或者写在博客里，哎呀，多好，像个文艺青年一样，不错不错。
诶？不对，不对，我这明明是写总结，怎么越写越觉得像是对未来的规划来了……:-(
好吧，其实正是因为有了对过去的反思，才会这么迫不及待的要给自己一些忠告。</p>

<h1>过去的一年：</h1>

<ul>
<li>我从大二升到了大三</li>
<li>似乎就没什么了……我再想想……好像……额……对了！我前天生日，吃了爸爸做的长寿面……</li>
<li>然后，好吧，我承认，我的记忆有些混乱……以后想起来再补充吧……（PS：虽然，我觉得我可能再也不会这么努力地去想了……）</li>
</ul>


<h1>我还想说：</h1>

<p>嘻嘻……，我当然记得这一年中发生了什么，经历了什么，但是何必再去想呢，我得到了或者失去了，心里有数就好！借用一句香港电影里的
话就是，做人嘛，最重要的就是开心！</p>

<h1>读过的书：</h1>

<pre><code>    ·《黑客》-------------------了解真正的黑客和黑客精神
    ·《Python基础教程》----------因为想要好好学习python所以这本书肯定是要读的
    ·《Python Cookbook》-------社区作品里面有好多好的代码，没有全部看，但是以后可以多参考一下
    ·《算法导论》----------------还在不断地研习中，膜拜 Orz
    ·《黑客与画家》--------------这部书让我想了很多，关于编程，关于技术
    ·《数学之美》----------------算法与改变世界
    ·《浪潮之巅》----------------IT界的生存法则和进化规律
    ·《深入理解计算机系统》--------经典的书
      …………
</code></pre>

<p>还有一些书，我在豆瓣里标记过了，这里就不详细地列出来了，总之，多读书有好处的！</p>

<h1>后语：</h1>

<p>为了不犯【前言不搭后语】这样的错误，我觉得还是写个后语，至于搭不搭我就不好说了，那么，后语呢，就是：2013年，我来了～</p>

<p><img class="none" src="http://metooit.github.com/pictures/wallpaper.jpg" width="800" height="600" title="wall_paper" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeblock Test]]></title>
    <link href="http://metooit.github.com/blog/2013/01/31/codeblock/"/>
    <updated>2013-01-31T09:07:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/01/31/codeblock</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>browser.py </span><a href='https://github.com/webpy/webpy/blob/master/test/browser.py'>webpy </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">webtest</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">web</span>
</span><span class='line'>
</span><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="s">&quot;index&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;/hello/(.*)&quot;</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;/cookie&quot;</span><span class="p">,</span> <span class="s">&quot;cookie&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;/setcookie&quot;</span><span class="p">,</span> <span class="s">&quot;setcookie&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;/redirect&quot;</span><span class="p">,</span> <span class="s">&quot;redirect&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">web</span><span class="o">.</span><span class="n">application</span><span class="p">(</span><span class="n">urls</span><span class="p">,</span> <span class="nb">globals</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">index</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;welcome&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">hello</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="n">name</span> <span class="o">=</span> <span class="n">name</span> <span class="ow">or</span> <span class="s">&#39;world&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;hello, &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#39;!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">cookie</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">web</span><span class="o">.</span><span class="n">cookies</span><span class="p">()</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">setcookie</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">web</span><span class="o">.</span><span class="n">input</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">i</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>            <span class="n">web</span><span class="o">.</span><span class="n">setcookie</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;done&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">redirect</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">web</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">web</span><span class="o">.</span><span class="n">seeother</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BrowserTest</span><span class="p">(</span><span class="n">webtest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">testCookies</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">browser</span><span class="p">()</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0/setcookie?x=1&amp;y=2&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0/cookie&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="s">&#39;x,y&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">testNotfound</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">browser</span><span class="p">()</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0/notfound&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="mi">404</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">testRedirect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">browser</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0:8080/redirect&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;http://0.0.0.0:8080/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://0.0.0.0:8080/redirect?url=/hello/foo&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;http://0.0.0.0:8080/hello/foo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;https://0.0.0.0:8080/redirect&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;https://0.0.0.0:8080/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;https://0.0.0.0:8080/redirect?url=/hello/foo&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;https://0.0.0.0:8080/hello/foo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">webtest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://metooit.github.com/blog/2013/01/30/hello-world/"/>
    <updated>2013-01-30T21:56:00+08:00</updated>
    <id>http://metooit.github.com/blog/2013/01/30/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World!
This is a personal blog! I am a person that love programming so much, yet
i&#8217;m not a geek, i am working hard to be one!
:-)</p>
]]></content>
  </entry>
  
</feed>
